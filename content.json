{"meta":{"title":"H-web Blog","subtitle":"Hong's Front-End Blog","description":"Hong's Front-End Blog","author":"HS Hong","url":"https://sharryhong.github.io"},"pages":[{"title":"About Me","date":"2016-11-26T09:28:20.000Z","updated":"2016-12-13T03:32:07.530Z","comments":true,"path":"about/index.html","permalink":"https://sharryhong.github.io/about/index.html","excerpt":"","text":"Hong’s keyword : 호기심, 탐구, 열정, 여행지향점 : 웹표준, 웹접근성 등 기본을 단단히하여 높은 퀄리티의 서비스를 개발하는 Front-End 개발자현재 관심 skill : HTML, CSS, SASS, Javascript, jQuery, AngularJS, Ionic … Computer Science 전공 -&gt; Flash 개발 (게임, 모션, 이러닝) -&gt; 각종 삽질?경험 결과 개발이 적성에 맞다고 더욱 깨달음 ^^ -&gt; 2015년 : 웹퍼블리셔가 되기 위해 열공 당시 블로그 바로가기 -&gt; 2016년 : 그룹웨어 웹퍼블리싱 개발 프리랜서 경험 구조(HTML), 표현(CSS), 동작(JavaScript)을 잘 이해하고 구현해야 퀄리티 있는 결과물이 나온다는 생각으로 집중 공부 중. Fast Campus - Front-End 개발 스쿨 Github에 공부 내용 정리 -&gt; 현재 : 회사와 개인이 Win Win 하며 성장할 회사를 찾고 있습니다."}],"posts":[{"title":"NVM(Node Version Manager)으로 node.js 버전관리하기","slug":"nvm","date":"2016-12-20T13:27:35.000Z","updated":"2016-12-21T06:10:12.560Z","comments":true,"path":"2016/12/20/nvm/","link":"","permalink":"https://sharryhong.github.io/2016/12/20/nvm/","excerpt":"","text":"Node Version Manager webpack이 자꾸 안되었던 이유가 node.js의 버전때문이었습니다. 하아 ㅜㅜ 지금이라도 알았으니 다행.. ^^gulp + webpack 설정으로 사용하고 싶어, 스터디 팀끼리 서로 정보 공유하며 씨름하다 결국엔 성공했습니다. ^^ 씐나씐나 ~~~ Windows 환경에서 NVM을 설치하여 node.js 버전을 바꾸며 사용하는 방법입니다.(언제나 그렇듯 Mac은 쉽죠잉 : 맥은 여기 참조) 1) 기존에 사용하던 node를 삭제합니다. 윈도우의 경우 제어판의 프로그램 제거에서 삭제하면 됩니다. 2) nvm을 설치합니다. nvm-setup.zip 다운받아 설치 3) 터미널에서 $ nvm install v4.4.6 처럼 사용할 버전의 노드를 설치합니다. 4) $ nvm ls 로 설치된 버전을 확인 할 수 있습니다. 1234$ nvm ls * 6.9.2 (Currently using 64-bit executable) 4.4.6 위처럼 저는 기존에 사용하던 gulp를 위해 v4.x와 현재 사용할 webpack + gulp를 위해 v6.x를 설치하였습니다. 5) 노트 버전을 바꾸어봅니다. $ nvm use 4.4.6node버전 확인 : $ node -v 만약 node가 설치 안된 것 처럼 나올 때는 터미널을 껐다 켜보세요. 6) gulp를 전역에 설치합니다. $ npm install --global gulp주의할 점은 gulp가 버전별로 설치가 되어야 한다는 점입니다.즉, $ nvm use 4.4.6 에서도 설치, $ nvm use 6.9.2로 바꿔서도 설치해줍니다. 7) 이제 프로젝트에 해당하는 node 버전으로 바꾼 후에 기존처럼 사용하면 됩니다.","categories":[{"name":"ForWeb","slug":"ForWeb","permalink":"https://sharryhong.github.io/categories/ForWeb/"}],"tags":[{"name":"node.js","slug":"node-js","permalink":"https://sharryhong.github.io/tags/node-js/"},{"name":"NVM","slug":"NVM","permalink":"https://sharryhong.github.io/tags/NVM/"}],"keywords":[{"name":"ForWeb","slug":"ForWeb","permalink":"https://sharryhong.github.io/categories/ForWeb/"}]},{"title":"SASS Nesting(중첩)","slug":"sass-nesting","date":"2016-12-19T07:14:28.000Z","updated":"2016-12-19T07:28:07.682Z","comments":true,"path":"2016/12/19/sass-nesting/","link":"","permalink":"https://sharryhong.github.io/2016/12/19/sass-nesting/","excerpt":"","text":"해당 코드가 있는 Github 바로가기01해당 코드가 있는 Github 바로가기02 Nesting(중첩)중첩은 반복을 제거하고 스타일링에 분명한 DOM관계를 보여줌으로서 코드를 효율적으로 만듭니다. 확장자가 SCSS, SASS 일 때 문법이 다른데,SCSS파일의 경우는 기존의 CSS의 문법과 동일합니다.123456.parent &#123; color: blue; .child &#123; font-size: 12px; &#125;&#125; SASS파일의 경우 {}를 쓰지 않고 들여쓰기로 구분합니다. ;도 쓰지 않습니다.1234.parent color: blue .child font-size: 12px 위의 SCSS와 SASS의 CSS 컴파일 결과는 같습니다.1234567.parent &#123; color: blue;&#125;.parent .child &#123; font-size: 12px;&#125; 속성에 관련한 Nesting :1234567.parent &#123; font : &#123; family: Roboto, sans-serif; size: 12px; decoration: none; &#125;&#125; 컴파일 결과12345.parent &#123; font-family: Roboto, sans-serif; font-size: 12px; font-decoration: none;&#125; &amp; : 부모 참조 선택자. 중첩된 구조에서 사용합니다.123.button &amp;:hover background: skyblue 컴파일 결과123.button:hover &#123; background: skyblue;&#125; @extend : 선택자 상속. 그룹핑 개념으로 선언된 다른 규칙의 내용을 상속받습니다.123456789101112131415161718$btn-radius: 4px$btn-align: center$btn-gap: .6em$btn-bg: #fe9977.button display: inline-block padding: $btn-gap $btn-gap background: $btn-bg text-align: $btn-align &amp;:hover background: skyblue.button-error @extend .button color: #fff border: 3px solid green 컴파일 결과1234567891011.button, .button-error &#123; display: inline-block; padding: 0.6em 0.6em; background: #fe9977; text-align: center; &#125; .button:hover, .button-error:hover &#123; background: skyblue; &#125;.button-error &#123; color: #fff; border: 3px solid green; &#125;","categories":[{"name":"Front-End","slug":"Front-End","permalink":"https://sharryhong.github.io/categories/Front-End/"},{"name":"Sass","slug":"Front-End/Sass","permalink":"https://sharryhong.github.io/categories/Front-End/Sass/"}],"tags":[{"name":"Sass","slug":"Sass","permalink":"https://sharryhong.github.io/tags/Sass/"},{"name":"Nesting","slug":"Nesting","permalink":"https://sharryhong.github.io/tags/Nesting/"}],"keywords":[{"name":"Front-End","slug":"Front-End","permalink":"https://sharryhong.github.io/categories/Front-End/"},{"name":"Sass","slug":"Front-End/Sass","permalink":"https://sharryhong.github.io/categories/Front-End/Sass/"}]},{"title":"SASS Variables (변수)","slug":"sass-variable","date":"2016-12-19T06:27:48.000Z","updated":"2016-12-19T07:16:58.569Z","comments":true,"path":"2016/12/19/sass-variable/","link":"","permalink":"https://sharryhong.github.io/2016/12/19/sass-variable/","excerpt":"","text":"해당 코드가 있는 Github 바로가기01해당 코드가 있는 Github 바로가기02 CSS로 style 코드를 작성하다보면 반복사용 하는 것들을 한번에 관리하면 좋겠다는 생각을 하게 됩니다.이럴 때 사용하면 좋을 문법이 sass의 변수입니다. 나중엔 mixin, 함수 개념등을 알면 좋은데 우선 변수만 잘 써도 일이 확 줄어드는 것을 알 수 있습니다. 조으다! ^^ Variables (변수)변수는 가독성과 유지보수를 향상시켜줍니다. 문법 : $를 붙여 변수를 만들고 값을 대입합니다.12345// 변수 선언 $translucent-white: rgba(255,255,255,0.3);// 변수 사용시 background-color: $translucent-white; 변수이름 작성 규칙변수 이름 사이에 공백을 사용하지 않습니다.변수 이름의 음절 사이에 _ , - 등을 사용합니다. _ , - 구별을 하지 않습니다.만약 프로그래밍에 익숙해서 camelCase방식이 익숙하다면 사용이 가능하지만 camelCase방식은 함수 이름에 사용되므로 권장하지는 않습니다. !global : 전역변수처럼 사용가능하게 합니다.12345678#main &#123; $width: 5em !global; width: $width;&#125;#sidebar &#123; width: $width;&#125; !default : 기본값. null값을 제외하곤 다른 값이 우선시됩니다.123$set-width: 900px;$set-width: 1000px !default// 의 경우 900px로 됩니다. Data Type (데이터 유형) 데이터유형 설명 예 null 빈 값 number 숫자 1.2, 3, 14px (특이하게 단위가 붙어도 숫자형입니다.) string 문자 color (#, rgba, …) “../img/icon.jpg”, ‘Time, serif’, #333 boolean 논리. true, false list 배열 개념 1.5em Helvetica bold; or Helvetica, Arial, sans-serif; map 객체 개념 (key1: value1, key2: value2);","categories":[{"name":"Front-End","slug":"Front-End","permalink":"https://sharryhong.github.io/categories/Front-End/"},{"name":"Sass","slug":"Front-End/Sass","permalink":"https://sharryhong.github.io/categories/Front-End/Sass/"}],"tags":[{"name":"Sass","slug":"Sass","permalink":"https://sharryhong.github.io/tags/Sass/"},{"name":"Variables","slug":"Variables","permalink":"https://sharryhong.github.io/tags/Variables/"}],"keywords":[{"name":"Front-End","slug":"Front-End","permalink":"https://sharryhong.github.io/categories/Front-End/"},{"name":"Sass","slug":"Front-End/Sass","permalink":"https://sharryhong.github.io/categories/Front-End/Sass/"}]},{"title":"Link-AngularJS","slug":"Link-AngularJS","date":"2016-12-18T09:57:31.000Z","updated":"2016-12-18T10:19:02.732Z","comments":true,"path":"2016/12/18/Link-AngularJS/","link":"","permalink":"https://sharryhong.github.io/2016/12/18/Link-AngularJS/","excerpt":"","text":"앵귤러 개발자가 놓치기 쉬운 10가지 사실들 - 김정환님 블로그 포스팅을 보며 앵귤러 코드 리펙토링하고 있습니다.저 글 뿐 아니라 앵귤러 세미나내용도 있으니 우리 썬쓰 SunS(스터디 팀)끼리 열심히 해볼 생각입니다. ^^저도 차근차근 실력쌓아서 도움되는 블로그를 만들고 싶네요. :)","categories":[{"name":"Bookmark","slug":"Bookmark","permalink":"https://sharryhong.github.io/categories/Bookmark/"}],"tags":[{"name":"AngularJS","slug":"AngularJS","permalink":"https://sharryhong.github.io/tags/AngularJS/"}],"keywords":[{"name":"Bookmark","slug":"Bookmark","permalink":"https://sharryhong.github.io/categories/Bookmark/"}]},{"title":"2016 정보접근성 기술 컨퍼런스 & WAI-ARIA","slug":"web-aria","date":"2016-12-13T04:31:01.000Z","updated":"2016-12-13T08:11:58.456Z","comments":true,"path":"2016/12/13/web-aria/","link":"","permalink":"https://sharryhong.github.io/2016/12/13/web-aria/","excerpt":"","text":"12월 9일 금요일. UN 인권의 날 기념 - 2016 정보접근성 기술 컨퍼런스에 다녀왔습니다.집에서 먼 거리에 있어 상암쪽은 살면서 두번째네요~결론은.. 눈 비비며 먼 길 다녀온 보람이 있었다는 것입니다. ^^ 특히 우리 프론트엔드 개발스쿨의 야무쌤 파트였던 WAI-ARIA부분은 예전부터 알고 싶던 기술이었기 때문에 더 귀를 쫑끗하며 들었습니다.한국 웹접근성 지침을 잘 따르더라도, 모두가 동등하게 사용하는데에는 부족하다는데요.실제로 스크린리더기 등으로 들어보니 우리가 의도한 바를 어떤 분들은 알기 어렵구나, 그리고 아리아를 적용하는게 생각보다 어렵진 않겠구나를 느꼈습니다. WAI-ARIA란?접근성이 떨어지기 쉬운 동적 컨텐츠에 접근성을 보완하는 기술입니다. 접근성이 떨어지기 쉬운 부분은?동적인 웹 애플리케이션 접근성 보장을 위한 지침이 부족합니다.Ajax를 통한 실시간 변경 콘텐츠를 못 읽을 수 있습니다.페이지 콘텐츠 중 일부만 변경 시, 동일한 내용을 계속 읽어야 하는 문제가 발생합니다.화면을 확대해서 보는 분들의 경우, 가시범위 밖의 콘텐츠 변경 내용을 알기 어렵습니다.그 외에도 많다고 하네요 ㅜㅜ WAI-ARIA의 목적?마크업에 역할(Role), 속성(Property), 상태(State) 정보를 추가하여스크린 리더 및 보조 기기등에서 접근성 및 상호운용성을 향상시키고보다 나은 사용자경험(UX)을 제공하기 위함 브라우저 지원현황: IE11부터, 대부분의 브라우저가 지원하고 있습니다. WAI-ARIA 사례 바로가기: 야무쌤 포함 여러 전문가들의 노력으로 아리아 사례가 github에 공개되어 있습니다. 세미나 그 후 나의 생각아직 공공기관이나 대기업의 사이트 정도만 웹접근성을 잘 따르려 노력하고 있다고 들었는데, 앞으로는 모두를 위해 천천히라도 적용하였으면 좋겠습니다.웹 접근성을 지키면 사람의 일부가 아니라, 전체에 좋아질거라 생각됩니다.노인을 위한 디자인을 위해, 3년간 노인 분장을 하고 도시를 돌아다녔던 패트리샤 무어의 이야기.. 그 결과 힘이 약한 노인이나 아이들 뿐 아니라, 모두에게 편리한 제품을 디자인할 수 있었습니다.웹, 앱도 다르지 않을거라 생각됩니다. 좋은 서비스에 맞는 좋은 접근성을 제공하여 누구나 쉽고 편리하게 사용하는 서비스를 만들고 싶네요… ^^ 연관 링크W3C의 WAI-ARIA 1.1","categories":[{"name":"ForWeb","slug":"ForWeb","permalink":"https://sharryhong.github.io/categories/ForWeb/"}],"tags":[{"name":"웹접근성","slug":"웹접근성","permalink":"https://sharryhong.github.io/tags/웹접근성/"},{"name":"WAI-ARIA","slug":"WAI-ARIA","permalink":"https://sharryhong.github.io/tags/WAI-ARIA/"}],"keywords":[{"name":"ForWeb","slug":"ForWeb","permalink":"https://sharryhong.github.io/categories/ForWeb/"}]},{"title":"portfolio-sli.do 서비스 (AngularJS)","slug":"portfolio-slido","date":"2016-12-12T11:23:57.000Z","updated":"2016-12-21T06:16:18.952Z","comments":true,"path":"2016/12/12/portfolio-slido/","link":"","permalink":"https://sharryhong.github.io/2016/12/12/portfolio-slido/","excerpt":"","text":"Hong’s portfolio - sli.do 바로가기Github 소스 바로가기 포트폴리오 주제강의 중 실시간으로 질문, 답변을 받는 서비스 포트폴리오 개발 기간2016-11 ~ 공부하며 코드 리펙토링 중입니다. 특징 및 기능반응형 웹 : 데스크탑, 테블릿, 모바일에 대응하여 적절한 view를 보여줍니다.JSON파일의 data를 불러옵니다. (그룹 이름, 작성자 이름, 질문 내용, 좋아요 개수 등)질문을 입력받아 popular(인기순), Recent(최신순) 대로 보여줍니다.popular(인기순) : 좋아요 버튼 클릭시 자동으로 상단으로 이동합니다.질문자 이름을 입력하지 않을 시 Anonymous(익명)로 표시됩니다.질문 내용을 클릭하면 상세페이지로 이동하여 comment(덧글)를 달 수 있습니다.덧글 개수가 JSON data로 저장되어 main에서 숫자로 보여집니다. 사용 SkillJavaScript, AngularJS, JSON, jQueryHTML, SASS to CSSGulp 주제 선정 이유AngularJS로 서비스를 만들어보고 싶던 중, 생활코딩 세미나에서 sli.do의 서비스를 사용하였습니다.사용이 직관적이어서 좋았고, 강의 중 질문을 바로 올리고, 나중에 강사가 모아서 대답을 할 수 있는 좋은 서비스라 생각되어 개발해보고 싶었습니다. 고려사항comment 기능이 있으면 좋을 것 같아 추가하였습니다.JavaScript prototype Class문법크로스 브라우징 : IE9이상","categories":[{"name":"Portfolio","slug":"Portfolio","permalink":"https://sharryhong.github.io/categories/Portfolio/"}],"tags":[{"name":"AngularJS","slug":"AngularJS","permalink":"https://sharryhong.github.io/tags/AngularJS/"},{"name":"Portfolio","slug":"Portfolio","permalink":"https://sharryhong.github.io/tags/Portfolio/"},{"name":"JavaScript","slug":"JavaScript","permalink":"https://sharryhong.github.io/tags/JavaScript/"},{"name":"SASS","slug":"SASS","permalink":"https://sharryhong.github.io/tags/SASS/"},{"name":"Gulp","slug":"Gulp","permalink":"https://sharryhong.github.io/tags/Gulp/"},{"name":"sli.do","slug":"sli-do","permalink":"https://sharryhong.github.io/tags/sli-do/"}],"keywords":[{"name":"Portfolio","slug":"Portfolio","permalink":"https://sharryhong.github.io/categories/Portfolio/"}]},{"title":"portfolio-선대인경제연구소 사이트","slug":"portfolio-sdi","date":"2016-12-09T06:04:13.000Z","updated":"2016-12-19T06:13:09.362Z","comments":true,"path":"2016/12/09/portfolio-sdi/","link":"","permalink":"https://sharryhong.github.io/2016/12/09/portfolio-sdi/","excerpt":"","text":"Hong’s portfolio - 선대인경제연구소 main 바로가기sub page01 | sub page02-블로그리스트 | sub page03-블로그내용 포트폴리오 개발 기간2015-12 특징 및 기능웹표준, 웹접근성 준수크로스 브라우징 : IE8 이상UI에 초점 사용 SkillHTML, CSS, jQuery, JavaScript, Photoshop 고려사항디비컷 사이트 중 UI, 공부에 도움될 만한 사이트를 선별하여 작업하였습니다.이미지로 되어있는 것을 가능하면 text와 font awesome등으로 만들었습니다. 2016년 12월 현재.. 코드 리펙토링하면 좋을 것들jQuery-UI 라이브러리를 사용한 것을 순수 JavaScript로 개발하면 성능에 더 좋을 것 같습니다.","categories":[{"name":"Portfolio","slug":"Portfolio","permalink":"https://sharryhong.github.io/categories/Portfolio/"}],"tags":[{"name":"CSS","slug":"CSS","permalink":"https://sharryhong.github.io/tags/CSS/"},{"name":"Portfolio","slug":"Portfolio","permalink":"https://sharryhong.github.io/tags/Portfolio/"},{"name":"HTML","slug":"HTML","permalink":"https://sharryhong.github.io/tags/HTML/"},{"name":"JavaScript","slug":"JavaScript","permalink":"https://sharryhong.github.io/tags/JavaScript/"},{"name":"jQuery","slug":"jQuery","permalink":"https://sharryhong.github.io/tags/jQuery/"}],"keywords":[{"name":"Portfolio","slug":"Portfolio","permalink":"https://sharryhong.github.io/categories/Portfolio/"}]},{"title":"portfolio-SK 주식회사 사이트","slug":"portfolio-SK","date":"2016-12-09T05:40:43.000Z","updated":"2016-12-19T06:15:50.012Z","comments":true,"path":"2016/12/09/portfolio-SK/","link":"","permalink":"https://sharryhong.github.io/2016/12/09/portfolio-SK/","excerpt":"","text":"Hong’s portfolio - SK 주식회사 main 바로가기sub page01 | sub page02 | sub page03-게시판리스트 | sub page04-게시판내용 포트폴리오 개발 기간2015-11 특징 및 기능반응형 웹 : 데스크탑, 테블릿, 모바일에 대응하여 적절한 view를 보여줍니다.웹표준, 웹접근성 준수크로스 브라우징 : IE8 이상 사용 SkillHTML, CSS, jQuery, JavaScript, Photoshop 고려사항디자인대로 마크업, 의미있는 마크업을 하기 위해 노력하였습니다.개발단계를 고려하여 예상 가능한 부분을 미리 마크업하였습니다.(예 : 게시판의 제목이 길어질 경우)버튼, 게시판 등은 모듈화하여 재사용성을 높였습니다. 2016년 12월 현재.. 코드 리펙토링하면 좋을 것들반응형을 위한 미디어쿼리를 &lt;head&gt;에서 &lt;link media..&gt;로 설정하였는데, 이럴 경우 성능에 좋지 않는 다는 것을 알게되었습니다.이 부분을 css상에서 @media로 코드 리펙토링 하는 게 좋을 것 같습니다.","categories":[{"name":"Portfolio","slug":"Portfolio","permalink":"https://sharryhong.github.io/categories/Portfolio/"}],"tags":[{"name":"CSS","slug":"CSS","permalink":"https://sharryhong.github.io/tags/CSS/"},{"name":"Portfolio","slug":"Portfolio","permalink":"https://sharryhong.github.io/tags/Portfolio/"},{"name":"HTML","slug":"HTML","permalink":"https://sharryhong.github.io/tags/HTML/"},{"name":"JavaScript","slug":"JavaScript","permalink":"https://sharryhong.github.io/tags/JavaScript/"},{"name":"jQuery","slug":"jQuery","permalink":"https://sharryhong.github.io/tags/jQuery/"}],"keywords":[{"name":"Portfolio","slug":"Portfolio","permalink":"https://sharryhong.github.io/categories/Portfolio/"}]},{"title":"Webpack","slug":"Link-webpack","date":"2016-11-30T14:34:55.000Z","updated":"2016-12-13T03:32:07.358Z","comments":true,"path":"2016/11/30/Link-webpack/","link":"","permalink":"https://sharryhong.github.io/2016/11/30/Link-webpack/","excerpt":"","text":"webpack에 대하여 - 양권성님 블로그webpack 기본 가이드 - HyunSeob님 블로그webpack for Angular+jquery,sass - yamoo9님 github","categories":[{"name":"Bookmark","slug":"Bookmark","permalink":"https://sharryhong.github.io/categories/Bookmark/"}],"tags":[{"name":"Webpack","slug":"Webpack","permalink":"https://sharryhong.github.io/tags/Webpack/"}],"keywords":[{"name":"Bookmark","slug":"Bookmark","permalink":"https://sharryhong.github.io/categories/Bookmark/"}]},{"title":"CSS 속성 선택자를 활용하여 각 파일포맷별 아이콘 설정하기","slug":"css-icons","date":"2016-11-28T06:24:43.000Z","updated":"2016-12-13T03:32:07.374Z","comments":true,"path":"2016/11/28/css-icons/","link":"","permalink":"https://sharryhong.github.io/2016/11/28/css-icons/","excerpt":"","text":"해당 코드가 있는 Github 바로가기 | 결과화면 보기 속성 선택자주로 특수한 상황인 요소를 찾을 때 쓰입니다.[class=&quot;snack&quot;] : classname이 반드시 snack인 요소 선택[class=&quot;snack seeu&quot;] : classname이 반드시 snack seeu인 요소 선택[class*=&quot;snack&quot;] : classname에 snack이 있는 요소 선택[class^=&quot;snack&quot;] : classname이 snack으로 시작하는 요소 선택a[href$=&quot;.docx&quot;] : href 끝나는 값이 .docx인 a요소 선택a[href][title][data-href] : 제시된 3가지 속성을 모두 가지고 있는 a요소 선택 핵심 코드 설명html 파일 123&lt;li class=&quot;lecture-file-item&quot;&gt; &lt;a href=&quot;resources/file.aac&quot;&gt;file-aac&lt;/a&gt;&lt;/li&gt; 다운받을 파일명을 이용하여 background-image를 CSS에 미리 설정해 놓습니다. CSS 파일123456789a[href$=&quot;.aac&quot;] &#123; background-image: url(&quot;../img/icon-aac.png&quot;);&#125;...a[href^=&quot;http://&quot;][target=&quot;_blank&quot;],a[href^=&quot;https://&quot;][target=&quot;_blank&quot;] &#123; background-image: url(&quot;../img/external-link.png&quot;);&#125; ^ 는 처음 값 $ 는 마지막 값 a[href$=&quot;.aac&quot;] : href속성 마지막 값이 .aac인 a요소 선택 연관 링크CSS 선택자에 관한 공부 링크 바로가기","categories":[{"name":"Front-End","slug":"Front-End","permalink":"https://sharryhong.github.io/categories/Front-End/"},{"name":"CSS","slug":"Front-End/CSS","permalink":"https://sharryhong.github.io/categories/Front-End/CSS/"}],"tags":[{"name":"CSS","slug":"CSS","permalink":"https://sharryhong.github.io/tags/CSS/"},{"name":"선택자","slug":"선택자","permalink":"https://sharryhong.github.io/tags/선택자/"},{"name":"파일 포맷","slug":"파일-포맷","permalink":"https://sharryhong.github.io/tags/파일-포맷/"},{"name":"아이콘","slug":"아이콘","permalink":"https://sharryhong.github.io/tags/아이콘/"}],"keywords":[{"name":"Front-End","slug":"Front-End","permalink":"https://sharryhong.github.io/categories/Front-End/"},{"name":"CSS","slug":"Front-End/CSS","permalink":"https://sharryhong.github.io/categories/Front-End/CSS/"}]},{"title":"ReactJS ES6","slug":"Link-ReactJS-ES6","date":"2016-11-28T05:13:41.000Z","updated":"2016-12-13T03:32:07.349Z","comments":true,"path":"2016/11/28/Link-ReactJS-ES6/","link":"","permalink":"https://sharryhong.github.io/2016/11/28/Link-ReactJS-ES6/","excerpt":"","text":"ReactJS를 작성할 때에 알아두면 좋은 ES6 문법들 - 고무곰님의 블로그","categories":[{"name":"Bookmark","slug":"Bookmark","permalink":"https://sharryhong.github.io/categories/Bookmark/"}],"tags":[{"name":"ES6","slug":"ES6","permalink":"https://sharryhong.github.io/tags/ES6/"}],"keywords":[{"name":"Bookmark","slug":"Bookmark","permalink":"https://sharryhong.github.io/categories/Bookmark/"}]},{"title":"JavaScript TabMenu (ES5_prototype class)","slug":"javascript-tabmenu","date":"2016-11-28T04:16:12.000Z","updated":"2016-12-13T03:32:07.460Z","comments":true,"path":"2016/11/28/javascript-tabmenu/","link":"","permalink":"https://sharryhong.github.io/2016/11/28/javascript-tabmenu/","excerpt":"","text":"JavaScript 프로토타입 방식으로 클래스 만들기 실습 - 탭 메뉴 해당 코드가 있는 Github 바로가기 | 결과화면 보기 1234567891011121314151617181920212223242526272829303132333435363738394041424344// 2. 함수 단위 -&gt; 프로토타입 방식 클래스 (function(global, $)&#123;&apos;use strict&apos;;// 인스턴스 생성 var tabTab1 = new TabMenu();var tabTab2 = new TabMenu();// 클래스 생성, 프로퍼티 생성 function TabMenu() &#123; this.$tab = null this.$tabMenus = null; this.$selectMenu = null;&#125;// 메서드 생성, 요소 초기화 TabMenu.prototype.init =function(el)&#123; this.$tab = $(el); this.$tabMenus = this.$tab.find(&apos;li&apos;); console.log(this);&#125;TabMenu.prototype.initEvent = function()&#123; var objThis = this; // 아래에 설명 추가 this.$tabMenus.on(&quot;click&quot;, function()&#123; objThis.setSelectMenu($(this)); &#125;);&#125;TabMenu.prototype.setSelectMenu = function($thisMenu)&#123; if(this.$selectMenu)&#123; this.$selectMenu.removeClass(&apos;select&apos;); &#125; this.$selectMenu = $thisMenu; this.$selectMenu.addClass(&apos;select&apos;);&#125;tabTab1.init(&apos;#tabMenu1&apos;);tabTab1.initEvent();tabTab2.init(&apos;#tabMenu2&apos;);tabTab2.initEvent();&#125;)(this, this.jQuery); this에 대하여클릭(이벤트) 전 this 는 아래처럼 구성되어 있습니다. (크롬 개발자도구)클래스에 프로퍼티와, prototype에 메서드가 정의되어 있는 걸 볼 수 있습니다. 12345678910TabMenu $selectMenu:null $tab:n.fn.init[1] $tabMenus:n.fn.init[6] __proto__: Object // = prototype constructor:TabMenu() init: function(el) initEvent: function() setSelectMenu: function($thisMenu) __proto__: Object 123456TabMenu.prototype.initEvent = function()&#123; var objThis = this; this.$tabMenus.on(&quot;click&quot;, function()&#123; objThis.setSelectMenu($(this)); &#125;);&#125; 위 코드에서 this.$tabMenus.on(&quot;click&quot;,... 클릭을 하면 this가 클릭한 li요소로 되어버립니다.(이벤트에서 this는 이벤트를 발생시킨 객체이기 때문입니다.)따라서 변수 objThis에 본래의 this를 저장하여 objThis.setSelectMenu($(this));로 사용한 것입니다. 연관 링크JavaScript ES5 Class - 관련 링크 바로가기","categories":[{"name":"Front-End","slug":"Front-End","permalink":"https://sharryhong.github.io/categories/Front-End/"},{"name":"JavaScript","slug":"Front-End/JavaScript","permalink":"https://sharryhong.github.io/categories/Front-End/JavaScript/"}],"tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"https://sharryhong.github.io/tags/JavaScript/"},{"name":"Class","slug":"Class","permalink":"https://sharryhong.github.io/tags/Class/"},{"name":"ES5","slug":"ES5","permalink":"https://sharryhong.github.io/tags/ES5/"},{"name":"prototype","slug":"prototype","permalink":"https://sharryhong.github.io/tags/prototype/"},{"name":"TabMenu","slug":"TabMenu","permalink":"https://sharryhong.github.io/tags/TabMenu/"}],"keywords":[{"name":"Front-End","slug":"Front-End","permalink":"https://sharryhong.github.io/categories/Front-End/"},{"name":"JavaScript","slug":"Front-End/JavaScript","permalink":"https://sharryhong.github.io/categories/Front-End/JavaScript/"}]},{"title":"JavaScript Class (ES5)","slug":"javascript-class","date":"2016-11-26T13:18:00.000Z","updated":"2016-12-13T03:32:07.427Z","comments":true,"path":"2016/11/26/javascript-class/","link":"","permalink":"https://sharryhong.github.io/2016/11/26/javascript-class/","excerpt":"","text":"완전정복 스터디 3권(웹동네)으로 공부 + 코드 리펙토링 :)해당 코드가 있는 Github 바로가기 Class함수가 특정 알고리즘을 포장하는 기술이라면, 클래스는 연관있는 변수와 함수만을 포장하는 기술입니다.클래스로 포장하는 이유는 객체 단위로 코드를 그룹화 하고 재사용하기 위함입니다. ES6에서는 class가 생겼지만 아직 이전 버전으로 개발을 많이 하고 있습니다. JavaScript에서 클래스처럼 사용할 수 있는 방법으로는 리터럴 방식 함수 방식 프로토타입 방식이 있는데 프로토타입 방식을 선호합니다.이유는 아래에 설명하겠습니다. 개념인스턴스 객체함수를 사용하려면 함수호출을 해야하듯, 클래스를 사용하려면 일반적으로 인스턴스를 생성해야 합니다.클래스 : 설계도, 인스턴스 : 설계도대로 만들어진 결과물 1var 인스턴스 = new 클래스이름(); 인스턴스가 만들어지면 클래스에서 포장해 놓은 프로퍼티와 메서드를 사용할 수 있게 됩니다. 프로퍼티 (변수)주로 객체 내부에서 사용하는 일반적인 정보, 객체 내부 함수(메서드)에서 처리한 결과값 저장 메서드 (함수)주로 객체의 프로퍼티 값을 변경하거나 알아내는 기능, 클래스의 기능들 생성자인스턴스가 만들어지면서 자동으로 호출되는 함수생성자의 주 용도는 프로퍼티 초기화 역할 담당 리터럴 방식으로 클래스 만들기123456789101112var 인스턴스 = &#123; 프로퍼티: 초기 값 // 프로퍼티 정의 ... 메서드: function() &#123; // 메서드 정의 ... &#125;, ...&#125;// 객체 외부에서 접근하기 인스턴스.프로퍼티;인스턴스.메서드(); 예 :1$(&quot;p&quot;).css(&quot;color&quot;, &quot;#f00&quot;); $인 함수를 매개변수 값 “p”로 호출$()함수에서 jQuery의 인스턴스를 만들어 리턴해주기 때문에 접근연산자 .를 이용해 jQuery가 제공하는 기능 중 css() 를 호출해 글자색을 변경할 수 있습니다. 특징리터럴 방식에서는 생성자가 존재하지 않습니다.리터럴 방식은 클래스를 정의함과 동시에 자동으로 인스턴스가 만들어집니다.단점 : 인스턴스를 하나만 만들 수 있습니다.주 용도 : 여러 개의 데이터를 묶어 값을 보관하거나 함수의 매개변수 값으로 전달할 때 주로 사용합니다. 123456var $ch = $(&quot;#ch&quot;);$ch.css(&#123; &quot;position&quot;: &quot;absolute&quot;, &quot;top&quot;: 100, &quot;left&quot;: 100&#125;); 함수 방식으로 클래스 만들기1234567891011121314// 일반 함수와 비교하기 위해 클래스이름은 대문자로 시작하도록 한다. (일반적인 규칙)function 클래스이름() &#123; this.프로퍼티 = 초기 값; // 프로퍼티 정의 ... this.메서드 = function() &#123; // 메서드 정의 ... &#125; ...&#125;// 인스턴스 생성var 인스턴스 = new 클래스이름(); // 메서드 호출인스턴스.메서드(); 특징생성자 : 클래스이름 자체가 생성자이며 인스턴스가 생성될 때 자동으로 호출됩니다.장점 : 코드 재사용 가능단점 : 인스턴스마다 메서드가 중복해서 생성됩니다. -&gt; 치명적인 단점 프로토타입 방식으로 클래스 만들기클래스를 만드는 방법 중 가장 강력한 방법jQuery도 프로토타입 방식으로 만들어졌다. 1234567891011121314function 클래스이름() &#123; this.프로퍼티 = 초개 값; ...&#125;// 메서드는 prototype이라는 프로퍼티에 정의한다. 클래스이름.prototype.메서드 = function() &#123; ...&#125;// 인스턴스 생성var 인스턴스 = new 클래스이름();// 메서드 호출인스턴스.메서드(); 특징코드 재사용모든 인스턴스는 prototype에 만들어져 있는 메서드를 공유해서 사용합니다.자바스크립트에서는 prototype을 이용해 상속을 구현합니다. 연관 링크JavaScript 프로토타입 방식으로 클래스 만들기 실습 - 탭 메뉴","categories":[{"name":"Front-End","slug":"Front-End","permalink":"https://sharryhong.github.io/categories/Front-End/"},{"name":"JavaScript","slug":"Front-End/JavaScript","permalink":"https://sharryhong.github.io/categories/Front-End/JavaScript/"}],"tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"https://sharryhong.github.io/tags/JavaScript/"},{"name":"Class","slug":"Class","permalink":"https://sharryhong.github.io/tags/Class/"},{"name":"ES5","slug":"ES5","permalink":"https://sharryhong.github.io/tags/ES5/"},{"name":"prototype","slug":"prototype","permalink":"https://sharryhong.github.io/tags/prototype/"}],"keywords":[{"name":"Front-End","slug":"Front-End","permalink":"https://sharryhong.github.io/categories/Front-End/"},{"name":"JavaScript","slug":"Front-End/JavaScript","permalink":"https://sharryhong.github.io/categories/Front-End/JavaScript/"}]},{"title":"SASS Satting","slug":"sass-satting","date":"2016-11-25T10:07:09.000Z","updated":"2016-12-19T06:29:24.502Z","comments":true,"path":"2016/11/25/sass-satting/","link":"","permalink":"https://sharryhong.github.io/2016/11/25/sass-satting/","excerpt":"","text":"해당 코드가 있는 Github 바로가기 CSS Preprocessor 인 SASS. 웹 스타일링을 담당하는 CSS를 좀 더 똘똘하게 사용하고 유지보수를 좋게하는 프리프로세서입니다. 설치 및 Sass to CSSSass to CSS를 위해 node sass를 실행합니다. 추후엔 Gulp같은 자동화툴로 관리하도록 합니다. 다운로드 및 설치git bash : 터미널 방식으로 명령어를 사용하여서 Git를 컨트롤 하는 시스템설치 후 파일탐색기 &gt; 해당폴더 &gt; 마우스 오른쪽 &gt; git bush here 를 클릭하여 터미널을 실행시킵니다. node sass 설치12$ npm install node-sass --global 혹은 $ npm i -g node-sass (install global줄여쓴 것) sass -&gt; css로 sass or scss파일을 만들고 저장 후 1$ node-sass -w sass/ -o css/ --source-map css sass폴더내의 sass or scss 파일을 css폴더내의 css파일로 컴파일한다는 뜻sourcemapping이 있어야 개발자도구에서 style.sass이런식으로 표시가 됩니다. css 폴더내에 xxx.css.map 파일이 생깁니다. 배포시엔 map파일을 제외하고 올립니다. sass파일을 수정 후 저장합니다. 자, 이제 sass -&gt; css파일로 컴파일 되었습니다. 이젠 css파일은 건드리지 않고 sass파일로만 작업합니다. 파일 쪼개고 병합하기예를들어 _footer.sass와 같이 _가 붙으면 병합될 파일이므로 컴파일되지 않습니다.style.sass 에서 @import /part/page/footer 이런 식으로 @import 하여 병합시킵니다.@import시 파일이름의 _, .sass, .scss는 생략할 수 있습니다. Sublime Text에서 sass, scss 파일 인지시키기 Sublime Text의 install package에서 syntax highlighting for sass를 설치합니다. 서브라임 텍스트의 오른쪽 하단에서 sass를 선택합니다. 참고 사이트 Sass-lang.com","categories":[{"name":"Front-End","slug":"Front-End","permalink":"https://sharryhong.github.io/categories/Front-End/"},{"name":"Sass","slug":"Front-End/Sass","permalink":"https://sharryhong.github.io/categories/Front-End/Sass/"}],"tags":[{"name":"CSS","slug":"CSS","permalink":"https://sharryhong.github.io/tags/CSS/"},{"name":"Sass","slug":"Sass","permalink":"https://sharryhong.github.io/tags/Sass/"}],"keywords":[{"name":"Front-End","slug":"Front-End","permalink":"https://sharryhong.github.io/categories/Front-End/"},{"name":"Sass","slug":"Front-End/Sass","permalink":"https://sharryhong.github.io/categories/Front-End/Sass/"}]}]}