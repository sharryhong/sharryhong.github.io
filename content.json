{"meta":{"title":"H-web Blog","subtitle":"Hong's Front-End Blog","description":"Hong's Front-End Blog","author":"HS Hong","url":"https://sharryhong.github.io"},"pages":[{"title":"About Me","date":"2016-11-26T09:28:20.000Z","updated":"2017-01-04T04:19:09.587Z","comments":true,"path":"about/index.html","permalink":"https://sharryhong.github.io/about/index.html","excerpt":"","text":"Hong’s keyword : 호기심, 탐구, 열정, 여행지향점 : 웹표준, 웹접근성 등 기본을 단단히하여 높은 퀄리티의 서비스를 개발하는 Front-End 개발자현재 관심 skill : HTML, CSS, SASS, Javascript, jQuery, AngularJS, Ionic … Computer Science 전공 -&gt; Flash 개발 (게임, 모션, 이러닝) -&gt; 각종 삽질?경험 결과 개발이 적성에 맞다고 더욱 깨달음 ^^ -&gt; 2015년 : 웹퍼블리셔가 되기 위해 열공 당시 블로그 바로가기 -&gt; 2016년 : 그룹웨어 웹퍼블리싱 개발 프리랜서 경험 구조(HTML), 표현(CSS), 동작(JavaScript)을 잘 이해하고 구현해야 퀄리티 있는 결과물이 나온다는 생각으로 집중 공부 중. Github에 공부 내용 정리 -&gt; 현재 : 회사와 개인이 Win Win 하며 성장할 회사를 찾고 있습니다."}],"posts":[{"title":"Photo Gallery - AJAX, JSON data","slug":"project-gallery","date":"2017-01-09T06:33:31.000Z","updated":"2017-01-11T04:33:39.903Z","comments":true,"path":"2017/01/09/project-gallery/","link":"","permalink":"https://sharryhong.github.io/2017/01/09/project-gallery/","excerpt":"","text":"사진 갤러리 : JavaScript, AJAX, JSON, CSS3결과화면 보기해당 소스 보기 Window10의 기본 사진 애플리케이션 기능을 웹버전으로 만들어보는 작은 프로젝트입니다. :) 특징 및 기능1) AJAX로 JSON data 불러오기2) JSON photo개수에 맞는 template 동적 생성3) hover, focus시 CSS3 transform, transition 사용4) 사진 click시 중앙에 확대, 확대시 검정배경 높이만큼 나오기5) 슬라이드 쇼 버튼 클릭시 슬라이드 쇼 재생, 다시 클릭시 멈추는 기능6) 슬라이드 쇼 재생시 사진을 클릭하면 재생이 끝나는 기능 주요 코드1) AJAX로 JSON data 불러오기12345678var xhr = new XMLHttpRequest();xhr.open(&quot;GET&quot;, &quot;./data/gallery.json&quot;);xhr.send();xhr.onreadystatechange = function() &#123; if(this.status === 200 &amp;&amp; this.readyState === 4) &#123; var data = JSON.parse(this.response); var template = &apos;&apos;; var photos = data.results; gallery.json 파일 내부의 results 배열객체 값을 변수 photos에 저장합니다. 2) JSON의 photos 개수만큼 template 동적 생성index.html &lt;ul class=&quot;ajax-result&quot;&gt;&lt;/ul&gt; 내부에1234567891011for(var i=0; i&lt;photos.length; i++)&#123; template += [ &apos;&lt;li&gt;&apos;, &apos;&lt;a href=&quot;javascript:;&quot; class=&quot;photo-link&quot;&gt;&apos;, &apos;&lt;img class=&quot;photo-img&quot; src=&quot;&apos;+photos[i].image+&apos;&quot; alt=&quot;&apos;+photos[i].alt+&apos;&quot;&gt;&apos;, &apos;&lt;/a&gt;&apos;, &apos;&lt;/li&gt;&apos; ].join(&apos;&apos;);&#125;result_view.innerHTML = template; 처음에 저장했던 photos 변수에 담긴 JSON data의 갯수만큼 template을 생성하여 뿌려줍니다. 3) CSS3 transform, transition, animation12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152// transition을 주어 애니메이션 효과를 냅니다. .photo-link&#123; position: static; display: inline-block; overflow: hidden; transition: .3s all ease-in-out;&#125;.photo-img&#123; display: inline-block; vertical-align: middle; transition: .5s all ease-in-out; /* vendorless fallback */ -o-transition: .5s all ease-in-out; /* opera */ -ms-transition: .5s all ease-in-out; /* IE 10 */ -moz-transition: .5s all ease-in-out; /* Firefox */ -webkit-transition: .5s all ease-in-out; /*safari and chrome */&#125;// 사진 hover, focus시 약간 확대됩니다. .photo-link:hover .photo-img,.photo-link:focus .photo-img &#123; transform: scale(1.1);&#125;// 사진 클릭시 JavaScript에서 class=&quot;on&quot;이 추가되어 아래 style이 적용됩니다. .photo-link.on&#123; position: absolute; z-index: 90; top: 0; left: 0; width: 100%; height: inherit; animation: ani-opacity 1s;&#125;.photo-link.on .photo-img&#123; width: 100%; height: 100%;&#125;// CSS Animation@keyframes ani-opacity &#123; 0% &#123; opacity: 0; &#125; 100% &#123; opacity: 1; &#125;&#125;// 클릭된 사진을 제외한 사진은 안보이게 하는 class=&quot;off&quot; style입니다. .photo-link.off&#123; display:none;&#125; 4) 사진 click시 중앙에 확대, 확대시 검정배경 높이만큼 나오기검정배경에 관한 코드123456789101112131415161718192021// 검정배경 Div요소 만들기 var photoGallery = document.querySelector(&apos;.photo-gallery&apos;).firstElementChild;var menuCoverDiv = document.createElement(&apos;div&apos;);menuCoverDiv.setAttribute(&apos;class&apos;, &apos;menu-cover&apos;);// 검정 배경 나오게 하기 function menuCover(el) &#123; // 목표노드.부모노드.insertBefore(insert삽입할노드, target목표노드) photoGallery.parentNode.insertBefore(menuCoverDiv, photoGallery); // 확대된 사진의 height var photoHeight = el.offsetHeight; // 사진크기와 브라우저크기를 비교하여 검정 배경 height 정하기 if((windowHeight-90) &gt; photoHeight)&#123; menuCoverDiv.style.height = (windowHeight-10)+&apos;px&apos;; &#125;else&#123; menuCoverDiv.style.height = (photoHeight+30)+&apos;px&apos;; &#125;&#125;// 검정 배경 없애기 function removeMenuCover() &#123; photoGallery.parentNode.removeChild(menuCoverDiv);&#125; 사진 클릭시 확대되는 코드123456789101112131415161718192021222324252627282930// 각 사진 클릭시 photoShow 함수 실행 function photoAddEvent() &#123; for(var i=0; i&lt;photoLink.length; i++)&#123; photoLink[i].addEventListener(&quot;click&quot;, photoShow, false); &#125;&#125;// 사진 클릭시 커지는 함수 function photoShow() &#123; console.log(&quot;photoShow함수실행&quot;); // 현재 사진 index = photoLink.indexOf(this); // 현재 사진 제외하고 안보이게 처리 for(var j=0; j&lt;photoLink.length; j++)&#123; if( j !== index ) &#123; photoLink[j].classList.toggle(&quot;off&quot;); &#125; &#125; // 현재 사진 확대 this.classList.toggle(&quot;on&quot;); if(!photoClick)&#123; menuCover(this); photoClick = !photoClick; console.log(&apos;사진 클릭&apos;); &#125;else&#123; removeMenuCover(); photoClick = !photoClick; index = 0; console.log(&apos;사진 클릭해제&apos;); &#125;&#125; 5) 슬라이드 쇼 버튼 클릭시 슬라이드 쇼 재생, 다시 클릭시 멈추는 기능6) 슬라이드 쇼 재생시 사진을 클릭하면 재생이 끝나는 기능1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374// 슬라이드 쇼를 멈추고 사진들이 원래대로 돌아오게 하는 함수 function stopSlideShow(e)&#123; console.log(&quot;stopSlideShow함수실행&quot;); // 슬라이드 버튼이 눌러졌다면 if(chkBtn || PauseBtnOn)&#123; photoLink[index].classList.remove(&quot;on&quot;); &#125;else&#123; photoLink[index-1].classList.remove(&quot;on&quot;); &#125; index = 0; clearInterval(slideInterval); photoAddEvent(); removeMenuCover(); slideBtn.classList.remove(&quot;pause-interval&quot;); slideBtn.classList.remove(&quot;on&quot;); for(var j=0; j&lt;photoLink.length; j++)&#123; photoLink[j].classList.remove(&quot;off&quot;); &#125; chkBtn = false; PauseBtnOn = false; photoClick = false; removeStopSlideShow();&#125;// stopSlideShow함수 removeEventfunction removeStopSlideShow()&#123; for(var j=0; j&lt;photoLink.length; j++)&#123; photoLink[j].removeEventListener(&quot;click&quot;, stopSlideShow, false); &#125;&#125;// 슬라이드 쇼 함수function slideShow() &#123; for(var j=0; j&lt;photoLink.length; j++)&#123; // 슬라이드 쇼 함수 진행 중 확대된 사진을 클릭하면 슬라이드 쇼 멈추기 photoLink[j].addEventListener(&quot;click&quot;, stopSlideShow, false); if( j !== index ) &#123; photoLink[j].classList.add(&quot;off&quot;); &#125; &#125; photoLink[index].classList.add(&quot;on&quot;); menuCover(photoLink[index]); global.slideInterval = setInterval(function()&#123; index++; if(index &lt; photoLink.length)&#123; photoLink[index-1].classList.remove(&quot;on&quot;); photoLink[index-1].classList.add(&quot;off&quot;); photoLink[index].classList.remove(&quot;off&quot;); photoLink[index].classList.add(&quot;on&quot;); menuCover(photoLink[index]); console.log(index); &#125;else &#123; // 슬라이드 쇼 끝난 후 chkBtn = false; PauseBtnOn = false; photoClick = false; stopSlideShow(); &#125; &#125;, 2000);&#125;// 슬라이드 버튼 클릭시 slideBtn.onclick = function()&#123; // 슬라이드 재생 if(!chkBtn)&#123; slideShow(); photoRemoveEvent(); slideBtn.classList.remove(&quot;pause-interval&quot;); slideBtn.classList.add(&quot;on&quot;); chkBtn = true; &#125;else&#123; // 슬라이드 멈춤 clearInterval(global.slideInterval); slideBtn.classList.remove(&quot;on&quot;); slideBtn.classList.add(&quot;pause-interval&quot;); chkBtn = false; PauseBtnOn = true; &#125;&#125;","categories":[{"name":"Portfolio","slug":"Portfolio","permalink":"https://sharryhong.github.io/categories/Portfolio/"},{"name":"Free Project","slug":"Portfolio/Free-Project","permalink":"https://sharryhong.github.io/categories/Portfolio/Free-Project/"}],"tags":[{"name":"AJAX","slug":"AJAX","permalink":"https://sharryhong.github.io/tags/AJAX/"},{"name":"JSON","slug":"JSON","permalink":"https://sharryhong.github.io/tags/JSON/"},{"name":"Gallery","slug":"Gallery","permalink":"https://sharryhong.github.io/tags/Gallery/"}],"keywords":[{"name":"Portfolio","slug":"Portfolio","permalink":"https://sharryhong.github.io/categories/Portfolio/"},{"name":"Free Project","slug":"Portfolio/Free-Project","permalink":"https://sharryhong.github.io/categories/Portfolio/Free-Project/"}]},{"title":"JavaScript - Web API - Element","slug":"javascript-webAPI-Element","date":"2017-01-07T06:10:20.000Z","updated":"2017-01-07T06:23:49.137Z","comments":true,"path":"2017/01/07/javascript-webAPI-Element/","link":"","permalink":"https://sharryhong.github.io/2017/01/07/javascript-webAPI-Element/","excerpt":"","text":"Free Project를 진행하면서 자주 사용하는 Element Web API를 계속 추가할 예정입니다. :) element.classList요소의 class속성 목록을 반환합니다. 브라우저 호환 : IE10이상add : 요소의 클래스 목록에 클래스 추가remove : 요소의 클래스 목록에서 클래스 삭제toggle : 요소의 클래스 목록에서 특정 클래스 전환contains : 요소의 클래스 목록이 특정 클래스를 포함 여부 확인 관련 My 포스팅JavaScript DOM 참고 자료Web APIs Element - MDN","categories":[{"name":"Front-End","slug":"Front-End","permalink":"https://sharryhong.github.io/categories/Front-End/"},{"name":"JavaScript","slug":"Front-End/JavaScript","permalink":"https://sharryhong.github.io/categories/Front-End/JavaScript/"}],"tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"https://sharryhong.github.io/tags/JavaScript/"},{"name":"DOM","slug":"DOM","permalink":"https://sharryhong.github.io/tags/DOM/"},{"name":"Web API - Element","slug":"Web-API-Element","permalink":"https://sharryhong.github.io/tags/Web-API-Element/"}],"keywords":[{"name":"Front-End","slug":"Front-End","permalink":"https://sharryhong.github.io/categories/Front-End/"},{"name":"JavaScript","slug":"Front-End/JavaScript","permalink":"https://sharryhong.github.io/categories/Front-End/JavaScript/"}]},{"title":"JavaScript Array(배열)","slug":"javascript-array","date":"2017-01-07T05:22:51.000Z","updated":"2017-01-07T13:41:03.525Z","comments":true,"path":"2017/01/07/javascript-array/","link":"","permalink":"https://sharryhong.github.io/2017/01/07/javascript-array/","excerpt":"","text":"Free Project를 진행하면서 자주 사용하는 프로퍼티, 메소드 등을 계속 추가할 예정입니다. :) 목차length 프로퍼티indexOf 메서드 length 프로퍼티배열의 원소 개수를 나타냅니다. 만약에 배열 index에 임의대로 값을 저장하면 length는 가장 큰 index를 기준으로 정해집니다.123456var arr = []; // 변수 배열로 초기화console.log(arr.length); // 0arr = [2,1,2]; // arr.length = 3arr[100] = 5; console.log(arr.length); // 101 DOM 요소 개수만큼 class name 추가하기해당 Free Project 바로가기 1234567891011121314151617181920// class=&quot;photo-link&quot;인 요소들을 모두 선택합니다.// 이 때 변수 photoLink에 요소들이 유사배열로 저장됩니다. var photoLink = document.querySelectorAll(&apos;.photo-link&apos;);for(var i=0; i&lt;photoLink.length; i++)&#123; photoLink[i].onclick = function() &#123; // 클릭한 요소가 몇번째 index에 있는가 var idx = photoLink.indexOf(this); for(var j=0; j&lt;photoLink.length; j++)&#123; // 클릭한 요소가 아닌 모든 요소 선택 if( j !== idx ) &#123; photoLink[j].classList.toggle(&quot;off&quot;); &#125; &#125; // 클릭한 요소에 class name 토글(add, remove) this.classList.toggle(&quot;on&quot;); &#125;&#125; (목차로 돌아가기) indexOf 메서드배열에서 지정된 요소를 찾을 수있는 첫 번째 인덱스를 반환하고 존재하지 않으면 -1을 반환합니다. 참고 자료Array - MDN인사이드 자바스크립트 - 한빛미디어","categories":[{"name":"Front-End","slug":"Front-End","permalink":"https://sharryhong.github.io/categories/Front-End/"},{"name":"JavaScript","slug":"Front-End/JavaScript","permalink":"https://sharryhong.github.io/categories/Front-End/JavaScript/"}],"tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"https://sharryhong.github.io/tags/JavaScript/"},{"name":"Array","slug":"Array","permalink":"https://sharryhong.github.io/tags/Array/"}],"keywords":[{"name":"Front-End","slug":"Front-End","permalink":"https://sharryhong.github.io/categories/Front-End/"},{"name":"JavaScript","slug":"Front-End/JavaScript","permalink":"https://sharryhong.github.io/categories/Front-End/JavaScript/"}]},{"title":"CSS3 Hover Effect Transition, Transform, Animation","slug":"link-css3","date":"2017-01-06T12:31:55.000Z","updated":"2017-01-06T13:28:55.853Z","comments":true,"path":"2017/01/06/link-css3/","link":"","permalink":"https://sharryhong.github.io/2017/01/06/link-css3/","excerpt":"","text":"CSS3 효과 모음 사이트 CSS3 Transition, Transform, Animation 효과를 직관적으로 보여주는 사이트입니다.재미있고 쉽게 익힐 수 있습니다. ^^","categories":[{"name":"Bookmark","slug":"Bookmark","permalink":"https://sharryhong.github.io/categories/Bookmark/"}],"tags":[{"name":"CSS3","slug":"CSS3","permalink":"https://sharryhong.github.io/tags/CSS3/"}],"keywords":[{"name":"Bookmark","slug":"Bookmark","permalink":"https://sharryhong.github.io/categories/Bookmark/"}]},{"title":"Movie 박스오피스 - AJAX, Movie API","slug":"project-ajax-movieapi","date":"2016-12-30T16:12:57.000Z","updated":"2017-01-04T13:55:50.683Z","comments":true,"path":"2016/12/31/project-ajax-movieapi/","link":"","permalink":"https://sharryhong.github.io/2016/12/31/project-ajax-movieapi/","excerpt":"","text":"결과화면 보기 박스오피스 사이트 : AJAX 통신, Movie API 사용 2017-01-04 코드 리펙토링 : 익스플로러(IE)에서는 for of문이 인식되지 않아 일반 for문으로 처리하였습니다. 하단에 설명 추가 특징 및 기능1) 영화진흥위원회가 제공하는 영화 API사용: 로컬 서버에서는 구현이 잘 되고 있으나 github의 gh-pages에서는 API data가 불러와 지지 않습니다. 그래서 2016-12-19일 기준으로 JSON파일을 만들어 연결하였습니다. 2) AJAX 비동기 통신 사용 3) template 동적 생성 4) 랭킹 1~3위는 빨강배경, 4~10위는 회색배경 적용 5) 순위 변경 data가 0 일땐 녹색 - 표시, 순위 상승시 빨강 화살표, 순위 하락시 data 중 마이너스 삭제하고 파랑 화살표 표시 추가 예정 : 영화 상세 페이지디자인 : CGV사이트 참고영화 포스터 : API에서 제공하지 않아 못 넣었습니다. 아쉽네요 ㅜㅜ 코드 설명1) AJAX관련 코드 : 자세한 설명은 여기에서 123var xhr = new XMLHttpRequest();xhr.open(&apos;GET&apos;, &quot;http://www.kobis.or.kr/kobisopenapi/webservice/rest/boxoffice/searchDailyBoxOfficeList.json?key=발급받은키&amp;targetDt=&quot;+ today);xhr.send(); 제공하는 영화 API URL 맨 뒤에는 알고싶은 날짜를 적으면 됩니다. 저는 Date() 클래스를 사용하여 하루 전 날짜를 넣어주었습니다. (당일 날짜는 안되더군요.) 2) 하루 전 날짜 구하기 1234567var d = new Date();var yy = d.getFullYear();var mm = d.getMonth() + 1;var dd = d.getDate() - 1;// var today = yy + &quot;&quot; + &quot;&quot; + mm + &quot;&quot; + dd;// 혹은var today = `$&#123;yy&#125;$&#123;mm&#125;$&#123;dd&#125;`; Date() 클래스의 인스턴스 dd.getMonth() 리턴값은 0(1월) ~ 11(12월) 3) 랭킹 1~3위는 빨강배경, 4~10위는 회색배경 적용 123456var rank_array = document.querySelectorAll(&apos;.rank&apos;);var gray_array = Array.prototype.slice.apply(rank_array);var gray_rank = gray_array.slice(3);for(var i=0; i&lt;gray_rank.length; i++)&#123; gray_rank[i].classList.add(&apos;gray&apos;);&#125; &lt;strong class=&quot;rank&quot;&gt;&#39;+&#39;No.&#39;+movie.rank+&#39;&lt;/strong&gt;&#39; 전체를 유사배열로 받아옵니다.이 것을 Array.prototype.slice.apply(rank_array);로 실제 배열처럼 사용할 수 있게 합니다..slice(3)은 네번째 배열값부터 끝까지 적용한다는 뜻입니다.즉, 이 코드는 class=&quot;rank&quot;를 가진 전체 요소 중에 네번째 배열값부터 끝까지 class=”gray”를 추가시킨다. 는 것인데 css상에는 아래처럼 되어있어 자동으로 회색배경이 적용됩니다.123.movie-contents .rank.gray&#123; background: #555;&#125; 전체 코드1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586(function(global, XHR)&#123; &apos;use strict&apos;; var createXHR = (function() &#123; XHR = XHR || ActiveXObject(&apos;Microsoft.XMLHTTP&apos;); return function() &#123; return new XHR; &#125;; &#125;)(); var xhr = createXHR(); var result_view = document.querySelector(&apos;.ajax-result&apos;); //오늘 날짜 var d = new Date(); var yy = d.getFullYear(); var mm = d.getMonth() + 1; var dd = d.getDate() - 1; var today = `$&#123;yy&#125;$&#123;mm&#125;$&#123;dd&#125;`; xhr.open(&apos;GET&apos;, &quot;http://www.kobis.or.kr/kobisopenapi/webservice/rest/boxoffice/searchDailyBoxOfficeList.json?key=발급받은키&amp;targetDt=&quot;+ today); xhr.send(); xhr.onreadystatechange = function() &#123; if ( this.status === 200 &amp;&amp; this.readyState === 4 ) &#123; console.log(&apos;통신 데이터 전송 성공! ^^&apos;); // console.log(this.response); // text file var getmovies = this.response; var template = &apos;&apos;; // text -&gt; object getmovies = JSON.parse(getmovies); // json파일내에 있는 속성 results var movies = getmovies.boxOfficeResult.dailyBoxOfficeList; // movies 반복 순환 처리 for(var movie of movies) &#123; template += [ &apos;&lt;li class=&quot;movie-contents&quot;&gt;&apos;, &apos;&lt;strong class=&quot;rank&quot;&gt;&apos;+&apos;No.&apos;+movie.rank+&apos;&lt;/strong&gt;&apos;, &apos;&lt;h3 class=&quot;name&quot;&gt;&apos;+movie.movieNm+&apos;&lt;/h3&gt;&apos;, &apos;&lt;p class=&quot;opendt small&quot;&gt;&apos;+&apos;개봉일 : &apos;+&apos;&lt;span&gt;&apos;+movie.openDt+&apos;&lt;/span&gt;&apos;+&apos;&lt;/p&gt;&apos;, &apos;&lt;p class=&quot;audiacc small&quot;&gt;&apos;+&apos;누적 관객 수 : &apos;+&apos;&lt;span&gt;&apos;+movie.audiAcc+&apos;&lt;/span&gt;&apos;+&apos;명&apos;+&apos;&lt;/p&gt;&apos;, &apos;&lt;p class=&quot;rankinten small&quot;&gt;&apos;+&apos;순위 변화 : &apos;+&apos;&lt;span class=&quot;rank-change&quot;&gt;&apos;+movie.rankInten+&apos;&lt;/span&gt;&apos;+&apos;&lt;/p&gt;&apos;, &apos;&lt;/li&gt;&apos; ].join(&apos;&apos;); &#125; &#125; else &#123; console.log(&apos;통신 데이터 전송 실패&apos;); &#125; result_view.innerHTML = template; // 랭킹 4위부터 회색배경 var rank_array = document.querySelectorAll(&apos;.rank&apos;); var gray_array = Array.prototype.slice.apply(rank_array); var gray_rank = gray_array.slice(3); for(var i=0; i&lt;gray_rank.length; i++)&#123; gray_rank[i].classList.add(&apos;gray&apos;); &#125; // 순위변경 표시하기 var rankinten_array = document.querySelectorAll(&apos;.rank-change&apos;); for(var a=0; a&lt;rankinten_array.length; a++)&#123; var rankinten_el = rankinten_array[a]; var rankinten_el_first = rankinten_el.firstChild; // console.log(rankinten_el_first.nodeValue); // 순위변경이 없다면 숫자 0을 없애고 css에 적용한 zero클래스 붙이기 if(rankinten_el_first.nodeValue == 0)&#123; rankinten_el_first.nodeValue = &apos;&apos;; rankinten_el.classList.add(&apos;zero&apos;); &#125; // 순위가 올랐다면 css에 적용한 up클래스 붙이기 else if(rankinten_el_first.nodeValue &gt; 0)&#123; rankinten_el.classList.add(&apos;up&apos;); &#125; // 순위가 내려갔다면 css에 적용한 down클래스 붙이기, 마이너스 없애기 else if(rankinten_el_first.nodeValue &lt; 0)&#123; // console.log(rankinten_el_first.nodeValue[0]); var el_value = rankinten_el_first.nodeValue; var result = el_value.slice(1)+el_value.slice(2, el_value.length); // console.log(result); rankinten_el_first.nodeValue = result; rankinten_el.classList.add(&apos;down&apos;); &#125; &#125; &#125;&#125;)(this, this.XMLHttpRequest); IE에서 작동되지 않는 문제점 발견크롬에서 작업하고 크로스브라우징을 위해 모바일과 IE, 엣지에서 확인해보니 IE에서는 실행이 되지 않았습니다.여러가지 분석 결과 for of문이 인식되지 않는 것을 알았고, json data 객체를 불러들이기 위해 for of문 대신 일반 for문을 사용하였습니다. 코드 리펙토링 부분1234567891011for(var i=0; i&lt;movies.length; i++) &#123; template += [ &apos;&lt;li class=&quot;movie-contents&quot;&gt;&apos;, &apos;&lt;strong class=&quot;rank&quot;&gt;&apos;+&apos;No.&apos;+movies[i].rank+&apos;&lt;/strong&gt;&apos;, &apos;&lt;h3 class=&quot;name&quot;&gt;&apos;+movies[i].movieNm+&apos;&lt;/h3&gt;&apos;, &apos;&lt;p class=&quot;opendt small&quot;&gt;&apos;+&apos;개봉일 : &apos;+&apos;&lt;span&gt;&apos;+movies[i].openDt+&apos;&lt;/span&gt;&apos;+&apos;&lt;/p&gt;&apos;, &apos;&lt;p class=&quot;audiacc small&quot;&gt;&apos;+&apos;누적 관객 수 : &apos;+&apos;&lt;span&gt;&apos;+movies[i].audiAcc+&apos;&lt;/span&gt;&apos;+&apos;명&apos;+&apos;&lt;/p&gt;&apos;, &apos;&lt;p class=&quot;rankinten small&quot;&gt;&apos;+&apos;순위 변화 : &apos;+&apos;&lt;span class=&quot;rank-change&quot;&gt;&apos;+movies[i].rankInten+&apos;&lt;/span&gt;&apos;+&apos;&lt;/p&gt;&apos;, &apos;&lt;/li&gt;&apos; ].join(&apos;&apos;);&#125; 연관 링크영화진흥위원회 API","categories":[{"name":"Portfolio","slug":"Portfolio","permalink":"https://sharryhong.github.io/categories/Portfolio/"},{"name":"Free Project","slug":"Portfolio/Free-Project","permalink":"https://sharryhong.github.io/categories/Portfolio/Free-Project/"}],"tags":[{"name":"AJAX","slug":"AJAX","permalink":"https://sharryhong.github.io/tags/AJAX/"},{"name":"JSON","slug":"JSON","permalink":"https://sharryhong.github.io/tags/JSON/"},{"name":"영화 API","slug":"영화-API","permalink":"https://sharryhong.github.io/tags/영화-API/"}],"keywords":[{"name":"Portfolio","slug":"Portfolio","permalink":"https://sharryhong.github.io/categories/Portfolio/"},{"name":"Free Project","slug":"Portfolio/Free-Project","permalink":"https://sharryhong.github.io/categories/Portfolio/Free-Project/"}]},{"title":"Networking - AJAX 비동기 통신 기술","slug":"javascript-ajax","date":"2016-12-29T09:31:02.000Z","updated":"2016-12-30T05:09:22.476Z","comments":true,"path":"2016/12/29/javascript-ajax/","link":"","permalink":"https://sharryhong.github.io/2016/12/29/javascript-ajax/","excerpt":"","text":"AJAX(Asynchronous Javascript And XML) 개념Javascript가 XML을 만나면서 비동기 통신을 한다. -&gt; 요새는 XML보다는 JSON으로 하지만 이름은 그대로 사용하고 있다고 하네요. ^^XML은 자유롭게 마음대로 정할 수 있지만 무겁고 구조화가 어렵다는 단점이 있습니다. 이를 해결하기위해 JSON 등장! 비동기 통신 : view가 update하는 동안에도(data 변경 등) 사용자는 다른 일을 할 수 있습니다. 자바스크립트 객체가 특정 데이터(업데이트 등을 할 데이터)를 서버에 주고받고 하여 그 부분만 업데이트합니다.필요한 부분만 별도로 요청, 응답받아 처리합니다. 모든데이터를 업데이트할 필요없어 불필요한 대역폭 감소가 가능하고 비용절감을 가져옵니다. 장점 : 사용자에게 더 나은 사용 경험 제공. 속도, 비용 절감단점 : 접근성에는 열악합니다. -&gt; 해결하기 위해 등장 : WAI-ARIA AJAX 기술브라우저에서 페이지를 이동하지 않고 자바스크립트를 통해 HTTP Request를 보내고 받아 JS에서 처리할 수 있습니다. 서버 설치 : $ npm install http-server -g로컬 서버 연결 : $ http-server -o -a localhost -p 8081: http://localhost:8081로 자동으로 띄워줍니다. 1) create. XHR(XML Http Request)AJAX 통신을 하기 위한 생성자를 통해 객체를 만듭니다. 여러개를 만들어 동시다발적으로 수행시킬 수 있습니다.1var xhr = new XMLHttpRequest(); 2) open 메소드 : setting 구간. 요청의 방식과 url설정1xhr.open(&apos;GET&apos;, &apos;data/data.json&apos;); 3) send 메소드 : 요청 전송. 통신 시작1xhr.send(); 응답확인 : xhr.response 콘솔창에 쳐보면 data.json 데이터를 볼 수 있습니다. XMLHttpRequest에서 http요청을 보냈을 때 발생하는 이벤트의 종류readyState 속성AJAX 요청에 따라 0~4까지 변화0 : open 메소드 호출 전1 : open 메소드 호출 후2 : 보낸 요청에 대해 응답 헤더가 수신된 후3 : 응답의 바디 부분이 수신중일 때4 : 모든 응답이 수신되었을 때 status 속성HTTP response의 응답 헤더에 기록된 코드200 : OK. 정상적으로 data를 보냄404 : Not Found500 : Internal Error onreadystatechange 속성readyState가 변할 때마다 호출되는 콜백 함수 123456789var xhr = new XMLHttpRequest();xhr.onreadystatechange = function a() &#123; console.log(this.readyState, this.status); if(this.readyState == 4 &amp;&amp; this.status == 200) &#123; console.log(this.response); &#125;&#125;xhr.open(&apos;GET&apos;, &apos;./data.txt&apos;);xhr.send(); JSON (JavaScript Object Notation)AJAX 형태로 받은 문자를 객체로, 객체를 문자로 바꿀 수 있는 능력을 가지고 있습니다.자바스크립트 객체를 문자열로 표현하므로 프로그램간에 전달하기 편리합니다.서버에서 보낼 데이터를 JSON형태로 브라우저로 전송데이터를 수신한 브라우저는 자바스크립트를 통해 데이터를 파싱하고 문서에 반영합니다. JSON APIJSON.stringify(object) 메소드 : 인자로 받은 객체를 JSON 문자열로 반환JSON.parse(string) 메소드 : 인자로 받은 문자열을 Javascript Object로 변경하여 반환※ undefined, function 은 변환되지 않습니다. 참고 자료helloworld - 자바스크립트와 웹 프론트엔드My Github 링크","categories":[{"name":"Front-End","slug":"Front-End","permalink":"https://sharryhong.github.io/categories/Front-End/"},{"name":"JavaScript","slug":"Front-End/JavaScript","permalink":"https://sharryhong.github.io/categories/Front-End/JavaScript/"}],"tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"https://sharryhong.github.io/tags/JavaScript/"},{"name":"AJAX","slug":"AJAX","permalink":"https://sharryhong.github.io/tags/AJAX/"},{"name":"JSON","slug":"JSON","permalink":"https://sharryhong.github.io/tags/JSON/"}],"keywords":[{"name":"Front-End","slug":"Front-End","permalink":"https://sharryhong.github.io/categories/Front-End/"},{"name":"JavaScript","slug":"Front-End/JavaScript","permalink":"https://sharryhong.github.io/categories/Front-End/JavaScript/"}]},{"title":"JavaScript DOM","slug":"javascript-dom","date":"2016-12-28T13:18:11.000Z","updated":"2016-12-29T09:10:25.347Z","comments":true,"path":"2016/12/28/javascript-dom/","link":"","permalink":"https://sharryhong.github.io/2016/12/28/javascript-dom/","excerpt":"","text":"JavaScript를 배운다는 건…core(문법), core library(기본 제공 함수 등), BOM, DOM이 중 DOM에 대해 정리해보겠습니다. DOM(Document Object Model)노드, 스타일, 속성, 이벤트, 위치 및 크기 등을 다룰 수 있는 다양한 기능이 포함되어 있습니다.※ 노드 : HTML 웹페이지 구성요소의 가장 작은 단위로써 요소, 주석, 텍스트 등이 모두 노드에 해당합니다. DOM과 HTML페이지의 관계 HTML페이지 로딩-&gt; 2. 파싱(Parsing)을 거쳐 작성된 마크업 요소와 1:1로 매칭되는 DOM객체 생성(DOM Tree)예를들어, 파싱단계에서 &lt;div&gt;를 만나면 HTMLDivElement라는 클래스의 인스턴스(객체)를 생성하게 됩니다.-&gt; 3. 브라우저 화면에 출력 핵심 DOM 객체Node : 노드를 다루는 기본 기능과 프로퍼티 제공. 노드를 탐색, 조작※ 노드에는 Element node(요소), Text node(텍스트, 빈칸포함), 주석 노드 등도 모두 포함Document : text node, element node, attribute node 생성Element : 요소의 기본 기능과 프로퍼티 제공. 속성과 이벤트 제어Text : 텍스트를 다루는 기능Attribute : 속성을 다루는 기능HTMLDocument : Document객체를 확장하여 HTML용 프로퍼티와 메서드를 추가한 객체HTMLElement : HTML요소의 기본 기능과 프로퍼티 제공. id, className, style등이 존재 DOM객체 Node 상속구조 Node 기능 노드 탐색, 조작하는 프로퍼티와 메서드 주요 프로퍼티 node.parentNode 부모노드 탐색node.childNodes 자식노드들 탐색node.firstChild 첫번째 자식노드 탐색node.lastChild 마지막 자식노드 탐색node.previousSibling 이전 형제노드 탐색node.nextSibling다음 형제노드 탐색node.children 그 안의 요소만 가져옴. 빈칸은 textnode인데 가져오지 않으므로 편리하다. node.nodeName요소의 이름을 대문자로 반환node.nodeType 요소노드는 1, 텍스트노드 3, 주석노드 8node.nodeValue 텍스트노드에만 접근 가능. 텍스트 노드의 실제 값 반환. 요소노드의 경우는 null 반환node.hasChildNodes() 자식이 있으면 true, 없으면 false※ 아래는 IE8이하는 안되나 요소만 찾아줌 node.parentElement 부모요소 탐색 node.firstElementChild 첫 자식요소 노드 탐색 node.lastElementChild 마지막 자식 요소 노드 탐색 node.previousElementSibling 이전 형제요소 탐색 node.nextElementSibling 다음 형제요소 탐색 주요 메서드 node.hasChildNodes() true/false 반환node.hasChildNodes() true/false 반환node.cloneNode(boolean) false가 기본값. true면 자식까지 복제부모노드.appendChild(자식노드) 부모의 꽁지쪽에 붙이기목표노드.부모노드.insertBefore(insert삽입할노드, target목표노드) node.removeChild(childnode)target_node.parentNode.replaceChild(replace_node, target_node) 노드 교체. 위치를 교체하는 것이 아니라, 이전 노드를 삭제 한다.이전 노드를 삭제하지만 결과 값으로 반환된다. 사용 예 var el = document.getElementById(&#39;div-01&#39;).nextSibling; DOM객체 Document 상속구조 Node &gt; Document 기능 Text node, Element node 생성 주요 프로퍼티 주요 메서드 document.createElement(&#39;element&#39;) 요소 만들기. 실제 DOM에 붙는건 아님 document.createTextNode(&#39;text&#39;) 텍스트 노드 만들기 document.createAttribute(&quot;name&quot;); 잘쓰지않음document.getElementById(&quot;idname&quot;); id로 대상(요소노드)을 선택 document.getElementsByTagName(&quot;p&quot;); 요소명으로 선택document.getElementsByClassName(&#39;classname&#39;); 클래스명으로 선택document.querySelector(css selector);막강!!! IE8이상. 첫번째 하나만 반환document.querySelectorAll(css selector); 상동. 전체 복수로 반환createEvent()target.addEventListener(type, listener[, options]);dispatchEvent()removeListener() DOM객체 HTMLDocument 상속구조 Node &gt; Document &gt; HTMLDocument 기능 HTML문서 전용 프로퍼티, 메서드 주요 프로퍼티 주요 메서드 close()open()write()Element[]getElementByName() DOM객체 Element 상속구조 Node &gt; Element 기능 속성을 다루는 기능, 이벤트 주요 프로퍼티 tagName 요소의 이름반환. 예전방식 주요 메서드 Element[]ElementsByTagName()element.hasAttribute(attName); true/false 반환element.getAttribute(attributeName);element.removeAttribute(attrName);element.setAttribute(name, value);target.addEventListener(type, listener[, options]);dispatchEvent()removeListener() 사용 예 var parent_el = document.getElementById(&#39;parent&#39;); console.log(&#39;data-con:&#39;, parent_el.getAttribute(&#39;data-con&#39;)); DOM객체 HTMLElement 상속구조 Node &gt; Element &gt; HTMLElement 기능 HTML요소 전용 프로퍼티, 메서드 주요 프로퍼티 element.idelement.classNameelement.innerHTML = content;노드 동적생성을 쉽게해줌element.style.color = &quot;blue&quot;;element.offsetWidth border까지의 widthelement.offsetHeight border까지의 heightelement.offsetLeftelement.offsetTop 주요 메서드 onkeydownonkeypressonkeyuponclickondbclickonmousedownonmousemoveonmouseoutonmouseoveronmouseup 사용 예 var parent_el = document.getElementById(&#39;parent&#39;);console.log(&#39;id:&#39;, parent_el.id);console.log(&#39;class:&#39;, parent_el.className);console.log(&#39;title:&#39;, parent_el.title); 참고 자료DOM - MDNMy Github 링크웹 프론트엔드 개발자를 위한, 자바스크립트+jQuery 완전정복 스터디 - 김춘경(딴동네)","categories":[{"name":"Front-End","slug":"Front-End","permalink":"https://sharryhong.github.io/categories/Front-End/"},{"name":"JavaScript","slug":"Front-End/JavaScript","permalink":"https://sharryhong.github.io/categories/Front-End/JavaScript/"}],"tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"https://sharryhong.github.io/tags/JavaScript/"},{"name":"DOM","slug":"DOM","permalink":"https://sharryhong.github.io/tags/DOM/"}],"keywords":[{"name":"Front-End","slug":"Front-End","permalink":"https://sharryhong.github.io/categories/Front-End/"},{"name":"JavaScript","slug":"Front-End/JavaScript","permalink":"https://sharryhong.github.io/categories/Front-End/JavaScript/"}]},{"title":"JavaScript BOM","slug":"javascript-bom","date":"2016-12-28T09:06:59.000Z","updated":"2016-12-29T09:23:12.308Z","comments":true,"path":"2016/12/28/javascript-bom/","link":"","permalink":"https://sharryhong.github.io/2016/12/28/javascript-bom/","excerpt":"","text":"JavaScript를 배운다는 건…core(문법), core library(기본 제공 함수 등), BOM, DOM이 중 BOM에 대해 정리해보겠습니다. BOM(Brower Object Model)웹 브라우저를 구성하는 객체들이 포함되어 있습니다. Window 객체Javascript 실행시 가장 상위에 존재하는 객체입니다.웹 페이지의 정보에 접근하거나 변경을 할 수 있습니다.윈도우 창을 구성하며 server-side에는 없습니다.브라우저별로 문법이 다르기 때문에 크로스브라우징이 어렵습니다.IE9부터는 표준을 지켜서 괜찮으나 IE8은 고려해야 합니다. Navigator : 브라우저 정보Location : 주소창 부분History : 이번보기 다음보기 등Document : 웹 페이지 문서의 HTML, CSS 등에 대한 접근 가능. 가장 중요한 개념Screen : 디스플레이 부분 ※크롬 콘솔창에 window라고 치면 window 객체에 내장되어 있는 프로퍼티들이 쭉 나옵니다.※ wondow.은 생략이 가능합니다. 주요 프로퍼티 등window.devicePixelRatio : 기기의 픽셀 농도window.innerWidth : window의 화면 가로 폭window.innerHeight : window의 화면 세로 폭window.alert(&quot;Dialog 창 띄우기&quot;); : 오늘날은 alert창 별로 쓰지 않고 console로 씁니다.window.prompt(&#39;당신의 이름은?&#39;, &#39;예) 홍길동&#39;); : 입력창이 뜹니다. 잘 쓰지 않습니다.window.confirm(&quot;당신은 청년입니까?&quot;); : Yes, No 값을 받을 수 있습니다.window.open(&#39;http://www.naver.com&#39;); : 들어가자마자 새창이 뜹니다. 요샌 쓰지 않습니다.window.scrollX = window.pageXOffset; : 가로 스크롤바 위치window.scrollY =window.pageYOffset : 세로 스크롤바 위치 (나중에 스크롤 moving사용시 씀)크롬은 둘다 사용. 브라우저별로 다른 문법 사용window.scrollTo(0,1000); : x축 0, y축 1000px 절대적 위치이동window.scrollBy(0,100); : x축 0, y축 1000px 상대적 위치이동window.setInterval(할일(함수), 시간(밀리초)); : 주기마다 계속 함수 반복window.setTimeout(할일(함수), 시간(밀리초)); : 시간 후에 1회만 함수 실행window.clearInterval() : 멈춤. 변수에 setInterval되는 것을 담아놨다가 ()안에 넣기window.requestAnimationFrame(); : setInterval의 단점을 보완. IE10부터. Location (주소창) 객체location.href; : 주소 “http://caniuse.com“location.protocol; : “http:”location.domain;location.host; : “caniuse.com”location.hostname; : “caniuse.com”location.port;location.hash; : 해당페이지의 목적지(id) History 객체history.back() : 한칸 뒤로가기history.forward() : 한칸 앞페이지 가기history.go(-2) : 2칸 뒤로가기 등 제어가능 Screen 객체정확하게 말하자면 내 노트북의 모니터 screen 정보를 말하는 것입니다.통계할 때 빼곤 잘 쓰지 않습니다.screen.width : 스크린 widthscreen.height : 스크린 heightscreen.availHeight : 실제 사용가능한 heightscreen.orientation : 중요! 모바일 등 제어12// 기울기, 가로모드, onchange되면.. 설정가능ScreenOrientation &#123;angle: 0, type: &quot;landscape-primary&quot;, onchange: null&#125;` 예 )12345screen.orientation.onchange = fnction() &#123; if ( screen.orientation.type == &apos;landscape-primary&apos;) &#123; ... &#125;&#125; Navigator 객체navigator.userAgent : 사용자의 브라우저 식발자를 감지하여 거기에 맞는 디자인이 가능합니다.: 크롬 개발자도구의 모바일 버전으로 테스트가 가능합니다.“Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/51.0.2704.103 Safari/537.36”navigator.appCodeName : “Mozilla”navigator.userAgent.indexOf(&#39;Chrome&#39;) &gt; -1; : Chrome이라는게 있니? 즉, 크롬이니?. 해당 문구가 없다면 -1이 나옵니다. -1보다 크다면(크롬이라면) true를 반환합니다.navigator.vendor : 크롬 웹브라우저의 경우 “Google Inc.”navigator.cookieEnabled : 쿠키를 쓸 수 있나? true. 현재 모든 브라우저는 쿠키 쓸 수 있습니다.!!window.localStorage : 새로운 기술. 로컬스토리지navigator.onLine : 온라인인가? true : 온라인일 때 다운받게 하기 등 가능navigator.language : 주 언어 “ko” Document 객체웹 페이지 문서의 HTML, CSS 등에 대한 접근을 가능하게 하므로 Front-End개발에서 가장 중요한 개념입니다. document.title : titledocument.doctype : &lt;!DOCTYPE html&gt;document.compatMode : “CSS1Compat” 표준모드. “BackcCompat” 비표준모드돔스크립트(DOM Script) : 자바스크립트를 사용한 문서 동적 제어1234567891011// 웹 표준 호환 모드라면 standard_mode에 true값이 참조(Reference)됩니다.var standard_mode = document.compatMode == &apos;CSS1Compat&apos;;// 문서에서 root element인 &lt;html&gt; 요소를 찾아서 변수 html에 참조됩니다.var html = document.documentElement;// 웹 표준 호환 모드라면 첫번째 코드 블록문이 실행if ( standard_mode ) &#123; // 변수 html에 참조된 문서 객체 &lt;html&gt;요소에 class 속성 값을 &apos;standard&apos;로 설정합니다. html.setAttribute(&apos;class&apos;, &apos;standard&apos;);&#125; else &#123; html.setAttribute(&apos;class&apos;, &apos;nostandard&apos;);&#125; document.activeElement; : focus된, 활성화된 엘리먼트를 알 수 있습니다. 접근성에서 중요합니다.document.write(&#39;&#39;); : html코드에 추가되는데 이젠 이렇게 잘 쓰지 않습니다. DOM에 대한 포스팅 바로가기","categories":[{"name":"Front-End","slug":"Front-End","permalink":"https://sharryhong.github.io/categories/Front-End/"},{"name":"JavaScript","slug":"Front-End/JavaScript","permalink":"https://sharryhong.github.io/categories/Front-End/JavaScript/"}],"tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"https://sharryhong.github.io/tags/JavaScript/"},{"name":"BOM","slug":"BOM","permalink":"https://sharryhong.github.io/tags/BOM/"}],"keywords":[{"name":"Front-End","slug":"Front-End","permalink":"https://sharryhong.github.io/categories/Front-End/"},{"name":"JavaScript","slug":"Front-End/JavaScript","permalink":"https://sharryhong.github.io/categories/Front-End/JavaScript/"}]},{"title":"JavaScript ES6 문법 - Arrow functions","slug":"javascript-es6-arrow-functions","date":"2016-12-26T04:52:09.000Z","updated":"2016-12-26T08:17:29.825Z","comments":true,"path":"2016/12/26/javascript-es6-arrow-functions/","link":"","permalink":"https://sharryhong.github.io/2016/12/26/javascript-es6-arrow-functions/","excerpt":"","text":"Arrow functions(애로우 펑션, 화살표 함수 표현식)화살표 함수 표현식(arrow function expression)은 함수 표현식(function expression)에 비해 구문이 짧으며(예제 1.)this, arguments, super 또는 new.target을 자체 바인딩하지 않습니다(예제 2.). 메소드가 아닌 함수에 가장 적합하며 생성자로 사용할 수 없습니다. 문법12345(매개변수) =&gt; &#123; statements &#125; // 매개변수가 하나일 땐 괄호 생략 가능() =&gt; &#123; statements &#125; // 매개변수가 없는 함수는 광호가 필요합니다.// 객체 리터럴을 return하는 경우는 body를 괄호속에 넣어야 합니다. 매개변수 =&gt; (&#123; foo: bar &#125;) 12var func = x =&gt; x * x;var func = (x, y) =&gt; &#123; return x + y; &#125;; 예제 1. 짧은 문법 제공12345678910111213141516var materials = [ &quot;Hydrogen&quot;, &quot;Helium&quot;, &quot;Lithium&quot;, &quot;Beryllium&quot;];var materialsLength1 = materials.map(function(material)&#123; return material.length &#125;);var materialsLength2 = materials.map((material)=&gt;&#123; return material.length&#125;);var materialsLength3 = materials.map(material=&gt; material.length); 위 materialsLength1, materialsLength2, materialsLength3의 결과는 모두 [8, 6, 7, 9]로 같습니다. 예제 2.기존 JavaScript 문법의 this123456789101112function Person() &#123; // Person () 생성자는`this`를 자신의 인스턴스로 정의합니다. this.age = 0; setInterval(function growUp() &#123; // non-strict mode에서는 the growUp()함수는 `this`를 정의합니다. // Person () 생성자에 의해 정의된 `this`와는 다른 전역 객체로 정의됩니다. this.age++; &#125;, 1000);&#125;var p = new Person(); 위와 같은 문제를 해결하기 위해서 ECMAScript 3/5 문법에서는 아래와 같이 this를 변수에 저장하였습니다.123456789function Person() &#123; var that = this; that.age = 0; setInterval(function growUp() &#123; // callback은 `that`변수를 참조합니다. that.age++; &#125;, 1000);&#125; Arrow functions은 this를 자체 바인딩하지 않으므로 아래처럼 사용하면 예상대로 작동됩니다.123456789function Person()&#123; this.age = 0; setInterval(() =&gt; &#123; this.age++; // `this`는 Person객체를 제대로 참조합니다. &#125;, 1000);&#125;var p = new Person(); call()과 apply() 메서드에 적용되었을 때 인수 만 전달할 수 있습니다. this는 무시됩니다.1234567891011121314151617181920var adder = &#123; base : 1, add : function(a) &#123; var f = v =&gt; v + this.base; return f(a); &#125;, addThruCall: function(a) &#123; var f = v =&gt; v + this.base; var b = &#123; base : 2 &#125;; return f.call(b, a); &#125;&#125;;console.log(adder.add(1)); // 2console.log(adder.addThruCall(1)); // 2 만약 위에서 Arrow functions을 쓰지 않고 함수표현식을 쓴다면 결과는 달라집니다.12345678910addThruCall: function(a) &#123; var f = function(v) &#123; return v + this.base; &#125; var b = &#123; base : 2 &#125;; return f.call(b, a);&#125;console.log(adder.addThruCall(1)); // 3 연관 링크Arrow functions - MDN","categories":[{"name":"Front-End","slug":"Front-End","permalink":"https://sharryhong.github.io/categories/Front-End/"},{"name":"JavaScript","slug":"Front-End/JavaScript","permalink":"https://sharryhong.github.io/categories/Front-End/JavaScript/"}],"tags":[{"name":"ES6","slug":"ES6","permalink":"https://sharryhong.github.io/tags/ES6/"},{"name":"JavaScript","slug":"JavaScript","permalink":"https://sharryhong.github.io/tags/JavaScript/"},{"name":"arrow functions","slug":"arrow-functions","permalink":"https://sharryhong.github.io/tags/arrow-functions/"}],"keywords":[{"name":"Front-End","slug":"Front-End","permalink":"https://sharryhong.github.io/categories/Front-End/"},{"name":"JavaScript","slug":"Front-End/JavaScript","permalink":"https://sharryhong.github.io/categories/Front-End/JavaScript/"}]},{"title":"JavaScript ES6 문법 - Declarations(선언)","slug":"javascript-es6","date":"2016-12-24T16:54:47.000Z","updated":"2016-12-26T04:40:36.052Z","comments":true,"path":"2016/12/25/javascript-es6/","link":"","permalink":"https://sharryhong.github.io/2016/12/25/javascript-es6/","excerpt":"","text":"ES6 변수, 상수 선언 키워드let : 정의된 블록내에서만 존재하는 변수 선언 (지역 변수)const : 상수(변하지 않는 값) 선언 var : ES6문법 이전부터 사용하던 변수 선언 (전역 변수) 1234var x = &apos;global&apos;; // 전역 변수 let y = &apos;global&apos;; // 지역 변수 console.log(this.x); // &quot;global&quot;console.log(this.y); // undefined Scoping rules - var와 let 비교12345678function varTest() &#123; var x = 1; if (true) &#123; var x = 2; // 위의 x와 같은 변수 console.log(x); // 결과 : 2 &#125; console.log(x); // 결과 : 2&#125; 12345678function letTest() &#123; let x = 1; if (true) &#123; let x = 2; // 위의 x와 다른 변수 console.log(x); // 결과 : 2 &#125; console.log(x); // 결과 : 1&#125; 내부함수 코드를 명확하게 해주는 let1234567891011var list = document.getElementById(&quot;list&quot;);for (let i = 1; i &lt;= 5; i++) &#123; // for문 내에서만 사용할 변수이므로 let 사용 let item = document.createElement(&quot;li&quot;); item.appendChild(document.createTextNode(&quot;Item &quot; + i)); item.onclick = function (ev) &#123; console.log(&quot;Item &quot; + i + &quot; is clicked.&quot;); &#125;; list.appendChild(item);&#125; 변수 선언 &amp; 호이스팅var : scope내 최상단으로 호이스팅됩니다.let과 const : 호이스팅되지 않습니다. ※ 호이스팅 : 어떤 위치에 있든지 위로 끌어올려지는 현상1234function do_something() &#123; console.log(foo); // ReferenceError let foo = 2; // 호이스팅 되지 않아 Error&#125; 연관 링크let - MDNJavaScript Reference - MDNECMAScript 6 Tutorial","categories":[{"name":"Front-End","slug":"Front-End","permalink":"https://sharryhong.github.io/categories/Front-End/"},{"name":"JavaScript","slug":"Front-End/JavaScript","permalink":"https://sharryhong.github.io/categories/Front-End/JavaScript/"}],"tags":[{"name":"ES6","slug":"ES6","permalink":"https://sharryhong.github.io/tags/ES6/"},{"name":"JavaScript","slug":"JavaScript","permalink":"https://sharryhong.github.io/tags/JavaScript/"},{"name":"let","slug":"let","permalink":"https://sharryhong.github.io/tags/let/"},{"name":"const","slug":"const","permalink":"https://sharryhong.github.io/tags/const/"}],"keywords":[{"name":"Front-End","slug":"Front-End","permalink":"https://sharryhong.github.io/categories/Front-End/"},{"name":"JavaScript","slug":"Front-End/JavaScript","permalink":"https://sharryhong.github.io/categories/Front-End/JavaScript/"}]},{"title":"javascript30.com 재미있는 자바스크립트 강의","slug":"link-javascript-30","date":"2016-12-23T16:56:29.553Z","updated":"2016-12-25T08:09:51.277Z","comments":true,"path":"2016/12/24/link-javascript-30/","link":"","permalink":"https://sharryhong.github.io/2016/12/24/link-javascript-30/","excerpt":"","text":"javascript30.com | github 소스 영어로 진행하는데도 재미있게 알아들을 수 있는 신선한 라이브코딩식 강의! 처음엔 30 Day Vanilla JS Coding Challenge라고 되어있기에 문제를 하나씩 던져주고 해결하라고 하는건가? 라고 생각했는데, 동영상으로 라이브코딩처럼 진행하는 방식입니다. Vanilla JS, 즉, 라이브러리 등을 사용하지 않고 순수 자바스크립트로 코딩하는 데, console.log를 하나하나 찍어가면서 테스트해보기 때문에 더 정감이 가네요 ㅋㅋ 저는 아직 자바스크립트 ES6 문법을 제대로 익히지 못했는데, 이 강의는 ES6를 쓰는군요!재미있게 강의 보면서 자연스럽게 찾아보고 익혀야겠습니다. :)","categories":[{"name":"Bookmark","slug":"Bookmark","permalink":"https://sharryhong.github.io/categories/Bookmark/"}],"tags":[{"name":"javascript30.com","slug":"javascript30-com","permalink":"https://sharryhong.github.io/tags/javascript30-com/"}],"keywords":[{"name":"Bookmark","slug":"Bookmark","permalink":"https://sharryhong.github.io/categories/Bookmark/"}]},{"title":"AngularJS 도입 선택 가이드 - Naver","slug":"angularjs-story","date":"2016-12-23T07:28:48.000Z","updated":"2016-12-23T07:48:14.927Z","comments":true,"path":"2016/12/23/angularjs-story/","link":"","permalink":"https://sharryhong.github.io/2016/12/23/angularjs-story/","excerpt":"","text":"AngularJS 도입 선택 가이드 - Naver D2 예전에 관리했던 블로그를 살펴보는데 참 재밋네요 :)그 당시에도 앵귤러에 관심이 있어서 링크해두었던 글입니다.","categories":[{"name":"Bookmark","slug":"Bookmark","permalink":"https://sharryhong.github.io/categories/Bookmark/"}],"tags":[{"name":"AngularJS","slug":"AngularJS","permalink":"https://sharryhong.github.io/tags/AngularJS/"},{"name":"도입","slug":"도입","permalink":"https://sharryhong.github.io/tags/도입/"}],"keywords":[{"name":"Bookmark","slug":"Bookmark","permalink":"https://sharryhong.github.io/categories/Bookmark/"}]},{"title":"NVM(Node Version Manager)으로 node.js 버전관리하기","slug":"nodejs-nvm","date":"2016-12-20T13:27:35.000Z","updated":"2016-12-21T08:04:25.734Z","comments":true,"path":"2016/12/20/nodejs-nvm/","link":"","permalink":"https://sharryhong.github.io/2016/12/20/nodejs-nvm/","excerpt":"","text":"Node Version Manager webpack이 자꾸 안되었던 이유가 node.js의 버전때문이었습니다. 하아 ㅜㅜ 지금이라도 알았으니 다행.. ^^gulp + webpack 설정으로 사용하고 싶어, 스터디 팀끼리 서로 정보 공유하며 씨름하다 결국엔 성공했습니다. ^^ 씐나씐나 ~~~ Windows 환경에서 NVM을 설치하여 node.js 버전을 바꾸며 사용하는 방법입니다.(언제나 그렇듯 Mac은 쉽죠잉 : 맥은 여기 참조) 1) 기존에 사용하던 node를 삭제합니다. 윈도우의 경우 제어판의 프로그램 제거에서 삭제하면 됩니다. 2) nvm을 설치합니다. nvm-setup.zip 다운받아 설치 3) 터미널에서 $ nvm install v4.4.6 처럼 사용할 버전의 노드를 설치합니다. 4) $ nvm ls 로 설치된 버전을 확인 할 수 있습니다. 1234$ nvm ls * 6.9.2 (Currently using 64-bit executable) 4.4.6 위처럼 저는 기존에 사용하던 gulp를 위해 v4.x와 현재 사용할 webpack + gulp를 위해 v6.x를 설치하였습니다. 5) 노트 버전을 바꾸어봅니다. $ nvm use 4.4.6node버전 확인 : $ node -v 만약 node가 설치 안된 것 처럼 나올 때는 터미널을 껐다 켜봅니다. 6) gulp를 전역에 설치합니다. $ npm install --global gulp주의할 점은 gulp가 버전별로 설치가 되어야 한다는 점입니다.즉, $ nvm use 4.4.6 에서도 설치, $ nvm use 6.9.2로 바꿔서도 설치해줍니다. 7) 이제 프로젝트에 해당하는 node 버전으로 바꾼 후에 기존처럼 사용하면 됩니다.","categories":[{"name":"Front-End","slug":"Front-End","permalink":"https://sharryhong.github.io/categories/Front-End/"},{"name":"node.js","slug":"Front-End/node-js","permalink":"https://sharryhong.github.io/categories/Front-End/node-js/"}],"tags":[{"name":"node.js","slug":"node-js","permalink":"https://sharryhong.github.io/tags/node-js/"},{"name":"NVM","slug":"NVM","permalink":"https://sharryhong.github.io/tags/NVM/"}],"keywords":[{"name":"Front-End","slug":"Front-End","permalink":"https://sharryhong.github.io/categories/Front-End/"},{"name":"node.js","slug":"Front-End/node-js","permalink":"https://sharryhong.github.io/categories/Front-End/node-js/"}]},{"title":"SASS Nesting(중첩)","slug":"sass-nesting","date":"2016-12-19T07:14:28.000Z","updated":"2016-12-21T08:09:27.399Z","comments":true,"path":"2016/12/19/sass-nesting/","link":"","permalink":"https://sharryhong.github.io/2016/12/19/sass-nesting/","excerpt":"","text":"해당 코드가 있는 Github 바로가기01해당 코드가 있는 Github 바로가기02 Nesting(중첩)중첩은 반복을 제거하고 스타일링에 분명한 DOM관계를 보여줌으로서 코드를 효율적으로 만듭니다. 확장자가 SCSS, SASS 일 때 문법이 다른데,SCSS파일의 경우는 기존의 CSS의 문법과 동일합니다.123456.parent &#123; color: blue; .child &#123; font-size: 12px; &#125;&#125; SASS파일의 경우 {}를 쓰지 않고 들여쓰기로 구분합니다. ;도 쓰지 않습니다.1234.parent color: blue .child font-size: 12px 위의 SCSS와 SASS의 CSS 컴파일 결과는 같습니다.1234567.parent &#123; color: blue;&#125;.parent .child &#123; font-size: 12px;&#125; 속성에 관련한 Nesting :1234567.parent &#123; font : &#123; family: Roboto, sans-serif; size: 12px; decoration: none; &#125;&#125; 컴파일 결과12345.parent &#123; font-family: Roboto, sans-serif; font-size: 12px; font-decoration: none;&#125; &amp; : 부모 참조 선택자. 중첩된 구조에서 사용합니다.123.button &amp;:hover background: skyblue 컴파일 결과123.button:hover &#123; background: skyblue;&#125; @extend : 선택자 상속. 그룹핑 개념으로 선언된 다른 규칙의 내용을 상속받습니다.123456789101112131415161718$btn-radius: 4px$btn-align: center$btn-gap: .6em$btn-bg: #fe9977.button display: inline-block padding: $btn-gap $btn-gap background: $btn-bg text-align: $btn-align &amp;:hover background: skyblue.button-error @extend .button color: #fff border: 3px solid green 컴파일 결과1234567891011.button, .button-error &#123; display: inline-block; padding: 0.6em 0.6em; background: #fe9977; text-align: center; &#125; .button:hover, .button-error:hover &#123; background: skyblue; &#125;.button-error &#123; color: #fff; border: 3px solid green; &#125;","categories":[{"name":"Front-End","slug":"Front-End","permalink":"https://sharryhong.github.io/categories/Front-End/"},{"name":"CSS/SASS","slug":"Front-End/CSS-SASS","permalink":"https://sharryhong.github.io/categories/Front-End/CSS-SASS/"}],"tags":[{"name":"SASS","slug":"SASS","permalink":"https://sharryhong.github.io/tags/SASS/"},{"name":"Nesting","slug":"Nesting","permalink":"https://sharryhong.github.io/tags/Nesting/"}],"keywords":[{"name":"Front-End","slug":"Front-End","permalink":"https://sharryhong.github.io/categories/Front-End/"},{"name":"CSS/SASS","slug":"Front-End/CSS-SASS","permalink":"https://sharryhong.github.io/categories/Front-End/CSS-SASS/"}]},{"title":"SASS Variables (변수)","slug":"sass-variable","date":"2016-12-19T06:27:48.000Z","updated":"2016-12-21T08:09:50.038Z","comments":true,"path":"2016/12/19/sass-variable/","link":"","permalink":"https://sharryhong.github.io/2016/12/19/sass-variable/","excerpt":"","text":"해당 코드가 있는 Github 바로가기01해당 코드가 있는 Github 바로가기02 CSS로 style 코드를 작성하다보면 반복사용 하는 것들을 한번에 관리하면 좋겠다는 생각을 하게 됩니다.이럴 때 사용하면 좋을 문법이 sass의 변수입니다. 나중엔 mixin, 함수 개념등을 알면 좋은데 우선 변수만 잘 써도 일이 확 줄어드는 것을 알 수 있습니다. 조으다! ^^ Variables (변수)변수는 가독성과 유지보수를 향상시켜줍니다. 문법 : $를 붙여 변수를 만들고 값을 대입합니다.12345// 변수 선언 $translucent-white: rgba(255,255,255,0.3);// 변수 사용시 background-color: $translucent-white; 변수이름 작성 규칙변수 이름 사이에 공백을 사용하지 않습니다.변수 이름의 음절 사이에 _ , - 등을 사용합니다. _ , - 구별을 하지 않습니다.만약 프로그래밍에 익숙해서 camelCase방식이 익숙하다면 사용이 가능하지만 camelCase방식은 함수 이름에 사용되므로 권장하지는 않습니다. !global : 전역변수처럼 사용가능하게 합니다.12345678#main &#123; $width: 5em !global; width: $width;&#125;#sidebar &#123; width: $width;&#125; !default : 기본값. null값을 제외하곤 다른 값이 우선시됩니다.123$set-width: 900px;$set-width: 1000px !default// 의 경우 900px로 됩니다. Data Type (데이터 유형) 데이터유형 설명 예 null 빈 값 number 숫자 1.2, 3, 14px (특이하게 단위가 붙어도 숫자형입니다.) string 문자 color (#, rgba, …) “../img/icon.jpg”, ‘Time, serif’, #333 boolean 논리. true, false list 배열 개념 1.5em Helvetica bold; or Helvetica, Arial, sans-serif; map 객체 개념 (key1: value1, key2: value2);","categories":[{"name":"Front-End","slug":"Front-End","permalink":"https://sharryhong.github.io/categories/Front-End/"},{"name":"CSS/SASS","slug":"Front-End/CSS-SASS","permalink":"https://sharryhong.github.io/categories/Front-End/CSS-SASS/"}],"tags":[{"name":"SASS","slug":"SASS","permalink":"https://sharryhong.github.io/tags/SASS/"},{"name":"Variables","slug":"Variables","permalink":"https://sharryhong.github.io/tags/Variables/"}],"keywords":[{"name":"Front-End","slug":"Front-End","permalink":"https://sharryhong.github.io/categories/Front-End/"},{"name":"CSS/SASS","slug":"Front-End/CSS-SASS","permalink":"https://sharryhong.github.io/categories/Front-End/CSS-SASS/"}]},{"title":"Link-AngularJS","slug":"Link-AngularJS","date":"2016-12-18T09:57:31.000Z","updated":"2016-12-18T10:19:02.732Z","comments":true,"path":"2016/12/18/Link-AngularJS/","link":"","permalink":"https://sharryhong.github.io/2016/12/18/Link-AngularJS/","excerpt":"","text":"앵귤러 개발자가 놓치기 쉬운 10가지 사실들 - 김정환님 블로그 포스팅을 보며 앵귤러 코드 리펙토링하고 있습니다.저 글 뿐 아니라 앵귤러 세미나내용도 있으니 우리 썬쓰 SunS(스터디 팀)끼리 열심히 해볼 생각입니다. ^^저도 차근차근 실력쌓아서 도움되는 블로그를 만들고 싶네요. :)","categories":[{"name":"Bookmark","slug":"Bookmark","permalink":"https://sharryhong.github.io/categories/Bookmark/"}],"tags":[{"name":"AngularJS","slug":"AngularJS","permalink":"https://sharryhong.github.io/tags/AngularJS/"}],"keywords":[{"name":"Bookmark","slug":"Bookmark","permalink":"https://sharryhong.github.io/categories/Bookmark/"}]},{"title":"2016 정보접근성 기술 컨퍼런스 & WAI-ARIA","slug":"web-aria","date":"2016-12-13T04:31:01.000Z","updated":"2016-12-21T08:06:31.996Z","comments":true,"path":"2016/12/13/web-aria/","link":"","permalink":"https://sharryhong.github.io/2016/12/13/web-aria/","excerpt":"","text":"12월 9일 금요일. UN 인권의 날 기념 - 2016 정보접근성 기술 컨퍼런스에 다녀왔습니다.집에서 먼 거리에 있어 상암쪽은 살면서 두번째네요~결론은.. 눈 비비며 먼 길 다녀온 보람이 있었다는 것입니다. ^^ 특히 우리 프론트엔드 개발스쿨의 야무쌤 파트였던 WAI-ARIA부분은 예전부터 알고 싶던 기술이었기 때문에 더 귀를 쫑끗하며 들었습니다.한국 웹접근성 지침을 잘 따르더라도, 모두가 동등하게 사용하는데에는 부족하다는데요.실제로 스크린리더기 등으로 들어보니 우리가 의도한 바를 어떤 분들은 알기 어렵구나, 그리고 아리아를 적용하는게 생각보다 어렵진 않겠구나를 느꼈습니다. WAI-ARIA란?접근성이 떨어지기 쉬운 동적 컨텐츠에 접근성을 보완하는 기술입니다. 접근성이 떨어지기 쉬운 부분은?동적인 웹 애플리케이션 접근성 보장을 위한 지침이 부족합니다.Ajax를 통한 실시간 변경 콘텐츠를 못 읽을 수 있습니다.페이지 콘텐츠 중 일부만 변경 시, 동일한 내용을 계속 읽어야 하는 문제가 발생합니다.화면을 확대해서 보는 분들의 경우, 가시범위 밖의 콘텐츠 변경 내용을 알기 어렵습니다.그 외에도 많다고 하네요 ㅜㅜ WAI-ARIA의 목적?마크업에 역할(Role), 속성(Property), 상태(State) 정보를 추가하여스크린 리더 및 보조 기기등에서 접근성 및 상호운용성을 향상시키고보다 나은 사용자경험(UX)을 제공하기 위함 브라우저 지원현황: IE11부터, 대부분의 브라우저가 지원하고 있습니다. WAI-ARIA 사례 바로가기: 야무쌤 포함 여러 전문가들의 노력으로 아리아 사례가 github에 공개되어 있습니다. 세미나 그 후 나의 생각아직 공공기관이나 대기업의 사이트 정도만 웹접근성을 잘 따르려 노력하고 있다고 들었는데, 앞으로는 모두를 위해 천천히라도 적용하였으면 좋겠습니다.웹 접근성을 지키면 사람의 일부가 아니라, 전체에 좋아질거라 생각됩니다.노인을 위한 디자인을 위해, 3년간 노인 분장을 하고 도시를 돌아다녔던 패트리샤 무어의 이야기.. 그 결과 힘이 약한 노인이나 아이들 뿐 아니라, 모두에게 편리한 제품을 디자인할 수 있었습니다.웹, 앱도 다르지 않을거라 생각됩니다. 좋은 서비스에 맞는 좋은 접근성을 제공하여 누구나 쉽고 편리하게 사용하는 서비스를 만들고 싶네요… ^^ 연관 링크W3C의 WAI-ARIA 1.1","categories":[{"name":"Front-End","slug":"Front-End","permalink":"https://sharryhong.github.io/categories/Front-End/"},{"name":"웹접근성","slug":"Front-End/웹접근성","permalink":"https://sharryhong.github.io/categories/Front-End/웹접근성/"}],"tags":[{"name":"웹접근성","slug":"웹접근성","permalink":"https://sharryhong.github.io/tags/웹접근성/"},{"name":"WAI-ARIA","slug":"WAI-ARIA","permalink":"https://sharryhong.github.io/tags/WAI-ARIA/"}],"keywords":[{"name":"Front-End","slug":"Front-End","permalink":"https://sharryhong.github.io/categories/Front-End/"},{"name":"웹접근성","slug":"Front-End/웹접근성","permalink":"https://sharryhong.github.io/categories/Front-End/웹접근성/"}]},{"title":"portfolio-sli.do 서비스 (AngularJS)","slug":"portfolio-slido","date":"2016-12-12T11:23:57.000Z","updated":"2016-12-30T16:18:03.448Z","comments":true,"path":"2016/12/12/portfolio-slido/","link":"","permalink":"https://sharryhong.github.io/2016/12/12/portfolio-slido/","excerpt":"","text":"Hong’s portfolio - sli.do 바로가기Github 소스 바로가기 포트폴리오 주제강의 중 실시간으로 질문, 답변을 받는 서비스 포트폴리오 개발 기간2016-11 ~ 공부하며 코드 리펙토링 중입니다. 특징 및 기능반응형 웹 : 데스크탑, 테블릿, 모바일에 대응하여 적절한 view를 보여줍니다.JSON파일의 data를 불러옵니다. (그룹 이름, 작성자 이름, 질문 내용, 좋아요 개수 등)질문을 입력받아 popular(인기순), Recent(최신순) 대로 보여줍니다.popular(인기순) : 좋아요 버튼 클릭시 자동으로 상단으로 이동합니다.질문자 이름을 입력하지 않을 시 Anonymous(익명)로 표시됩니다.질문 내용을 클릭하면 상세페이지로 이동하여 comment(덧글)를 달 수 있습니다.덧글 개수가 JSON data로 저장되어 main에서 숫자로 보여집니다. 사용 SkillJavaScript, AngularJS, JSON, jQueryHTML, SASS to CSSGulp 주제 선정 이유AngularJS로 서비스를 만들어보고 싶던 중, 생활코딩 세미나에서 sli.do의 서비스를 사용하였습니다.사용이 직관적이어서 좋았고, 강의 중 질문을 바로 올리고, 나중에 강사가 모아서 대답을 할 수 있는 좋은 서비스라 생각되어 개발해보고 싶었습니다. 고려사항comment 기능이 있으면 좋을 것 같아 추가하였습니다.JavaScript prototype Class문법크로스 브라우징 : IE9이상","categories":[{"name":"Portfolio","slug":"Portfolio","permalink":"https://sharryhong.github.io/categories/Portfolio/"},{"name":"Portfolio","slug":"Portfolio/Portfolio","permalink":"https://sharryhong.github.io/categories/Portfolio/Portfolio/"}],"tags":[{"name":"AngularJS","slug":"AngularJS","permalink":"https://sharryhong.github.io/tags/AngularJS/"},{"name":"JavaScript","slug":"JavaScript","permalink":"https://sharryhong.github.io/tags/JavaScript/"},{"name":"Portfolio","slug":"Portfolio","permalink":"https://sharryhong.github.io/tags/Portfolio/"},{"name":"SASS","slug":"SASS","permalink":"https://sharryhong.github.io/tags/SASS/"},{"name":"Gulp","slug":"Gulp","permalink":"https://sharryhong.github.io/tags/Gulp/"},{"name":"sli.do","slug":"sli-do","permalink":"https://sharryhong.github.io/tags/sli-do/"}],"keywords":[{"name":"Portfolio","slug":"Portfolio","permalink":"https://sharryhong.github.io/categories/Portfolio/"},{"name":"Portfolio","slug":"Portfolio/Portfolio","permalink":"https://sharryhong.github.io/categories/Portfolio/Portfolio/"}]},{"title":"Grid 시스템을 적용한 Responsive(반응형) Site","slug":"progect-grid-responsive","date":"2016-12-05T08:30:30.000Z","updated":"2017-01-02T09:51:01.729Z","comments":true,"path":"2016/12/05/progect-grid-responsive/","link":"","permalink":"https://sharryhong.github.io/2016/12/05/progect-grid-responsive/","excerpt":"","text":"결과화면 보기 | Github 소스 바로가기 개발 기간2016-07 특징 및 기능그리드 시스템에 따른 반응형 웹데스크탑 대응은 10컬럼, 모바일 대응은 2컬럼 그리드 시스템을 사용하였습니다. 코드 설명grid-responsive.css모바일 대응 : .unit-s-1-2 ~ .unit-s-11-12데스크탑 대응 : .unit-l-1-2 ~ .unit-l-11-12먼저 위같이 class name을 먼저 지정해주고 width를 %단위로 정해줍니다.그 후 html에서 3등분의 경우 class=&quot;unit-s-1-3&quot;로 지정해주면 자동으로 3등분한 style이 적용됩니다. style.css모바일 대응 그리드를 보여주는 부분1234567891011121314151617.show-grid::before &#123; content: &apos;&apos;; position: absolute; z-index: 100; top: 0; left: 0; width: 100%; height: 2165px; background: linear-gradient(90deg, rgba(191, 64, 64, 0.1) 50%, rgba(0,0,0,0.1) 50%), linear-gradient(transparent 95%, #26923f 95%); background-size: // 첫번째 linear-gradient 100%, // 두번째 linear-gradient. 가로 1px, 세로 21px로 채워줍니다. 1px 1.3125rem;&#125; linear-gradient로 그리드를 직접 볼 수 있도록 그려주었습니다.linear-gradient(90deg, rgba(191, 64, 64, 0.1) 50%, rgba(0,0,0,0.1) 50%): x축 그리기. 50%, 50% 간격으로 그리드 색을 지정해줍니다.linear-gradient(transparent 95%, #26923f 95%);: y축 그리기. 95%는 투명색, 5%는 색상을 지정해주어 선을 표시합니다. 데스크탑 대응 그리드를 보여주는 부분1234567@media (min-width: 1000px) &#123; .show-grid::before &#123; background-size: 20% 20%, 1px 1.3125rem; &#125;&#125; linear-gradient 그라이언트 그리드 배경 색상 부분은 모바일 대응과 같아 생략가능하므로 배경 사이즈만 지정하였습니다. Image Responsive-Scale의 예 (이미지 반응형 크기 대응하기)1234567.responsive-scale &#123; width: 100%; padding-bottom: 63%; /*1200/1920 *100*/ background-image: url(&quot;../img/landscape-photos.jpg&quot;); background-size: cover; background-position: center;&#125; padding-bottom: 세로/가로 * 100%;로 해주면 이미지가 반응형으로 대응합니다.","categories":[{"name":"Portfolio","slug":"Portfolio","permalink":"https://sharryhong.github.io/categories/Portfolio/"},{"name":"Portfolio","slug":"Portfolio/Portfolio","permalink":"https://sharryhong.github.io/categories/Portfolio/Portfolio/"}],"tags":[{"name":"grid","slug":"grid","permalink":"https://sharryhong.github.io/tags/grid/"},{"name":"Responsive","slug":"Responsive","permalink":"https://sharryhong.github.io/tags/Responsive/"},{"name":"반응형","slug":"반응형","permalink":"https://sharryhong.github.io/tags/반응형/"}],"keywords":[{"name":"Portfolio","slug":"Portfolio","permalink":"https://sharryhong.github.io/categories/Portfolio/"},{"name":"Portfolio","slug":"Portfolio/Portfolio","permalink":"https://sharryhong.github.io/categories/Portfolio/Portfolio/"}]},{"title":"Webpack","slug":"Link-webpack","date":"2016-11-30T14:34:55.000Z","updated":"2016-12-13T03:32:07.358Z","comments":true,"path":"2016/11/30/Link-webpack/","link":"","permalink":"https://sharryhong.github.io/2016/11/30/Link-webpack/","excerpt":"","text":"webpack에 대하여 - 양권성님 블로그webpack 기본 가이드 - HyunSeob님 블로그webpack for Angular+jquery,sass - yamoo9님 github","categories":[{"name":"Bookmark","slug":"Bookmark","permalink":"https://sharryhong.github.io/categories/Bookmark/"}],"tags":[{"name":"Webpack","slug":"Webpack","permalink":"https://sharryhong.github.io/tags/Webpack/"}],"keywords":[{"name":"Bookmark","slug":"Bookmark","permalink":"https://sharryhong.github.io/categories/Bookmark/"}]},{"title":"SASS Satting","slug":"sass-satting","date":"2016-11-29T10:07:09.000Z","updated":"2016-12-21T08:10:20.790Z","comments":true,"path":"2016/11/29/sass-satting/","link":"","permalink":"https://sharryhong.github.io/2016/11/29/sass-satting/","excerpt":"","text":"해당 코드가 있는 Github 바로가기 CSS Preprocessor 인 SASS. 웹 스타일링을 담당하는 CSS를 좀 더 똘똘하게 사용하고 유지보수를 좋게하는 프리프로세서입니다. 설치 및 Sass to CSSSass to CSS를 위해 node sass를 실행합니다. 추후엔 Gulp같은 자동화툴로 관리하도록 합니다. 다운로드 및 설치git bash : 터미널 방식으로 명령어를 사용하여서 Git를 컨트롤 하는 시스템설치 후 파일탐색기 &gt; 해당폴더 &gt; 마우스 오른쪽 &gt; git bush here 를 클릭하여 터미널을 실행시킵니다. node sass 설치12$ npm install node-sass --global 혹은 $ npm i -g node-sass (install global줄여쓴 것) sass -&gt; css로 sass or scss파일을 만들고 저장 후 1$ node-sass -w sass/ -o css/ --source-map css sass폴더내의 sass or scss 파일을 css폴더내의 css파일로 컴파일한다는 뜻sourcemapping이 있어야 개발자도구에서 style.sass이런식으로 표시가 됩니다. css 폴더내에 xxx.css.map 파일이 생깁니다. 배포시엔 map파일을 제외하고 올립니다. sass파일을 수정 후 저장합니다. 자, 이제 sass -&gt; css파일로 컴파일 되었습니다. 이젠 css파일은 건드리지 않고 sass파일로만 작업합니다. 파일 쪼개고 병합하기예를들어 _footer.sass와 같이 _가 붙으면 병합될 파일이므로 컴파일되지 않습니다.style.sass 에서 @import /part/page/footer 이런 식으로 @import 하여 병합시킵니다.@import시 파일이름의 _, .sass, .scss는 생략할 수 있습니다. Sublime Text에서 sass, scss 파일 인지시키기 Sublime Text의 install package에서 syntax highlighting for sass를 설치합니다. 서브라임 텍스트의 오른쪽 하단에서 sass를 선택합니다. 참고 사이트 Sass-lang.com","categories":[{"name":"Front-End","slug":"Front-End","permalink":"https://sharryhong.github.io/categories/Front-End/"},{"name":"CSS/SASS","slug":"Front-End/CSS-SASS","permalink":"https://sharryhong.github.io/categories/Front-End/CSS-SASS/"}],"tags":[{"name":"CSS","slug":"CSS","permalink":"https://sharryhong.github.io/tags/CSS/"},{"name":"SASS","slug":"SASS","permalink":"https://sharryhong.github.io/tags/SASS/"}],"keywords":[{"name":"Front-End","slug":"Front-End","permalink":"https://sharryhong.github.io/categories/Front-End/"},{"name":"CSS/SASS","slug":"Front-End/CSS-SASS","permalink":"https://sharryhong.github.io/categories/Front-End/CSS-SASS/"}]},{"title":"ReactJS ES6","slug":"Link-ReactJS-ES6","date":"2016-11-28T05:13:41.000Z","updated":"2016-12-13T03:32:07.349Z","comments":true,"path":"2016/11/28/Link-ReactJS-ES6/","link":"","permalink":"https://sharryhong.github.io/2016/11/28/Link-ReactJS-ES6/","excerpt":"","text":"ReactJS를 작성할 때에 알아두면 좋은 ES6 문법들 - 고무곰님의 블로그","categories":[{"name":"Bookmark","slug":"Bookmark","permalink":"https://sharryhong.github.io/categories/Bookmark/"}],"tags":[{"name":"ES6","slug":"ES6","permalink":"https://sharryhong.github.io/tags/ES6/"}],"keywords":[{"name":"Bookmark","slug":"Bookmark","permalink":"https://sharryhong.github.io/categories/Bookmark/"}]},{"title":"JavaScript TabMenu (ES5_prototype class)","slug":"project-javascript-tabmenu","date":"2016-11-28T04:16:12.000Z","updated":"2017-01-02T04:58:46.473Z","comments":true,"path":"2016/11/28/project-javascript-tabmenu/","link":"","permalink":"https://sharryhong.github.io/2016/11/28/project-javascript-tabmenu/","excerpt":"","text":"JavaScript 프로토타입 방식으로 클래스 만들기 - 탭 메뉴 해당 코드가 있는 Github 바로가기 | 결과화면 보기 1234567891011121314151617181920212223242526272829303132333435363738394041424344// 2. 함수 단위 -&gt; 프로토타입 방식 클래스 (function(global, $)&#123;&apos;use strict&apos;;// 인스턴스 생성 var tabTab1 = new TabMenu();var tabTab2 = new TabMenu();// 클래스 생성, 프로퍼티 생성 function TabMenu() &#123; this.$tab = null this.$tabMenus = null; this.$selectMenu = null;&#125;// 메서드 생성, 요소 초기화 TabMenu.prototype.init =function(el)&#123; this.$tab = $(el); this.$tabMenus = this.$tab.find(&apos;li&apos;); console.log(this);&#125;TabMenu.prototype.initEvent = function()&#123; var objThis = this; // 아래에 설명 추가 this.$tabMenus.on(&quot;click&quot;, function()&#123; objThis.setSelectMenu($(this)); &#125;);&#125;TabMenu.prototype.setSelectMenu = function($thisMenu)&#123; if(this.$selectMenu)&#123; this.$selectMenu.removeClass(&apos;select&apos;); &#125; this.$selectMenu = $thisMenu; this.$selectMenu.addClass(&apos;select&apos;);&#125;tabTab1.init(&apos;#tabMenu1&apos;);tabTab1.initEvent();tabTab2.init(&apos;#tabMenu2&apos;);tabTab2.initEvent();&#125;)(this, this.jQuery); this에 대하여클릭(이벤트) 전 this 는 아래처럼 구성되어 있습니다. (크롬 개발자도구)클래스에 프로퍼티와, prototype에 메서드가 정의되어 있는 걸 볼 수 있습니다. 12345678910TabMenu $selectMenu:null $tab:n.fn.init[1] $tabMenus:n.fn.init[6] __proto__: Object // = prototype constructor:TabMenu() init: function(el) initEvent: function() setSelectMenu: function($thisMenu) __proto__: Object 123456TabMenu.prototype.initEvent = function()&#123; var objThis = this; this.$tabMenus.on(&quot;click&quot;, function()&#123; objThis.setSelectMenu($(this)); &#125;);&#125; 위 코드에서 this.$tabMenus.on(&quot;click&quot;,... 클릭을 하면 this가 클릭한 li요소로 되어버립니다.(이벤트에서 this는 이벤트를 발생시킨 객체이기 때문입니다.)따라서 변수 objThis에 본래의 this를 저장하여 objThis.setSelectMenu($(this));로 사용한 것입니다. 연관 링크JavaScript ES5 Class - 관련 링크 바로가기","categories":[{"name":"Portfolio","slug":"Portfolio","permalink":"https://sharryhong.github.io/categories/Portfolio/"},{"name":"Free Project","slug":"Portfolio/Free-Project","permalink":"https://sharryhong.github.io/categories/Portfolio/Free-Project/"}],"tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"https://sharryhong.github.io/tags/JavaScript/"},{"name":"Class","slug":"Class","permalink":"https://sharryhong.github.io/tags/Class/"},{"name":"ES5","slug":"ES5","permalink":"https://sharryhong.github.io/tags/ES5/"},{"name":"prototype","slug":"prototype","permalink":"https://sharryhong.github.io/tags/prototype/"},{"name":"TabMenu","slug":"TabMenu","permalink":"https://sharryhong.github.io/tags/TabMenu/"}],"keywords":[{"name":"Portfolio","slug":"Portfolio","permalink":"https://sharryhong.github.io/categories/Portfolio/"},{"name":"Free Project","slug":"Portfolio/Free-Project","permalink":"https://sharryhong.github.io/categories/Portfolio/Free-Project/"}]},{"title":"JavaScript Class (ES5)","slug":"javascript-class","date":"2016-11-26T13:18:00.000Z","updated":"2017-01-02T05:26:25.882Z","comments":true,"path":"2016/11/26/javascript-class/","link":"","permalink":"https://sharryhong.github.io/2016/11/26/javascript-class/","excerpt":"","text":"완전정복 스터디 3권(웹동네)으로 공부 + 코드 리펙토링 :)해당 코드가 있는 Github 바로가기 Class함수가 특정 알고리즘을 포장하는 기술이라면, 클래스는 연관있는 변수와 함수만을 포장하는 기술입니다.클래스로 포장하는 이유는 객체 단위로 코드를 그룹화 하고 재사용하기 위함입니다. ES6에서는 class가 생겼지만 아직 이전 버전으로 개발을 많이 하고 있습니다. JavaScript에서 클래스처럼 사용할 수 있는 방법으로는 리터럴 방식 함수 방식 프로토타입 방식이 있는데 프로토타입 방식을 선호합니다.이유는 아래에 설명하겠습니다. 개념인스턴스 객체함수를 사용하려면 함수호출을 해야하듯, 클래스를 사용하려면 일반적으로 인스턴스를 생성해야 합니다.클래스 : 설계도, 인스턴스 : 설계도대로 만들어진 결과물 1var 인스턴스 = new 클래스이름(); 인스턴스가 만들어지면 클래스에서 포장해 놓은 프로퍼티와 메서드를 사용할 수 있게 됩니다. 프로퍼티 (변수)주로 객체 내부에서 사용하는 일반적인 정보, 객체 내부 함수(메서드)에서 처리한 결과값 저장 메서드 (함수)주로 객체의 프로퍼티 값을 변경하거나 알아내는 기능, 클래스의 기능들 생성자인스턴스가 만들어지면서 자동으로 호출되는 함수생성자의 주 용도는 프로퍼티 초기화 역할 담당 리터럴 방식으로 클래스 만들기123456789101112var 인스턴스 = &#123; 프로퍼티: 초기 값 // 프로퍼티 정의 ... 메서드: function() &#123; // 메서드 정의 ... &#125;, ...&#125;// 객체 외부에서 접근하기 인스턴스.프로퍼티;인스턴스.메서드(); 예 :1$(&quot;p&quot;).css(&quot;color&quot;, &quot;#f00&quot;); $인 함수를 매개변수 값 “p”로 호출$()함수에서 jQuery의 인스턴스를 만들어 리턴해주기 때문에 접근연산자 .를 이용해 jQuery가 제공하는 기능 중 css() 를 호출해 글자색을 변경할 수 있습니다. 특징리터럴 방식에서는 생성자가 존재하지 않습니다.리터럴 방식은 클래스를 정의함과 동시에 자동으로 인스턴스가 만들어집니다.단점 : 인스턴스를 하나만 만들 수 있습니다.주 용도 : 여러 개의 데이터를 묶어 값을 보관하거나 함수의 매개변수 값으로 전달할 때 주로 사용합니다. 123456var $ch = $(&quot;#ch&quot;);$ch.css(&#123; &quot;position&quot;: &quot;absolute&quot;, &quot;top&quot;: 100, &quot;left&quot;: 100&#125;); 함수 방식으로 클래스 만들기1234567891011121314// 일반 함수와 비교하기 위해 클래스이름은 대문자로 시작하도록 한다. (일반적인 규칙)function 클래스이름() &#123; this.프로퍼티 = 초기 값; // 프로퍼티 정의 ... this.메서드 = function() &#123; // 메서드 정의 ... &#125; ...&#125;// 인스턴스 생성var 인스턴스 = new 클래스이름(); // 메서드 호출인스턴스.메서드(); 특징생성자 : 클래스이름 자체가 생성자이며 인스턴스가 생성될 때 자동으로 호출됩니다.장점 : 코드 재사용 가능단점 : 인스턴스마다 메서드가 중복해서 생성됩니다. -&gt; 치명적인 단점 프로토타입 방식으로 클래스 만들기클래스를 만드는 방법 중 가장 강력한 방법jQuery도 프로토타입 방식으로 만들어졌다. 1234567891011121314function 클래스이름() &#123; this.프로퍼티 = 초개 값; ...&#125;// 메서드는 prototype이라는 프로퍼티에 정의한다. 클래스이름.prototype.메서드 = function() &#123; ...&#125;// 인스턴스 생성var 인스턴스 = new 클래스이름();// 메서드 호출인스턴스.메서드(); 특징코드 재사용모든 인스턴스는 prototype에 만들어져 있는 메서드를 공유해서 사용합니다.자바스크립트에서는 prototype을 이용해 상속을 구현합니다. 연관 링크JavaScript 프로토타입 방식으로 클래스 만들기 실습 - 탭 메뉴","categories":[{"name":"Front-End","slug":"Front-End","permalink":"https://sharryhong.github.io/categories/Front-End/"},{"name":"JavaScript","slug":"Front-End/JavaScript","permalink":"https://sharryhong.github.io/categories/Front-End/JavaScript/"}],"tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"https://sharryhong.github.io/tags/JavaScript/"},{"name":"Class","slug":"Class","permalink":"https://sharryhong.github.io/tags/Class/"},{"name":"ES5","slug":"ES5","permalink":"https://sharryhong.github.io/tags/ES5/"},{"name":"prototype","slug":"prototype","permalink":"https://sharryhong.github.io/tags/prototype/"}],"keywords":[{"name":"Front-End","slug":"Front-End","permalink":"https://sharryhong.github.io/categories/Front-End/"},{"name":"JavaScript","slug":"Front-End/JavaScript","permalink":"https://sharryhong.github.io/categories/Front-End/JavaScript/"}]},{"title":"CSS 속성 선택자를 활용하여 각 파일포맷별 아이콘 설정하기","slug":"project-css-icons","date":"2016-11-26T06:24:43.000Z","updated":"2017-01-02T08:41:05.878Z","comments":true,"path":"2016/11/26/project-css-icons/","link":"","permalink":"https://sharryhong.github.io/2016/11/26/project-css-icons/","excerpt":"","text":"해당 코드가 있는 Github 바로가기 | 결과화면 보기 속성 선택자주로 특수한 상황인 요소를 찾을 때 쓰입니다.[class=&quot;snack&quot;] : classname이 반드시 snack인 요소 선택[class=&quot;snack seeu&quot;] : classname이 반드시 snack seeu인 요소 선택[class*=&quot;snack&quot;] : classname에 snack이 있는 요소 선택[class^=&quot;snack&quot;] : classname이 snack으로 시작하는 요소 선택a[href$=&quot;.docx&quot;] : href 끝나는 값이 .docx인 a요소 선택a[href][title][data-href] : 제시된 3가지 속성을 모두 가지고 있는 a요소 선택 핵심 코드 설명html 파일 123&lt;li class=&quot;lecture-file-item&quot;&gt; &lt;a href=&quot;resources/file.aac&quot;&gt;file-aac&lt;/a&gt;&lt;/li&gt; 다운받을 파일명을 이용하여 background-image를 CSS에 미리 설정해 놓습니다. CSS 파일123456789a[href$=&quot;.aac&quot;] &#123; background-image: url(&quot;../img/icon-aac.png&quot;);&#125;...a[href^=&quot;http://&quot;][target=&quot;_blank&quot;],a[href^=&quot;https://&quot;][target=&quot;_blank&quot;] &#123; background-image: url(&quot;../img/external-link.png&quot;);&#125; ^ 는 처음 값 $ 는 마지막 값 a[href$=&quot;.aac&quot;] : href속성 마지막 값이 .aac인 a요소 선택 연관 링크CSS 선택자에 관한 공부 링크 바로가기","categories":[{"name":"Portfolio","slug":"Portfolio","permalink":"https://sharryhong.github.io/categories/Portfolio/"},{"name":"Free Project","slug":"Portfolio/Free-Project","permalink":"https://sharryhong.github.io/categories/Portfolio/Free-Project/"}],"tags":[{"name":"CSS","slug":"CSS","permalink":"https://sharryhong.github.io/tags/CSS/"},{"name":"선택자","slug":"선택자","permalink":"https://sharryhong.github.io/tags/선택자/"},{"name":"파일 포맷","slug":"파일-포맷","permalink":"https://sharryhong.github.io/tags/파일-포맷/"},{"name":"아이콘","slug":"아이콘","permalink":"https://sharryhong.github.io/tags/아이콘/"}],"keywords":[{"name":"Portfolio","slug":"Portfolio","permalink":"https://sharryhong.github.io/categories/Portfolio/"},{"name":"Free Project","slug":"Portfolio/Free-Project","permalink":"https://sharryhong.github.io/categories/Portfolio/Free-Project/"}]},{"title":"portfolio-선대인경제연구소 사이트","slug":"portfolio-sdi","date":"2016-11-25T06:04:13.000Z","updated":"2017-01-02T08:42:07.616Z","comments":true,"path":"2016/11/25/portfolio-sdi/","link":"","permalink":"https://sharryhong.github.io/2016/11/25/portfolio-sdi/","excerpt":"","text":"Hong’s portfolio - 선대인경제연구소 main 바로가기sub page01 | sub page02-블로그리스트 | sub page03-블로그내용 포트폴리오 개발 기간2015-12 특징 및 기능웹표준, 웹접근성 준수크로스 브라우징 : IE8 이상UI에 초점 사용 SkillHTML, CSS, jQuery, JavaScript, Photoshop 고려사항디비컷 사이트 중 UI, 공부에 도움될 만한 사이트를 선별하여 작업하였습니다.이미지로 되어있는 것을 가능하면 text와 font awesome등으로 만들었습니다. 2016년 12월 현재.. 코드 리펙토링하면 좋을 것들jQuery-UI 라이브러리를 사용한 것을 순수 JavaScript로 개발하면 성능에 더 좋을 것 같습니다.","categories":[{"name":"Portfolio","slug":"Portfolio","permalink":"https://sharryhong.github.io/categories/Portfolio/"},{"name":"Portfolio","slug":"Portfolio/Portfolio","permalink":"https://sharryhong.github.io/categories/Portfolio/Portfolio/"}],"tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"https://sharryhong.github.io/tags/JavaScript/"},{"name":"Portfolio","slug":"Portfolio","permalink":"https://sharryhong.github.io/tags/Portfolio/"},{"name":"HTML","slug":"HTML","permalink":"https://sharryhong.github.io/tags/HTML/"},{"name":"CSS","slug":"CSS","permalink":"https://sharryhong.github.io/tags/CSS/"},{"name":"jQuery","slug":"jQuery","permalink":"https://sharryhong.github.io/tags/jQuery/"}],"keywords":[{"name":"Portfolio","slug":"Portfolio","permalink":"https://sharryhong.github.io/categories/Portfolio/"},{"name":"Portfolio","slug":"Portfolio/Portfolio","permalink":"https://sharryhong.github.io/categories/Portfolio/Portfolio/"}]},{"title":"portfolio-SK 주식회사 사이트","slug":"portfolio-SK","date":"2016-11-25T05:40:43.000Z","updated":"2017-01-02T08:42:01.182Z","comments":true,"path":"2016/11/25/portfolio-SK/","link":"","permalink":"https://sharryhong.github.io/2016/11/25/portfolio-SK/","excerpt":"","text":"Hong’s portfolio - SK 주식회사 main 바로가기sub page01 | sub page02 | sub page03-게시판리스트 | sub page04-게시판내용 포트폴리오 개발 기간2015-11 특징 및 기능반응형 웹 : 데스크탑, 테블릿, 모바일에 대응하여 적절한 view를 보여줍니다.웹표준, 웹접근성 준수크로스 브라우징 : IE8 이상 사용 SkillHTML, CSS, jQuery, JavaScript, Photoshop 고려사항디자인대로 마크업, 의미있는 마크업을 하기 위해 노력하였습니다.개발단계를 고려하여 예상 가능한 부분을 미리 마크업하였습니다.(예 : 게시판의 제목이 길어질 경우)버튼, 게시판 등은 모듈화하여 재사용성을 높였습니다. 2016년 12월 현재.. 코드 리펙토링하면 좋을 것들반응형을 위한 미디어쿼리를 &lt;head&gt;에서 &lt;link media..&gt;로 설정하였는데, 이럴 경우 성능에 좋지 않는 다는 것을 알게되었습니다.이 부분을 css상에서 @media로 코드 리펙토링 하는 게 좋을 것 같습니다.","categories":[{"name":"Portfolio","slug":"Portfolio","permalink":"https://sharryhong.github.io/categories/Portfolio/"},{"name":"Portfolio","slug":"Portfolio/Portfolio","permalink":"https://sharryhong.github.io/categories/Portfolio/Portfolio/"}],"tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"https://sharryhong.github.io/tags/JavaScript/"},{"name":"Portfolio","slug":"Portfolio","permalink":"https://sharryhong.github.io/tags/Portfolio/"},{"name":"HTML","slug":"HTML","permalink":"https://sharryhong.github.io/tags/HTML/"},{"name":"CSS","slug":"CSS","permalink":"https://sharryhong.github.io/tags/CSS/"},{"name":"jQuery","slug":"jQuery","permalink":"https://sharryhong.github.io/tags/jQuery/"}],"keywords":[{"name":"Portfolio","slug":"Portfolio","permalink":"https://sharryhong.github.io/categories/Portfolio/"},{"name":"Portfolio","slug":"Portfolio/Portfolio","permalink":"https://sharryhong.github.io/categories/Portfolio/Portfolio/"}]}]}