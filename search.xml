[{"title":"JavaScript Array - find, every, some, reduce 내장 메소드","url":"https://sharryhong.github.io/2017/02/13/javascript-array03/","content":"<img src=\"/2017/02/13/javascript-array03/js.png\" alt=\"[JavaScript]\" title=\"[JavaScript]\">\n<h2 id=\"반복자-함수-2-find-every-some-reduce\"><a href=\"#반복자-함수-2-find-every-some-reduce\" class=\"headerlink\" title=\"반복자 함수 2. find, every, some, reduce\"></a>반복자 함수 2. find, every, some, reduce</h2><h4 id=\"목차\"><a href=\"#목차\" class=\"headerlink\" title=\"목차\"></a>목차</h4><p><a href=\"#find-메소드\">find 메소드</a></p>\n<h2 id=\"find-메소드\"><a href=\"#find-메소드\" class=\"headerlink\" title=\"find 메소드\"></a><a href=\"https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Array/find\" target=\"_blank\" rel=\"external\">find 메소드</a></h2><p>콜백함수가 요구하는 조건을 만족하는 첫번째 값을 하나 반환합니다. 없으면 undefined를 반환합니다. </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">arr.find(callback[, thisArg])</div></pre></td></tr></table></figure>\n<h5 id=\"예-특정-프로퍼티-값을-가지는-첫번재-객체를-찾는-함수를-완성해보세요\"><a href=\"#예-특정-프로퍼티-값을-가지는-첫번재-객체를-찾는-함수를-완성해보세요\" class=\"headerlink\" title=\"예: 특정 프로퍼티, 값을 가지는 첫번재 객체를 찾는 함수를 완성해보세요.\"></a>예: 특정 프로퍼티, 값을 가지는 첫번재 객체를 찾는 함수를 완성해보세요.</h5><p>주어진 문제 :<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">var ladders = [</div><div class=\"line\">  &#123; id: 1, height: 20 &#125;,</div><div class=\"line\">  &#123; id: 3, height: 25 &#125;</div><div class=\"line\">];</div><div class=\"line\"></div><div class=\"line\">function findWhere(array, criteria) &#123;</div><div class=\"line\">  // array 중에서 criteria 에 해당하는 첫번째 객체를 찾아 반환하는 함수 만들기 </div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">findWhere(ladders, &#123; height: 25 &#125;);</div></pre></td></tr></table></figure></p>\n<p>result: <code>{ id:3, height: 25 }</code> 이어야 합니다. </p>\n<p>나의 문제 풀이 :<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">function findWhere(array, criteria) &#123;</div><div class=\"line\"></div><div class=\"line\">  var key = Object.keys(criteria)[0]; </div><div class=\"line\">  // criteria = &#123; height: 25 &#125;</div><div class=\"line\">  // Object.keys(criteria)[0] = height</div><div class=\"line\"></div><div class=\"line\">  return array.find(function(arr)&#123;</div><div class=\"line\">  // ladders의 height값이 25인 것을 찾아 반환한다. </div><div class=\"line\">    return arr[key] === criteria[key];</div><div class=\"line\">  &#125;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/keys\" target=\"_blank\" rel=\"external\">Object.keys(obj)</a> : obj에 들어가는 객체의 프로퍼티 name들을 배열로 반환합니다. </p>\n<p><sup><a href=\"#목차\">(목차로 돌아가기)</a></sup></p>\n"},{"title":"JavaScript Array - forEach, map, filter 내장 메소드","url":"https://sharryhong.github.io/2017/02/13/javascript-array02/","content":"<img src=\"/2017/02/13/javascript-array02/js.png\" alt=\"[JavaScript]\" title=\"[JavaScript]\">\n<h2 id=\"반복자-함수-1-forEach-map-filter\"><a href=\"#반복자-함수-1-forEach-map-filter\" class=\"headerlink\" title=\"반복자 함수 1. forEach, map, filter\"></a>반복자 함수 1. forEach, map, filter</h2><h4 id=\"목차\"><a href=\"#목차\" class=\"headerlink\" title=\"목차\"></a>목차</h4><p><a href=\"#forEach-메소드\">forEach 메소드</a><br><a href=\"#map-메소드\">map 메소드</a><br><a href=\"#filter-메소드\">filter 메소드</a></p>\n<h2 id=\"forEach-메소드\"><a href=\"#forEach-메소드\" class=\"headerlink\" title=\"forEach 메소드\"></a><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach\" target=\"_blank\" rel=\"external\">forEach 메소드</a></h2><p>배열의 각 요소에 대해 한번씩 순서대로 콜백함수를 실행합니다. </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">arr.forEach(callback[, thisArg])</div></pre></td></tr></table></figure>\n<p><strong>callback 함수</strong> : 배열의 각 요소에 대해 실행할 함수로 다음 세 가지 인수를 가집니다.<br>1) currentValue : 배열의 요소 중, 현재 처리되고 있는 요소<br>2) index : 현재 처리되는 요소의 배열 내 인덱스<br>3) array : forEach 메소드가 적용되는 본래 배열</p>\n<p>thisArg : 선택항목. callback을 실행할 때 this로 사용되는 값.</p>\n<h5 id=\"예-forEach를-사용하여-images-각-요소의-areas-넓이-height-width-를-계산하여-areas-배열에-넣어보세요\"><a href=\"#예-forEach를-사용하여-images-각-요소의-areas-넓이-height-width-를-계산하여-areas-배열에-넣어보세요\" class=\"headerlink\" title=\"예) forEach를 사용하여 images 각 요소의 areas(넓이) = height * width 를 계산하여 areas 배열에 넣어보세요.\"></a>예) forEach를 사용하여 images 각 요소의 areas(넓이) = height * width 를 계산하여 areas 배열에 넣어보세요.</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">var images = [</div><div class=\"line\">  &#123; height: 10, width: 30 &#125;,</div><div class=\"line\">  &#123; height: 20, width: 90 &#125;,</div><div class=\"line\">  &#123; height: 54, width: 32 &#125;</div><div class=\"line\">];</div><div class=\"line\">var areas = [];</div></pre></td></tr></table></figure>\n<p>forEach 메소드를 사용함으로서 좀 더 명시적으로 코드구현을 할 수 있습니다.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">function imgErea(img) &#123;</div><div class=\"line\">\tareas.push(img.height * img.width);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">images.forEach(imgErea);</div></pre></td></tr></table></figure></p>\n<p><sup><a href=\"#목차\">(목차로 돌아가기)</a></sup></p>\n<h2 id=\"map-메소드\"><a href=\"#map-메소드\" class=\"headerlink\" title=\"map 메소드\"></a><a href=\"https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Array/map\" target=\"_blank\" rel=\"external\">map 메소드</a></h2><p>배열의 각각의 요소에 대해 한번씩 순서대로 콜백함수를 실행하고, 그 결과를 모아서 새로운 배열을 반환합니다.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">arr.map(callback[, thisArg])</div></pre></td></tr></table></figure>\n<p><strong>callback 함수</strong> : 새로운 배열 요소를 생성하는 함수로 다음 세 가지 인수를 가집니다.<br>1) currentValue : 배열의 요소 중, 현재 처리되고 있는 요소<br>2) index : 현재 처리되는 요소의 배열 내 인덱스<br>3) array : map 메소드가 적용되는 본래 배열</p>\n<p>thisArg : 선택항목. callback을 실행할 때 this로 사용되는 값. 기본값은 Window 객체.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">var ages = [10, 21, 17, 34, 19];</div><div class=\"line\">var adult = ages.map(function(age)&#123;</div><div class=\"line\">    return age &gt;= 18;</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">console.log(adult);</div><div class=\"line\"></div><div class=\"line\">// 결과</div><div class=\"line\">[false, true, false, true, true]</div></pre></td></tr></table></figure>\n<h5 id=\"예-map을-사용하여-css속성과-값이-객체로-담겨져-있는-배열에서-해당-css-속성-값만-저장하는-배열을-만들어보세요\"><a href=\"#예-map을-사용하여-css속성과-값이-객체로-담겨져-있는-배열에서-해당-css-속성-값만-저장하는-배열을-만들어보세요\" class=\"headerlink\" title=\"예) map을 사용하여 css속성과 값이 객체로 담겨져 있는 배열에서, 해당 css 속성 값만 저장하는 배열을 만들어보세요.\"></a>예) map을 사용하여 css속성과 값이 객체로 담겨져 있는 배열에서, 해당 css 속성 값만 저장하는 배열을 만들어보세요.</h5><p>매개변수 1 : css 속성과 값이 객체로 담겨져 있는 배열, 매개변수 2 : css 속성 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">var paints = [ &#123; color: &apos;red&apos; &#125;, &#123; color: &apos;blue&apos; &#125;, &#123; color: &apos;yellow&apos; &#125;];</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">function pluck(array, property) &#123;</div><div class=\"line\"></div><div class=\"line\">  var proValue = array.map( (obj) =&gt; &#123;</div><div class=\"line\">    return obj[property];</div><div class=\"line\">  &#125;);</div><div class=\"line\"></div><div class=\"line\">  return proValue;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">pluck(paints, &apos;color&apos;); // returns [&apos;red&apos;, &apos;yellow&apos;, &apos;blue&apos;];</div></pre></td></tr></table></figure>\n<p><sup><a href=\"#목차\">(목차로 돌아가기)</a></sup></p>\n<h2 id=\"filter-메소드\"><a href=\"#filter-메소드\" class=\"headerlink\" title=\"filter 메소드\"></a><a href=\"https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Array/filter\" target=\"_blank\" rel=\"external\">filter 메소드</a></h2><p>배열 내 각 요소에 대해 제공된 콜백함수에서 true를 반환하는 모든 값이 있는 새로운 배열을 반환합니다.<br>즉, 콜백 테스트를 통과한 배열 요소만 반환되고, 통과하지 못한 배열 요소는 건너뛰어 새로운 배열에 포함되지 않습니다. </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">var new_array = arr.filter(callback[, thisArg])</div></pre></td></tr></table></figure>\n<p><strong>callback 함수</strong> : 배열의 각 요소에 대해 실행할 함수로 다음 세 가지 인수를 가집니다.<br>1) currentValue : 배열의 요소 중, 현재 처리되고 있는 요소<br>2) index : 현재 처리되는 요소의 배열 내 인덱스<br>3) array : filter 메소드가 적용되는 본래 배열</p>\n<p>thisArg : 선택항목. callback을 실행할 때 this로 사용되는 값.<br>return값 : 테스트를 통과한 요소가 있는 새로운 배열 </p>\n<h5 id=\"예-댓글의-postId와-포스팅-id가-같은-것-걸러내기\"><a href=\"#예-댓글의-postId와-포스팅-id가-같은-것-걸러내기\" class=\"headerlink\" title=\"예) 댓글의 postId와 포스팅 id가 같은 것 걸러내기\"></a>예) 댓글의 postId와 포스팅 id가 같은 것 걸러내기</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">var post = &#123; id: 5, title: &apos;for front-end&apos;  &#125;;</div><div class=\"line\">var comments = [</div><div class=\"line\">  &#123; postId: 4, content: &apos;JavaScript first and web framework&apos; &#125;,</div><div class=\"line\">  &#123; postId: 5, content: &apos;HTML, CSS&apos; &#125;,</div><div class=\"line\">  &#123; postId: 5, content: &apos;server&apos; &#125;</div><div class=\"line\">];</div><div class=\"line\"></div><div class=\"line\">function commentsPost(post, comments) &#123;</div><div class=\"line\">  return comments.filter(function(comment) &#123;</div><div class=\"line\">    return comment.postId === post.id;</div><div class=\"line\">  &#125;);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">commentsPost(post, comments); </div><div class=\"line\">// [&#123;&quot;postId&quot;:5,&quot;content&quot;:&quot;HTML, CSS&quot;&#125;,&#123;&quot;postId&quot;:5,&quot;content&quot;:&quot;server&quot;&#125;]</div></pre></td></tr></table></figure>\n<p><sup><a href=\"#목차\">(목차로 돌아가기)</a></sup></p>\n<h3 id=\"연관-포스팅\"><a href=\"#연관-포스팅\" class=\"headerlink\" title=\"연관 포스팅\"></a>연관 포스팅</h3><p><a href=\"https://sharryhong.github.io/2017/01/07/javascript-array/\">JavaScript Array 내장 프로퍼티, 메소드</a></p>\n"},{"title":"스터디그룹모임 - JavaScript의 this","url":"https://sharryhong.github.io/2017/02/12/javascript-study03/","content":"<img src=\"/2017/02/12/javascript-study03/study_group.jpg\" alt=\"[스터디그룹 홧팅!! ^^]\" title=\"[스터디그룹 홧팅!! ^^]\">\n<blockquote>\n<p>이번주에 우리 스터디모임에서 나눈 주제는 크로스브라우징, JS ES6 - Arrow Function, 원시데이터와 참조데이터였습니다.<br>Arrow Function에 대해서는 제가 발표자였는데, <strong>JavaScript의 this</strong>에 대해 좀 더 자세하게 다뤄야할 필요성이 느껴지더라고요. 잘 알고있다고 생각했는데 클래스, 인스턴스, 메소드 등의 this에 대해서 정리가 필요할 것 같았습니다. </p>\n</blockquote>\n<h2 id=\"this란\"><a href=\"#this란\" class=\"headerlink\" title=\"this란?\"></a>this란?</h2><p>일반적으로 메소드를 호출한 객체가 저장되어 있는 속성입니다.<br>하지만 JavaScript의 this 속성은 메소드를 호출할 때 뿐 아니라, 일반 함수를 호출할 때, 이벤트 리스너가 호출될 때, 중첩 함수에서 등에서의 this가 달라지게 됩니다.<br>간단하게 표로 나타내면.. </p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">this가 만들어지는 경우</th>\n<th style=\"text-align:left\">this 값</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">1_일반 함수</td>\n<td style=\"text-align:left\">window</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">2_중첩 함수</td>\n<td style=\"text-align:left\">window</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">3_이벤트</td>\n<td style=\"text-align:left\">이벤트를 발생시킨 객체</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">4_메소드</td>\n<td style=\"text-align:left\">메소드를 호출한 객체</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">5_메소드 내부의 중첩함수</td>\n<td style=\"text-align:left\">window</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"1-일반-함수에서의-this\"><a href=\"#1-일반-함수에서의-this\" class=\"headerlink\" title=\"1_일반 함수에서의 this\"></a>1_일반 함수에서의 this</h3><h3 id=\"참고-자료\"><a href=\"#참고-자료\" class=\"headerlink\" title=\"참고 자료\"></a>참고 자료</h3><p>웹 프론트엔드 개발자를 위한, 자바스크립트+jQuery 완전정복 스터디 - 김춘경(딴동네) </p>\n"},{"title":"JavaScript ES6 문법 - class","url":"https://sharryhong.github.io/2017/02/06/javascript-es6-class/","content":"<img src=\"/2017/02/06/javascript-es6-class/js.png\" alt=\"[JavaScript]\" title=\"[JavaScript]\">\n<h2 id=\"Class-클래스\"><a href=\"#Class-클래스\" class=\"headerlink\" title=\"Class 클래스\"></a>Class 클래스</h2><p>자바스크립트 ES5 문법으로 class를 만들기 위해서 prototype 상속을 이용하는 방법을 사용하였습니다. <a href=\"https://sharryhong.github.io/2016/11/26/javascript-class/\">해당 포스팅 바로가기</a><br>ES6 문법에서는 class 문법을 지원함으로서 이를 좀 더 쉽게 만들게 해줍니다. </p>\n<h4 id=\"ES5-와-ES6-비교\"><a href=\"#ES5-와-ES6-비교\" class=\"headerlink\" title=\"ES5 와 ES6 비교\"></a>ES5 와 ES6 비교</h4><p>1_ ES5<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">// Person 클래스. 생성자 함수</div><div class=\"line\">var Person = function(name, yearofBirth, job) &#123;</div><div class=\"line\">\t// 프로퍼티 </div><div class=\"line\">\tthis.name = name;</div><div class=\"line\">\tthis.yearofBirth = yearofBirth;</div><div class=\"line\">\tthis.job = job;</div><div class=\"line\">&#125;</div><div class=\"line\">// 메소드</div><div class=\"line\">Person.prototype.calculateAge = function() &#123;</div><div class=\"line\">\tvar age = new Date().getFullYear() - this.yearofBirth;</div><div class=\"line\">\tconsole.log(age);</div><div class=\"line\">&#125;</div><div class=\"line\">// 클래스 인스턴스</div><div class=\"line\">var john = new Person(&apos;John&apos;, 1980, &apos;teacher&apos;);</div><div class=\"line\">john.calculateAge();</div></pre></td></tr></table></figure></p>\n<p>2_ES6<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">// Person 클래스 </div><div class=\"line\">class Person &#123;</div><div class=\"line\">\t// 생성자 메소드 : 초기 프로퍼티 설정 </div><div class=\"line\">\tconstructor (name, yearofBirth, job) &#123;</div><div class=\"line\">\t\t// 프로퍼티   </div><div class=\"line\">\t\tthis.name = name;</div><div class=\"line\">\t\tthis.yearofBirth = yearofBirth;</div><div class=\"line\">\t\tthis.job = job;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t// 메소드</div><div class=\"line\">\tcalculateAge() &#123;</div><div class=\"line\">\t\tlet age = new Date().getFullYear() - this.yearofBirth;</div><div class=\"line\">\t\tconsole.log(age);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">// 클래스 인스턴스 </div><div class=\"line\">let john = new Person(&apos;John&apos;, 1980, &apos;teacher&apos;);</div><div class=\"line\">john.calculateAge();</div></pre></td></tr></table></figure></p>\n<p>static 메소드 : 클래스 인스턴스에 의해 상속되지 않는 메소드<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">// 클래스 내부에서 </div><div class=\"line\">class Person &#123;</div><div class=\"line\">\t// static 메소드</div><div class=\"line\">\tstatic greeting() &#123;</div><div class=\"line\">\t\tconsole.log(&apos;hi!&apos;);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">// 클래스 인스턴스 </div><div class=\"line\">let john = new Person(&apos;John&apos;, 1980, &apos;teacher&apos;);</div><div class=\"line\"></div><div class=\"line\">Person.greeting(); \t// &apos;hi!&apos;</div><div class=\"line\">john.greeting(); \t// error</div></pre></td></tr></table></figure></p>\n<h4 id=\"특징\"><a href=\"#특징\" class=\"headerlink\" title=\"특징\"></a>특징</h4><p>1) class 정의는 <strong>호이스팅(hoisting) 되지 않습니다</strong>. 따라서 클래스를 먼저 구현하고 사용해야합니다. </p>\n<p>2) class에 메소드는 추가할 수 있지만 프로퍼티는 추가할 수 없습니다.<br>객체 인스턴스를 통해 상속된 프로퍼티는 좋은 코드가 아니기 때문에 문제가 되지 않습니다. </p>\n<h2 id=\"상속-구현\"><a href=\"#상속-구현\" class=\"headerlink\" title=\"상속 구현\"></a>상속 구현</h2><p>ES6, ES6모두 prototype 체인의 방법으로 상속이 구현됩니다.<br>ES6에서는 기존 객체지향 언어에서 제공하는 키워드인 class 등을 사용함으로써 좀 더 접근하기 쉬워졌습니다.</p>\n<p>superclass(수퍼클래스, 부모클래스), subclass(서브클래스, 자식클래스)</p>\n<p>1_ ES5</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">// 자식클래스 </div><div class=\"line\">var Athlete = function(name, yearofBirth, job, olympics, medals) &#123;</div><div class=\"line\">\tPerson.call(this, name, yearofBirth, job);</div><div class=\"line\">\tthis.olympics = olympics;</div><div class=\"line\">\tthis.medals = medals;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">// 상속 구현 1) : Object.create() 사용하는 방법 </div><div class=\"line\">Athlete.prototype = Object.create(Person.prototype);</div><div class=\"line\"></div><div class=\"line\">// 상속 구현 2) : 자식클래스의 prototype에 부모클래스의 인스턴스를 대입하는 방법</div><div class=\"line\">Athlete.prototype = new Person();</div><div class=\"line\">Athlete.prototype.constructor = Athlete;</div><div class=\"line\"></div><div class=\"line\">// 인스턴스 </div><div class=\"line\">var johnAthlete = new Athlete(&apos;John&apos;, 1980, &apos;swimmer&apos;, 3, 10);</div><div class=\"line\"></div><div class=\"line\">// 부모클래스의 메소드 사용</div><div class=\"line\">johnAthlete.calculateAge();</div></pre></td></tr></table></figure>\n<p>Person.call(this) : 부모클래스인 Person 생성자를 호출합니다.<br><a href=\"https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Function/call\" target=\"_blank\" rel=\"external\">call() - MDN</a></p>\n<p><a href=\"http://unikys.tistory.com/320\" target=\"_blank\" rel=\"external\">상속 new와 Object.create</a><br><a href=\"https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Object/create\" target=\"_blank\" rel=\"external\">Object.create() - MDN</a></p>\n<p>2_ ES6 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">// 자식클래스</div><div class=\"line\">class Athlete extends Person &#123; // extends : 상속시 사용하는 키워드</div><div class=\"line\">\tconstructor(name, yearofBirth, job, olympics, medals) &#123;</div><div class=\"line\">\t\t// super : call the superclass. 부모의 생성자 호출</div><div class=\"line\">\t\tsuper(name, yearofBirth, job);</div><div class=\"line\">\t\tthis.olympics = olympics;</div><div class=\"line\">\t\tthis.medals = medals;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t// Athlete의 메소드 </div><div class=\"line\">\twonMedal() &#123;</div><div class=\"line\">\t\tthis.medals++;</div><div class=\"line\">\t\tconsole.log(this.medals);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\">// Athlete의 인스턴스 </div><div class=\"line\">let johnAthlete = new Athlete(&apos;John&apos;, 1980, &apos;swimmer&apos;, 3, 10);</div><div class=\"line\">// 부모클래스의 메소드 사용</div><div class=\"line\">johnAthlete.calculateAge();</div></pre></td></tr></table></figure>\n<p>위와 같이 ES6에서 class, extends, super 등의 키워드를 제공함으로서 좀 더 편하게 상속 기능을 사용할 수 있습니다. </p>\n<p>super(); = superclass.constructor()</p>\n<h4 id=\"예제-추가-Monster-Game-Class-만들기\"><a href=\"#예제-추가-Monster-Game-Class-만들기\" class=\"headerlink\" title=\"예제 추가 : Monster Game Class 만들기\"></a>예제 추가 : Monster Game Class 만들기</h4><blockquote>\n<p>Monster 게임의 기본 클래스를 세팅해봅니다.<br>superclass는 Monster이며, 프로퍼티엔 name과 health(체력)이 있습니다.<br>체력은 100으로 초기화합니다. 생성자는 name 프로퍼티를 가진 option 객체로 호출됩니다.<br>subclass에 Snake 라는 클래스를 만듭니다. Snake에는 bite라는 기능(메소드)가 있습니다. 이 메소드의 유일한 인수(argument)는 Snake의 인스턴스입니다. (뱀이 뱀을 물다.) 물릴경우 체력이 -10 됩니다. </p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">class Monster &#123;</div><div class=\"line\">  constructor(options)&#123;</div><div class=\"line\">      this.name = options.name;</div><div class=\"line\">      // health는 100으로 초기화 되어있다.</div><div class=\"line\">      this.health = 100;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">class Snake extends Monster &#123;</div><div class=\"line\">  // bite 메소드는 Snake class의 인스턴스를 매개변수로 받아 </div><div class=\"line\">  // health값을 -10 한다. </div><div class=\"line\">  bite(snake) &#123;</div><div class=\"line\">      return snake.health -= 10;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">let snake = new Snake(&#123;name: &apos;snakeya&apos;&#125;);</div><div class=\"line\">snake; // &#123;name: &apos;snakeya&apos;, health: 100&#125;</div><div class=\"line\">snake.bite(snake); // 90 (snake.healt)</div></pre></td></tr></table></figure>\n<h3 id=\"참고-자료\"><a href=\"#참고-자료\" class=\"headerlink\" title=\"참고 자료\"></a>참고 자료</h3><p><a href=\"https://www.udemy.com/the-complete-javascript-course/learn/v4/overview\" target=\"_blank\" rel=\"external\">Udemy - The Complete JavaScript Course</a><br><a href=\"https://www.udemy.com/javascript-es6-tutorial\" target=\"_blank\" rel=\"external\">Udemy - ES6 Javascript: The Complete Developer’s Guide</a></p>\n<h3 id=\"연관-포스팅\"><a href=\"#연관-포스팅\" class=\"headerlink\" title=\"연관 포스팅\"></a>연관 포스팅</h3><p><a href=\"https://sharryhong.github.io/2016/11/26/javascript-class/\">JavaScript Class (ES5)</a></p>\n<h3 id=\"ES6-포스팅\"><a href=\"#ES6-포스팅\" class=\"headerlink\" title=\"ES6 포스팅\"></a>ES6 포스팅</h3><p><a href=\"https://sharryhong.github.io/2016/12/25/javascript-es6/\">변수선언 let, const</a><br><a href=\"https://sharryhong.github.io/2017/02/02/javascript-es6-blocks/\">Blocks and IIFEs</a><br><a href=\"https://sharryhong.github.io/2017/02/03/javascript-es6-string/\">Strings 문자열표기법 등</a><br><a href=\"https://sharryhong.github.io/2016/12/26/javascript-es6-arrow-functions/\">Arrow functions</a><br><a href=\"https://sharryhong.github.io/2017/02/06/javascript-es6-class/\">Class</a></p>\n"},{"title":"JavaScript 객체지향 - 캡슐화","url":"https://sharryhong.github.io/2017/02/06/javascript-oop03/","content":"<img src=\"/2017/02/06/javascript-oop03/oop.jpg\" alt=\"[JavaScript OOP]\" title=\"[JavaScript OOP]\">\n<h2 id=\"캡슐화-encapsulation\"><a href=\"#캡슐화-encapsulation\" class=\"headerlink\" title=\"캡슐화 (encapsulation)\"></a>캡슐화 (encapsulation)</h2><p>객체의 중요한 프로퍼티(데이터)와 메소드(기능)를 외부에서 접근하지 못하게 하는 작업을 말합니다. </p>\n<p>일반적으로 객체 내부의 프로퍼티, 메소드는 1)객체 내부, 2)객체 외부, 3)자식 객체에서 접근해 사용합니다. </p>\n<p>ES5 소스 예시<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">// MyParent 클래스</div><div class=\"line\">function MyParent() &#123;</div><div class=\"line\">\tthis.property01 = 10; </div><div class=\"line\">&#125;</div><div class=\"line\">// 메소드 </div><div class=\"line\">MyParent.prototype.method01 = function() &#123;</div><div class=\"line\">\tthis.property01 = 100;  // 1)객체 내부에서 접근 </div><div class=\"line\">&#125;</div><div class=\"line\">// 인스턴스 생성</div><div class=\"line\">var my01 = new MyParent();</div><div class=\"line\">my01.method01(); \t\t// 2)객체 외부에서 접근 </div><div class=\"line\"></div><div class=\"line\">// MyChild 클래스  </div><div class=\"line\">function MyChild() &#123;</div><div class=\"line\">&#125;</div><div class=\"line\">// 상속</div><div class=\"line\">MyChild.prototype = new MyParent();</div><div class=\"line\">MyChild.prototype.method02 = function() &#123;</div><div class=\"line\">\tthis.method01(); \t// 3) 자식 객체에서 부모 메소드 접근 </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>객체지향 프로그래밍 에서 </p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">접근 지정자</th>\n<th style=\"text-align:center\">객체 내부 접근</th>\n<th style=\"text-align:center\">객체 외부 접근</th>\n<th style=\"text-align:center\">자식 객체 접근</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">public</td>\n<td style=\"text-align:center\">O</td>\n<td style=\"text-align:center\">O</td>\n<td style=\"text-align:center\">O</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">protected</td>\n<td style=\"text-align:center\">O</td>\n<td style=\"text-align:center\">X</td>\n<td style=\"text-align:center\">O</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">private</td>\n<td style=\"text-align:center\">O</td>\n<td style=\"text-align:center\">X</td>\n<td style=\"text-align:center\">X</td>\n</tr>\n</tbody>\n</table>\n<p>자바스크립트 ES5에서는 위와 같은 접근지정자 문법을 지원하지 않기 때문에 아래와 같이 표현합니다.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">function MyClass() &#123;</div><div class=\"line\"></div><div class=\"line\">\t// public 프로퍼티</div><div class=\"line\">\tthis.property01 = 10; </div><div class=\"line\"></div><div class=\"line\">\t// private, protected 프로퍼티</div><div class=\"line\">\tthis._proterty02 = 20;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">// public 메소드 </div><div class=\"line\">MyClass.prototype.method01 = function() &#123;&#125;</div><div class=\"line\"></div><div class=\"line\">// private, protected 메소드</div><div class=\"line\">MyClass.prototype._method02 = function() &#123;&#125;</div></pre></td></tr></table></figure></p>\n<p>자바스크립트에서는 public만 지원하기 때문에 위와같이 약속하여 사용할 뿐, 객체 외부에서 접근이 가능합니다. </p>\n"},{"title":"JavaScript 객체지향 - 추상화","url":"https://sharryhong.github.io/2017/02/05/javascript-oop02/","content":"<img src=\"/2017/02/05/javascript-oop02/oop.jpg\" alt=\"[JavaScript OOP]\" title=\"[JavaScript OOP]\">\n<h2 id=\"추상화-abstraction\"><a href=\"#추상화-abstraction\" class=\"headerlink\" title=\"추상화 (abstraction)\"></a>추상화 (abstraction)</h2><p>객체의 <strong>프로퍼티와 메소드를 정의</strong> 하는 작업으로, 이름을 작성하는 선언 부분만 만들 뿐 구현부분은 작업하지 않습니다. </p>\n<p>자바스크립트에서는 인터페이스와 추상클래스를 제공하지 않기 때문에 클래스만을 이용해서 추상화 작업을 해야합니다. </p>\n<h4 id=\"예-이미지-슬라이더-추상화-하기\"><a href=\"#예-이미지-슬라이더-추상화-하기\" class=\"headerlink\" title=\"예: 이미지 슬라이더 추상화 하기\"></a>예: 이미지 슬라이더 추상화 하기</h4><table>\n<thead>\n<tr>\n<th style=\"text-align:left\">ImgSlider 프로퍼티</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">현재 선택된 이미지 인덱스</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">이미지 목록</td>\n</tr>\n</tbody>\n</table>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">ImgSlider 메소드</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">자동 플레이 기능 시작</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">자동 플레이 기능 멈춤</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">다음 이미지 이동</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">이전 이미지 이동</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">index번째 이미지 이동</td>\n</tr>\n</tbody>\n</table>\n<p>위를 소스로 표현하면 (ES5)<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">function ImgSlider(selector) &#123;</div><div class=\"line\">\tthis.selectIndex;</div><div class=\"line\">\tthis.imgList;</div><div class=\"line\">&#125;</div><div class=\"line\">ImgSlider.prototype.startAutoPlay = function() &#123;&#125;</div><div class=\"line\">ImgSlider.prototype.stopAutoPlay = function() &#123;&#125;</div><div class=\"line\">ImgSlider.prototype.nextImg = function() &#123;&#125;</div><div class=\"line\">ImgSlider.prototype.prevImg = function() &#123;&#125;</div><div class=\"line\">ImgSlider.prototype.setImgAt = function(index) &#123;&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"참고-자료\"><a href=\"#참고-자료\" class=\"headerlink\" title=\"참고 자료\"></a>참고 자료</h3><p>웹 프론트엔드 개발자를 위한, 자바스크립트+jQuery 완전정복 스터디 - 김춘경(딴동네)</p>\n<h2 id=\"관련-포스팅\"><a href=\"#관련-포스팅\" class=\"headerlink\" title=\"관련 포스팅\"></a>관련 포스팅</h2><p><a href=\"https://sharryhong.github.io/2017/02/02/javascript-oop01/\">객체지향 프로그래밍 개념</a></p>\n"},{"title":"스터디그룹모임 - Event(이벤트)","url":"https://sharryhong.github.io/2017/02/04/javascript-study02/","content":"<img src=\"/2017/02/04/javascript-study02/study_group.jpg\" alt=\"[스터디그룹 홧팅!! ^^]\" title=\"[스터디그룹 홧팅!! ^^]\">\n<blockquote>\n<p>설연휴로 인해 2주만에 만난 스터디모임 ^^ 알차고 재밋었던 시간이었습니다~<br>이번엔 <strong>이벤트 버블링</strong>, <strong>이벤트 객체</strong>, <strong>이벤트 위임</strong>, ES6, 알고리즘 등을 나눴는데,<br>그 중 이벤트에 대해 포스팅해보려합니다. </p>\n</blockquote>\n<h3 id=\"이벤트-버블링-Event-Bubbling\"><a href=\"#이벤트-버블링-Event-Bubbling\" class=\"headerlink\" title=\"이벤트 버블링 (Event Bubbling)\"></a>이벤트 버블링 (Event Bubbling)</h3><p>이벤트 버블링이란 자식노드에서 부모노드 순으로 이벤트가 전파되는 것으로, 반대방향으로 전파되는 것은 캡쳐링이라고 합니다.<br>일반적으로 이벤트는 버블링됩니다. </p>\n<p><img src=\"01.png\" alt=\"Event Capturing &amp; Bubbling\"></p>\n<p>이벤트 버블링을 막으려면 stopPropagation() 메소드를 사용해야합니다.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">document.querySelector(&quot;.cbtn&quot;).addEventListener(&quot;click&quot;, doSth);</div><div class=\"line\">function doSth(e) &#123;</div><div class=\"line\">\te.stopPropagation();</div><div class=\"line\"></div><div class=\"line\">\t// do something</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"이벤트-객체\"><a href=\"#이벤트-객체\" class=\"headerlink\" title=\"이벤트 객체\"></a>이벤트 객체</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">eventTarget.addEventListener(&quot;click&quot;, function(e)&#123;&#125;);</div></pre></td></tr></table></figure>\n<p>위의 코드에서 콜백함수의 매개변수로 들어간 e는 이벤트 객체를 말합니다. </p>\n<h5 id=\"이벤트-객체의-주요-프로퍼티와-메소드\"><a href=\"#이벤트-객체의-주요-프로퍼티와-메소드\" class=\"headerlink\" title=\"이벤트 객체의 주요 프로퍼티와 메소드\"></a>이벤트 객체의 주요 프로퍼티와 메소드</h5><p><strong>event.target</strong> : 현재 이벤트가 발생한 요소<br><strong>event.currentTarget</strong> : 현재 이벤트가 발생한 DOM요소로 일반적으로 this와 같습니다.<br><strong>event.preventDefault()</strong> : 현재 이벤트의 기본 동작을 중단합니다.<br><strong>event.stopPropagation();</strong> : 현재 이벤트가 상위로 전파되지 않도록 중단합니다. </p>\n<h3 id=\"이벤트-위임-Event-Delegation\"><a href=\"#이벤트-위임-Event-Delegation\" class=\"headerlink\" title=\"이벤트 위임 (Event Delegation)\"></a>이벤트 위임 (Event Delegation)</h3><p>위에서 살펴봤듯이 이벤트는 기본적으로 버블링되어 전파됩니다.<br>이런 성질을 이용해서 자식 요소가 자주 바뀌거나 너무 많을 경우, 공통된 부모 요소에 이벤트를 걸어두고 처리하는 방법을 말합니다. </p>\n"},{"title":"JavaScript ES6 문법 - Strings 문자열표기법 등","url":"https://sharryhong.github.io/2017/02/03/javascript-es6-string/","content":"<img src=\"/2017/02/03/javascript-es6-string/js.png\" alt=\"[JavaScript]\" title=\"[JavaScript]\">\n<h2 id=\"Template-Strings\"><a href=\"#Template-Strings\" class=\"headerlink\" title=\"Template Strings\"></a>Template Strings</h2><p>ES5에서 문자열을 변수, 함수와 함께 쓰고자 할 때 <code>+</code>기호를 씁니다.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">let firstName = &apos;John&apos;;</div><div class=\"line\">let lastName = &apos;Smith&apos;;</div><div class=\"line\">const yearOfBirth = 1990;</div><div class=\"line\"></div><div class=\"line\">function calcAge(year) &#123;</div><div class=\"line\">\treturn 2017 - year;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">// ES5</div><div class=\"line\">console.log(&apos;This is &apos; + firstName + &apos; &apos;+ lastName +&apos;. He was born in &apos; + yearOfBirth + &apos;. Today, he is &apos; + calcAge(yearOfBirth) + &apos; years old.&apos;);</div></pre></td></tr></table></figure></p>\n<p>이처럼 때로는 번거롭게 코딩해야하는데요, </p>\n<p>ES6에서는 <code>${value(변수, 함수 등)}</code>를 제공함으로서 보다 편리하게 코딩할 수 있습니다.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">// ES6</div><div class=\"line\">console.log(`This is $&#123;firstName&#125; $&#123;lastName&#125;. He was born in $&#123;yearOfBirth&#125;. Today, he is $&#123;calcAge(yearOfBirth)&#125; years old.`);</div></pre></td></tr></table></figure></p>\n<h3 id=\"String-메소드들\"><a href=\"#String-메소드들\" class=\"headerlink\" title=\"String 메소드들\"></a>String 메소드들</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">const fullName = `$&#123;firstName&#125; $&#123;lastName&#125;`;</div><div class=\"line\"></div><div class=\"line\">console.log(fullName.startsWith(&apos;J&apos;)); \t// true</div><div class=\"line\">console.log(fullName.endsWith(&apos;th&apos;));\t// true</div><div class=\"line\">console.log(fullName.includes(&apos; &apos;));\t// true</div><div class=\"line\">console.log(fullName.repeat(3));\t// John SmithJohn SmithJohn Smith</div><div class=\"line\">console.log(`$&#123;fullName&#125;, `.repeat(3));\t// John Smith, John Smith, John Smith,</div></pre></td></tr></table></figure>\n<p><a href=\"https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/String/startsWith\" target=\"_blank\" rel=\"external\">String.prototype.startsWith()</a><br>특정 문자열로 시작하는지 확인하여 맞으면 true, 틀리면 false를 반환합니다.</p>\n<p><a href=\"https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/String/endsWith\" target=\"_blank\" rel=\"external\">String.prototype.endsWith()</a><br>특정 문자열로 끝나는지 확인하여 맞으면 true, 틀리면 false를 반환합니다.</p>\n<p><a href=\"https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/String/includes\" target=\"_blank\" rel=\"external\">String.prototype.includes()</a><br>특정 문자열을 포함하고 있으면 true, 없으면 false를 반환합니다. </p>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/repeat\" target=\"_blank\" rel=\"external\">String.prototype.repeat()</a><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">string.repeat(count);</div></pre></td></tr></table></figure></p>\n<p>count 횟수만큼 반복하여 문자열을 반환합니다. </p>\n<h3 id=\"ES6-포스팅\"><a href=\"#ES6-포스팅\" class=\"headerlink\" title=\"ES6 포스팅\"></a>ES6 포스팅</h3><p><a href=\"https://sharryhong.github.io/2016/12/25/javascript-es6/\">변수선언 let, const</a><br><a href=\"https://sharryhong.github.io/2017/02/02/javascript-es6-blocks/\">Blocks and IIFEs</a><br><a href=\"https://sharryhong.github.io/2017/02/03/javascript-es6-string/\">Strings 문자열표기법 등</a><br><a href=\"https://sharryhong.github.io/2016/12/26/javascript-es6-arrow-functions/\">Arrow functions</a><br><a href=\"https://sharryhong.github.io/2017/02/06/javascript-es6-class/\">Class</a></p>\n"},{"title":"JavaScript ES6 문법 - Blocks and IIFEs","url":"https://sharryhong.github.io/2017/02/02/javascript-es6-blocks/","content":"<img src=\"/2017/02/02/javascript-es6-blocks/js.png\" alt=\"[JavaScript]\" title=\"[JavaScript]\">\n<h2 id=\"Blocks-and-IIFEs\"><a href=\"#Blocks-and-IIFEs\" class=\"headerlink\" title=\"Blocks and IIFEs\"></a>Blocks and IIFEs</h2><p>ES5 이하에서는 var 변수 선언을 하면 전역변수가 되기 때문에 전역을 오염시키지 않기 위해 IIFE패턴을 썼습니다.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">// ES5</div><div class=\"line\">(function()&#123;</div><div class=\"line\">\tvar a = 5;</div><div class=\"line\">&#125;)();</div></pre></td></tr></table></figure></p>\n<p>그러나 ES6에서 제공하는 let, const 선언은 지역변수이므로, 블록으로 묶어주기만 하면 IIFE패턴을 쓰지 않고도 전역을 오염시키지 않게 됩니다.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">// ES6</div><div class=\"line\">&#123;</div><div class=\"line\">\tconst a = 5;</div><div class=\"line\">\tlet b = 10;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>아주 간단해졌습니다. :) </p>\n<h3 id=\"ES6-포스팅\"><a href=\"#ES6-포스팅\" class=\"headerlink\" title=\"ES6 포스팅\"></a>ES6 포스팅</h3><p><a href=\"https://sharryhong.github.io/2016/12/25/javascript-es6/\">변수선언 let, const</a><br><a href=\"https://sharryhong.github.io/2017/02/02/javascript-es6-blocks/\">Blocks and IIFEs</a><br><a href=\"https://sharryhong.github.io/2017/02/03/javascript-es6-string/\">Strings 문자열표기법 등</a><br><a href=\"https://sharryhong.github.io/2016/12/26/javascript-es6-arrow-functions/\">Arrow functions</a><br><a href=\"https://sharryhong.github.io/2017/02/06/javascript-es6-class/\">Class</a></p>\n"},{"title":"JavaScript 객체지향 프로그래밍","url":"https://sharryhong.github.io/2017/02/02/javascript-oop01/","content":"<img src=\"/2017/02/02/javascript-oop01/oop.jpg\" alt=\"[JavaScript OOP]\" title=\"[JavaScript OOP]\">\n<blockquote>\n<p>스터디 모임 때 객체지향 프로그래밍의 개념에 대해 이야기를 나누었습니다.<br>진행할 프로젝트에서 객체지향으로 짜보고 싶어 좀 더 깊게 공부해보려합니다. </p>\n</blockquote>\n<h2 id=\"객체지향-프로그래밍-Object-Oriented-Programming\"><a href=\"#객체지향-프로그래밍-Object-Oriented-Programming\" class=\"headerlink\" title=\"객체지향 프로그래밍(Object-Oriented Programming)\"></a>객체지향 프로그래밍(Object-Oriented Programming)</h2><h5 id=\"절차지향-프로그래밍과-비교해-보자\"><a href=\"#절차지향-프로그래밍과-비교해-보자\" class=\"headerlink\" title=\"절차지향 프로그래밍과 비교해 보자\"></a>절차지향 프로그래밍과 비교해 보자</h5><p>절차지향은 문제를 순차적으로 호출해 처리하는 방식으로, 함수 단위 코딩을 하는 경우가 대표적인 예입니다.<br>전역 데이터를 매개변수 값으로 공유해서 사용하는 구조이기 때문에 데이터가 보호되지 않는다는 치명적인 단점이 있습니다.<br>또한 하나의 프로젝트를 여러사람이 작업할 경우에도 적합하지 않습니다.<br>이러다보니 비교적 간단한 프로젝트에 주로 사용합니다.</p>\n<h5 id=\"객체지향이란\"><a href=\"#객체지향이란\" class=\"headerlink\" title=\"객체지향이란?\"></a>객체지향이란?</h5><p>문제를 여러 개의 객체 단위로 나눠 작업하는 방식으로 오늘날 가장 많이 사용하는 대표적인 프로그래밍 방식입니다.<br>객체지향 프로그래밍의 기본 단위는 클래스 단위 프로그래밍으로서<br>클래스를 이용해 연관 있는 데이터부분(변수, 프로퍼티)과 처리부분(함수, 메소드)을 하나로 묶어 객체(인스턴스)를 생성해 사용합니다. </p>\n<p>4가지 특징인 추상화, 캡슐화, 상속, 다형성을 골고루 사용해 코딩하는 프로그래밍을 객체지향이라고 합니다.<br>프로그래밍 선배님들이 어떻게 하면 유지보수하기 쉽고 중복되지 않는 멋진 코드를 만들 수 있을까 하고 노력한 끝에 완성한 최상의 결과물!</p>\n<p><strong>장점</strong> : 프로젝트를 독립적인 객체 단위로 분리해서 작업할 수 있으므로 여러 개발자와 협업해 규모가 큰 프로젝트를 진행할 수 있습니다. </p>\n<h5 id=\"추상화-abstraction\"><a href=\"#추상화-abstraction\" class=\"headerlink\" title=\"추상화(abstraction)\"></a>추상화(abstraction)</h5><p>설계하는 작업 자체를 나타냅니다. 프로퍼티와 메서드를 정의 하는 작업으로 이름을 작성하는 선언 부분만 만들 뿐 소스는 구현하지 않습니다. </p>\n<h5 id=\"캡슐화-encapsulation\"><a href=\"#캡슐화-encapsulation\" class=\"headerlink\" title=\"캡슐화(encapsulation)\"></a>캡슐화(encapsulation)</h5><p>어떤 프로퍼티와 메서드는 외부에서 접근가능(public), 외부에서 접근하지 못하게(private) 하는 작업을 말합니다. </p>\n<h5 id=\"상속-inheritance\"><a href=\"#상속-inheritance\" class=\"headerlink\" title=\"상속(inheritance)\"></a>상속(inheritance)</h5><p>부모 클래스의 프로퍼티와 메서드를 자식클래스가 물려 받는 것입니다. 즉, 자식클래스에서 부모클래스의 기능을 사용할 수 있습니다.</p>\n<h5 id=\"다형성-polymorphism\"><a href=\"#다형성-polymorphism\" class=\"headerlink\" title=\"다형성(polymorphism)\"></a>다형성(polymorphism)</h5><p>객체지향의 핵심입니다. 선언 부분과 구현 부분을 나눠 다양하게 처리할 수 있습니다.<br>다형성을 적용해 코드를 만들게 되면 특정 작업을 소스 수정을 거의 하지 않고 다양한 방법으로 연결해서 만들 수 있습니다. </p>\n<h3 id=\"참고-자료\"><a href=\"#참고-자료\" class=\"headerlink\" title=\"참고 자료\"></a>참고 자료</h3><p>웹 프론트엔드 개발자를 위한, 자바스크립트+jQuery 완전정복 스터디 - 김춘경(딴동네)</p>\n"},{"title":"Algorism - 수열의 곱과 합.. 최소값 만들기 (JavaScript)","url":"https://sharryhong.github.io/2017/01/30/algorism15/","content":"<img src=\"/2017/01/30/algorism15/al.jpg\" alt=\"[tryhelloworld]\" title=\"[tryhelloworld]\">\n<h2 id=\"알고리즘-15-최소값-만들기-JavaScript\"><a href=\"#알고리즘-15-최소값-만들기-JavaScript\" class=\"headerlink\" title=\"알고리즘 15. 최소값 만들기 (JavaScript)\"></a>알고리즘 15. 최소값 만들기 (JavaScript)</h2><blockquote>\n<p>자연수로 이루어진 길이가 같은 수열 A,B가 있습니다. 최솟값 만들기는 A, B에서 각각 한 개의 숫자를 뽑아 두 수를 곱한 값을 누적하여 더합니다. 이러한 과정을 수열의 길이만큼 반복하여 최종적으로 누적된 값이 최소가 되도록 만드는 것이 목표입니다.<br>예를 들어 A = [1, 2] , B = [3, 4] 라면<br>1) A에서 1, B에서 4를 뽑아 곱하여 더합니다.<br>2) A에서 2, B에서 3을 뽑아 곱하여 더합니다.<br>수열의 길이만큼 반복하여 최솟값 10을 얻을 수 있으며, 이 10이 최솟값이 됩니다.<br>수열 A,B가 주어질 때, 최솟값을 반환해주는 getMinSum 함수를 완성하세요.</p>\n</blockquote>\n<h4 id=\"나의-코딩\"><a href=\"#나의-코딩\" class=\"headerlink\" title=\"나의 코딩\"></a>나의 코딩</h4><p>1) 우선 배열 값끼리 곱하여 더하기를 반복문을 돌려 구한 뒤 최소값을 구하려고 해보았더니, 배열 index 갯수가 많아지면 복잡해져 다른 방법을 생각해보기로 했습니다. </p>\n<p>2) 하나의 배열은 작은 숫자대로 정렬하고, 하나의 배열은 큰 숫자대로 정렬하여 같은 index 값끼리 곱하여 전체를 더해주면 최소값이 나온다는 것을 생각하였습니다. </p>\n<p>3) JavaScript의 <a href=\"https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Array/sort\" target=\"_blank\" rel=\"external\">Array.prototype.sort() 내장 메서드</a>를 사용하여 정렬합니다. </p>\n<p>4) 그런데 sort()는 문자열에 따르므로 숫자의 경우 크기대로 정렬이 되지 않습니다.<br>예를 들어 23, 1004의 경우 1004가 앞에 오게 됩니다.<br>레퍼런스를 읽어보니 배열 index 값 앞뒤 비교를 하여<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">function compare(a, b) &#123;</div><div class=\"line\">  if (a is less than b by some ordering criterion) &#123;</div><div class=\"line\">    return -1;</div><div class=\"line\">  &#125;</div><div class=\"line\">  if (a is greater than b by the ordering criterion) &#123;</div><div class=\"line\">    return 1;</div><div class=\"line\">  &#125;</div><div class=\"line\">  // a must be equal to b</div><div class=\"line\">  return 0;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>a(앞 값), b(뒤 값) 비교를 하여 0보다 작으면 a가 작은 값,<br>0보다 크면 b가 작은 값입니다. 이를 간단하게 아래처럼 코딩할 수 있습니다.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">function compareNumbers(a, b) &#123;</div><div class=\"line\">  return a - b;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>5) 이렇게 sort()에 대하여 알아보고 코딩해봅니다. </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">function getMinSum(A,B)&#123;</div><div class=\"line\">  var answer = 0;</div><div class=\"line\">  A = A.sort(compareNum);</div><div class=\"line\">  B = B.sort(compareNum).reverse();</div><div class=\"line\">  var leng = A.length;</div><div class=\"line\">  for( var i = 0; i &lt; leng; i++ ) &#123;</div><div class=\"line\">    answer += A[i] * B[i];</div><div class=\"line\">  &#125;</div><div class=\"line\">  return answer;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">function compareNum(a, b) &#123;</div><div class=\"line\">  return a - b;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">getMinSum([189,2309,457,4594,7315,7551,7782,8311,8582,9664],[9624,8663,6130,5866,547,357,3392,3206,3070,302]);</div></pre></td></tr></table></figure>\n<blockquote>\n<p>처음엔 sort()가 문자열대로 정렬되어 값이 틀리게 나왔었습니다. 그 후 레퍼런스를 자세히 본 뒤 수정하였습니다.<br>다른분들 풀이를 보니 reverse() 내장메서드를 쓰지 않고 아래처럼 구현하였습니다.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">A.sort(function(a,b)&#123;return a-b;&#125;);</div><div class=\"line\">B.sort(function(a,b)&#123;return b-a;&#125;);</div></pre></td></tr></table></figure></p>\n</blockquote>\n"},{"title":"Algorism - 약수의 합 (JavaScript)","url":"https://sharryhong.github.io/2017/01/25/algorism14/","content":"<img src=\"/2017/01/25/algorism14/al.jpg\" alt=\"[tryhelloworld]\" title=\"[tryhelloworld]\">\n<h2 id=\"알고리즘-14-약수의-합-JavaScript\"><a href=\"#알고리즘-14-약수의-합-JavaScript\" class=\"headerlink\" title=\"알고리즘 14. 약수의 합 (JavaScript)\"></a>알고리즘 14. 약수의 합 (JavaScript)</h2><blockquote>\n<p>어떤 수를 입력받아 그 수의 약수를 모두 더한 수 sumDivisor 함수를 완성해 보세요. 예를 들어 12가 입력된다면 12의 약수는 [1, 2, 3, 4, 6, 12]가 되고, 총 합은 28이 되므로 28을 반환해 주면 됩니다.</p>\n</blockquote>\n<p>약수(divisor)는 어떤 정수를 나누어 떨어지게 하는, 0이 아닌 정수를 말하며,<br>음의 정수도 약수가 되지만 일반적으로 양의 약수만 다룹니다.</p>\n<h4 id=\"나의-코딩\"><a href=\"#나의-코딩\" class=\"headerlink\" title=\"나의 코딩\"></a>나의 코딩</h4><p>1) 약수는 나눠 떨어지는 정수를 구하면 됩니다.<br>for문으로 1부터 해당 값까지, % 나머지 값이 0인 값을 구하면 될 것 같습니다. </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">function sumDivisor(num) &#123;</div><div class=\"line\">\tvar answer = 0;</div><div class=\"line\"></div><div class=\"line\">\tfor(var i = 1; i &lt;= num; i++) &#123;</div><div class=\"line\">\t\tif(num % i === 0) &#123;</div><div class=\"line\">\t\t\tanswer += i;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\treturn answer;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">// 아래는 테스트로 출력해 보기 위한 코드입니다.</div><div class=\"line\">console.log(sumDivisor(12));</div></pre></td></tr></table></figure>\n<blockquote>\n<p>생각과 그대로 잘 실행이 되었습니다. ^^ </p>\n</blockquote>\n"},{"title":"Firebase - Realtime Database","url":"https://sharryhong.github.io/2017/01/25/firebase-database/","content":"<img src=\"/2017/01/25/firebase-database/firebase.png\" alt=\"[Firebase]\" title=\"[Firebase]\">\n<h2 id=\"Firebase-on-the-Web-Firecasts-Youtube\"><a href=\"#Firebase-on-the-Web-Firecasts-Youtube\" class=\"headerlink\" title=\"Firebase on the Web - Firecasts Youtube\"></a><a href=\"https://www.youtube.com/playlist?list=PLl-K7zZEsYLmnJ_FpMOZgyg6XcIGBu2OX\" target=\"_blank\" rel=\"external\">Firebase on the Web - Firecasts Youtube</a></h2><blockquote>\n<p>실제 데이터를 구현하고 싶은 욕망이 항상 있었는데, 이번 예산관리 웹앱을 만들면서 파이어베이스로 디비구현 및 실제 데이터를 붙여보고 싶었습니다.<br>파이어베이스가 스타트업으로 시작해서 구글에서 인수했다고 들었는데.. 능력자들! </p>\n</blockquote>\n<h4 id=\"firebase로-할-수-있는-것들-web기준\"><a href=\"#firebase로-할-수-있는-것들-web기준\" class=\"headerlink\" title=\"firebase로 할 수 있는 것들 (web기준)\"></a>firebase로 할 수 있는 것들 (web기준)</h4><ul>\n<li>인증, 스토리지, 호스팅, firebase 클라우드의 웹푸시 알림 등 </li>\n<li>Angular 1 &amp; 2, Polymer, React, Ember등의 자바스크립트 프레임워크 연동</li>\n</ul>\n<h2 id=\"Realtime-Database-간단하게-구현해보기\"><a href=\"#Realtime-Database-간단하게-구현해보기\" class=\"headerlink\" title=\"Realtime Database - 간단하게 구현해보기\"></a>Realtime Database - 간단하게 구현해보기</h2><h4 id=\"Firebase-시작\"><a href=\"#Firebase-시작\" class=\"headerlink\" title=\"Firebase 시작!\"></a>Firebase 시작!</h4><ol>\n<li><a href=\"https://firebase.google.com\" target=\"_blank\" rel=\"external\">https://firebase.google.com</a> 간단하게 가입 후 무료로 시작하기, <a href=\"https://console.firebase.google.com\" target=\"_blank\" rel=\"external\">콘솔로 이동</a>합니다. </li>\n<li>Create new project 버튼 클릭, project name을 정하고 create project</li>\n<li>overview창에서 Add Firebase to your web app 클릭하면 시작에 필요한 모델들과 초기화 코드(initialization code)가 나옵니다.</li>\n</ol>\n<h4 id=\"html-js에-초기화-코드-넣기\"><a href=\"#html-js에-초기화-코드-넣기\" class=\"headerlink\" title=\"html, js에 초기화 코드 넣기\"></a>html, js에 초기화 코드 넣기</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;script src=&quot;https://www.gstatic.com/firebasejs/3.6.6/firebase.js&quot;&gt;&lt;/script&gt;</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">// Initialize Firebase</div><div class=\"line\">var config = &#123;</div><div class=\"line\">apiKey: &quot;---&quot;,</div><div class=\"line\">authDomain: &quot;---&quot;,---,</div><div class=\"line\">storageBucket: &quot;---&quot;,</div><div class=\"line\">messagingSenderId: &quot;---&quot;</div><div class=\"line\">&#125;;</div><div class=\"line\">firebase.initializeApp(config);</div></pre></td></tr></table></figure>\n<p>이 작업만 하면 기본적인 파이어베이스 세팅이 됩니다. </p>\n<blockquote>\n<p>여기서 잠깐!<br>Windows OS 에서 크롬에서는 overview창이 열리지 않습니다. 아마.. 큰 문제인거 같은데 파이어베이스에서 모르는건지..<br>유투브 댓글을 보니 몇명이 써놨더라고요. 저만 그런지 알고 처음에 당황했는데, 혹시 몰라서 모바일(사파리)과 파이어폭스에서 열어보니 잘됩니다.. ㅋㅋ </p>\n</blockquote>\n<h2 id=\"Realtime-Events-목차\"><a href=\"#Realtime-Events-목차\" class=\"headerlink\" title=\"Realtime Events 목차\"></a>Realtime Events 목차</h2><p><a href=\"#value-events\">value events</a><br><a href=\"#child-events\">child events</a></p>\n<h4 id=\"value-events\"><a href=\"#value-events\" class=\"headerlink\" title=\"value events\"></a>value events</h4><p>객체, 데이터 등을 동기화시키는 데 좋습니다. </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">(function() &#123;</div><div class=\"line\"></div><div class=\"line\">  // Initialize Firebase</div><div class=\"line\">  var config = &#123;</div><div class=\"line\">    apiKey: &quot;---&quot;,</div><div class=\"line\">    authDomain: ---&quot;,</div><div class=\"line\">    databaseURL: &quot;---&quot;,</div><div class=\"line\">    storageBucket: &quot;---&quot;,</div><div class=\"line\">    messagingSenderId: &quot;---&quot;</div><div class=\"line\">  &#125;;</div><div class=\"line\">  firebase.initializeApp(config);</div><div class=\"line\"></div><div class=\"line\">  // get element</div><div class=\"line\">  const preObject = document.getElementById(&apos;object&apos;);</div><div class=\"line\"></div><div class=\"line\">  // database 참조를 만들어서 data를 실시간으로 동기화해보자.</div><div class=\"line\">  // create references </div><div class=\"line\">  const dbRefObject = firebase.database().ref().child(&apos;object&apos;);</div><div class=\"line\"></div><div class=\"line\">  dbRefObject.on(&apos;value&apos;, snap =&gt; preObject.innerText = JSON.stringify(snap.val(), null, 3)); // 여백 3 </div><div class=\"line\">&#125;)();</div></pre></td></tr></table></figure>\n<h5 id=\"ref-함수\"><a href=\"#ref-함수\" class=\"headerlink\" title=\"ref() 함수\"></a>ref() 함수</h5><p>database의 root로 접근하게 해주고, 객체의 child키를 생성합니다. 이제 필요한 값을 저장할 수 있습니다. </p>\n<h5 id=\"on-메서드\"><a href=\"#on-메서드\" class=\"headerlink\" title=\"on() 메서드\"></a>on() 메서드</h5><p>가장 강력한 메서드로서 </p>\n<p>첫 매개변수 : 이벤트 타입. 실시간 동기화를 어느 단계까지 할지를 정해줍니다.<br><strong>value</strong> : database의 변경이 있을 때 매번 콜백함수를 호출합니다.</p>\n<p>두번째 매개변수 : 콜백함수<br><strong>snap</strong> : 콜백함수의 매개변수로서 ‘데이터 스냅샷’이라고 불립니다.<br>데이터 스냅샷은 key name, 자식요소 반복방식 등을 return합니다.<br>그 값을 얻고 싶으면 지금처럼 .val()함수를 호출합니다. 값이 객체라면 객체 전체를 동기화합니다.<br>만약에 객체의 한 value가 바뀌어도, 객체 전체를 update하는데, 이를 state 동기화라고 합니다.</p>\n<h4 id=\"child-events\"><a href=\"#child-events\" class=\"headerlink\" title=\"child events\"></a>child events</h4><p>데이터 동기화를 미세하게 조절할 수 있습니다. 특히 list를 다룰 때 유용합니다.<br>어떤 요소가 add, remove, update 되었을 때 특정 child 이벤트에 동기화시키고 싶을 때 사용합니다.</p>\n<p>Firebase Overview/Database에서 <code>object</code>객체 프로퍼티에 JSON 객체를 넣어봅니다.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">object</div><div class=\"line\">  hobbies: &#123; &quot;coffee&quot; : &quot;coffee&quot; &#125;</div><div class=\"line\"></div><div class=\"line\">// 이렇게 하면 key가 coffee이고 값이 coffee인 JSON객체가 부여됩니다. </div><div class=\"line\">// 이렇게 리스트를 추가합니다.</div></pre></td></tr></table></figure></p>\n<p>js파일에서<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\">// child_added : 리스트에 자식이 추가될 때만 작동합니다. </div><div class=\"line\">// 처음에 모든 리스트가 동기화되며, 그 후엔 변한 부분만 동기화합니다. </div><div class=\"line\">dbRefList.on(&apos;child_added&apos;, snap =&gt; &#123;</div><div class=\"line\"></div><div class=\"line\">  const li = document.createElement(&apos;li&apos;);</div><div class=\"line\">  // 각 항목의 key name을 li의 id값으로 준다.</div><div class=\"line\">  li.id = snap.key;  </div><div class=\"line\">  li.innerText = snap.val();</div><div class=\"line\">  ulList.appendChild(li);</div><div class=\"line\"></div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">// child_changed : 자식이 바뀔때만 작동  </div><div class=\"line\">dbRefList.on(&apos;child_changed&apos;, snap =&gt; &#123;</div><div class=\"line\"></div><div class=\"line\">  const liChanged = document.getElementById(snap.key);</div><div class=\"line\">  liChanged.innerText = snap.val();</div><div class=\"line\"></div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">// child_changed : 자식이 삭제될 때만 작동  </div><div class=\"line\">dbRefList.on(&apos;child_removed&apos;, snap =&gt; &#123;</div><div class=\"line\"></div><div class=\"line\">  const liRemove = document.getElementById(snap.key);</div><div class=\"line\">  liRemove.remove();</div><div class=\"line\"></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n"},{"title":"Algorism - 피보나치 수열 (JavaScript)","url":"https://sharryhong.github.io/2017/01/24/algorism13-fibonacci/","content":"<img src=\"/2017/01/24/algorism13-fibonacci/al.jpg\" alt=\"[tryhelloworld]\" title=\"[tryhelloworld]\">\n<h2 id=\"알고리즘-13-피보나치-수열-JavaScript\"><a href=\"#알고리즘-13-피보나치-수열-JavaScript\" class=\"headerlink\" title=\"알고리즘 13. 피보나치 수열 (JavaScript)\"></a>알고리즘 13. 피보나치 수열 (JavaScript)</h2><blockquote>\n<p>피보나치 수는 F(0) = 0, F(1) = 1일 때, 2 이상의 n에 대하여 F(n) = F(n-1) + F(n-2) 가 적용되는 점화식입니다.<br>2 이상의 n이 입력되었을 때, fibonacci 함수를 제작하여 n번째 피보나치 수를 반환해 주세요.<br>예를 들어 n = 3이라면 2를 반환해주면 됩니다. </p>\n</blockquote>\n<p><a href=\"https://ko.wikipedia.org/wiki/%ED%94%BC%EB%B3%B4%EB%82%98%EC%B9%98_%EC%88%98\" target=\"_blank\" rel=\"external\">피보나치 수 - 위키피디아</a></p>\n<h4 id=\"나의-코딩\"><a href=\"#나의-코딩\" class=\"headerlink\" title=\"나의 코딩\"></a>나의 코딩</h4><p>1) 피보나치가 잘 고안해 낸 식을 그대로 써서, 매개변수가 0, 1일 땐 매개변수 자체를 반환하고, 1보다 클 때는 매개변수가 0, 1이 될때까지 함수를 실행하게끔 <code>F(n) = F(n-1) + F(n-2)</code> 대로 해보자. </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">function fibonacci(num) &#123;</div><div class=\"line\">\tvar answer = 0;</div><div class=\"line\"></div><div class=\"line\">\tif( num &lt;= 1 ) &#123;</div><div class=\"line\">\t\treturn num;</div><div class=\"line\">\t&#125; </div><div class=\"line\">\telse if( num &gt; 1 ) &#123;</div><div class=\"line\">\t\tanswer = fibonacci(num-1) + fibonacci(num-2);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\treturn answer;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">// 아래는 테스트로 출력해 보기 위한 코드입니다.</div><div class=\"line\">console.log(fibonacci(3));</div></pre></td></tr></table></figure>\n<blockquote>\n<p>생각과 그대로 잘 실행이 되었다. 피보나치 레오나르도 수학자님 짱 ㅋㅋㅋ </p>\n</blockquote>\n"},{"title":"예산관리 웹애플리케이션 - 01. 설계하기","url":"https://sharryhong.github.io/2017/01/22/portfolio-budget-app/","content":"<blockquote>\n<p>이번 프로젝트는 udemy 동영상 강의를 보면서 모듈패턴으로 개발해보려고 합니다.<br>영어로 된 강의인데도 강사가 아주 뛰어난지.. 왜 알아듣기 쉬운것이죠.. 자랑이 아니고 진짜임 :)<br>목표는 Structure, Architecture 즉, 데이터 구조 등의 설계부터 제대로 Front-End 개발을 하는 것으로, Firebase로 서버단 구현까지 해보고 싶습니다. </p>\n</blockquote>\n<h3 id=\"Step-1-애플리케이션을-위해-기본적인-to-do-list-생각하기\"><a href=\"#Step-1-애플리케이션을-위해-기본적인-to-do-list-생각하기\" class=\"headerlink\" title=\"Step 1_ 애플리케이션을 위해 기본적인 to-do list 생각하기\"></a>Step 1_ 애플리케이션을 위해 기본적인 to-do list 생각하기</h3><p>: 수입(income), 지출(expenses)의 목록과 금액을 적고 버튼을 클릭하면 UI추가, 계산 등이 일어납니다. </p>\n<h5 id=\"01-Add-event-handler\"><a href=\"#01-Add-event-handler\" class=\"headerlink\" title=\"01) Add event handler\"></a>01) Add event handler</h5><p>(버튼용) 이벤트 핸들러를 추가합니다. </p>\n<h5 id=\"02-Get-input-values\"><a href=\"#02-Get-input-values\" class=\"headerlink\" title=\"02) Get input values\"></a>02) Get input values</h5><p>입력창의 값을 받습니다.</p>\n<h5 id=\"03-Add-the-new-item-to-our-data-structure\"><a href=\"#03-Add-the-new-item-to-our-data-structure\" class=\"headerlink\" title=\"03) Add the new item to our data structure\"></a>03) Add the new item to our data structure</h5><p>데이터 구조에 새 아이템이 추가됩니다.</p>\n<h5 id=\"04-Add-the-new-item-to-the-UI\"><a href=\"#04-Add-the-new-item-to-the-UI\" class=\"headerlink\" title=\"04) Add the new item to the UI.\"></a>04) Add the new item to the UI.</h5><p>UI(User Interface)에도 추가됩니다.</p>\n<h4 id=\"05-Calculate-budget\"><a href=\"#05-Calculate-budget\" class=\"headerlink\" title=\"05) Calculate budget\"></a>05) Calculate budget</h4><p>예산을 계산합니다.</p>\n<h4 id=\"06-Update-the-UI\"><a href=\"#06-Update-the-UI\" class=\"headerlink\" title=\"06) Update the UI.\"></a>06) Update the UI.</h4><p>UI(User Interface)에도 추가됩니다.</p>\n<h3 id=\"Step-2-코딩-전에-코드를-구성하는-방법에-대한-고찰-모듈-Modules\"><a href=\"#Step-2-코딩-전에-코드를-구성하는-방법에-대한-고찰-모듈-Modules\" class=\"headerlink\" title=\"Step 2_ 코딩 전에 코드를 구성하는 방법에 대한 고찰 - 모듈(Modules)\"></a>Step 2_ 코딩 전에 코드를 구성하는 방법에 대한 고찰 - 모듈(Modules)</h3><ul>\n<li>모듈은 강력한 애플리케이션 설계의 핵심 요소입니다. </li>\n<li>프로젝트의 코드 단위를 깔끔하게 분리하고 체계적으로 해줍니다. </li>\n<li>캡슐화(encapsulate)하여 일부 데이터를 외부에서 접근하지 못하게(private)하고,<br>다른 데이터는 외부에서 접근가능(public)하게 합니다. </li>\n</ul>\n<p>이러한 개념은 프로젝트가 클수록 중요해집니다.<br>기본적으로, 모듈은 코드를 논리적인 부분으로 나누고, 서로 상호작용(interact)하도록 해줍니다.</p>\n<h5 id=\"이-프로젝트에서는-모듈을-어떻게-나눌-것인가\"><a href=\"#이-프로젝트에서는-모듈을-어떻게-나눌-것인가\" class=\"headerlink\" title=\"이 프로젝트에서는 모듈을 어떻게 나눌 것인가?\"></a>이 프로젝트에서는 모듈을 어떻게 나눌 것인가?</h5><table>\n<thead>\n<tr>\n<th style=\"text-align:left\">UI Module</th>\n<th style=\"text-align:left\">Data Module</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">02) Get input values</td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">04) Add the new item to the UI.</td>\n<td style=\"text-align:left\">03) Add the new item to our data structure</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">06) Update the UI</td>\n<td style=\"text-align:left\">05) Calculate budget</td>\n</tr>\n</tbody>\n</table>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">Controller Module</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">01) Add event handler</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"Step-3-모듈패턴-Module-Patten\"><a href=\"#Step-3-모듈패턴-Module-Patten\" class=\"headerlink\" title=\"Step 3_ 모듈패턴(Module Patten)\"></a>Step 3_ 모듈패턴(Module Patten)</h3><p>JavaScript의 인기있는 패턴 중 하나인 모듈패턴 방식으로 개발하고자 합니다. </p>\n<h5 id=\"관련-포스팅-모듈패턴-Module-Patten\"><a href=\"#관련-포스팅-모듈패턴-Module-Patten\" class=\"headerlink\" title=\"관련 포스팅 : 모듈패턴(Module Patten)\"></a>관련 포스팅 : <a href=\"https://sharryhong.github.io/2017/01/16/javascript-module-patton/\">모듈패턴(Module Patten)</a></h5>"},{"title":"NHN JavaScript Convention","url":"https://sharryhong.github.io/2017/01/21/link-js-convention/","content":"<img src=\"/2017/01/21/link-js-convention/javascript-styleguides.jpg\" alt=\"[코딩 컨벤션]\" title=\"[코딩 컨벤션]\">\n<h2 id=\"NHN-ent-JavaScript-코딩-컨벤션\"><a href=\"#NHN-ent-JavaScript-코딩-컨벤션\" class=\"headerlink\" title=\"NHN ent. JavaScript 코딩 컨벤션\"></a><a href=\"https://github.com/nhnent/fe.javascript/wiki/%EC%BD%94%EB%94%A9-%EC%BB%A8%EB%B2%A4%EC%85%98\" target=\"_blank\" rel=\"external\">NHN ent. JavaScript 코딩 컨벤션</a></h2><blockquote>\n<p>스터디 멤버분이 소개해주신 nhn ent. js 코딩 컨벤션. 즉 코딩 스타일 가이드입니다.<br>이제 모듈 패턴이나 클래스를 사용하여 객체지향으로 코딩해보려고 하는데,<br>코딩 컨벤션도 보면서 좀 더 나은 코딩을 해봐야겠습니다. :) </p>\n</blockquote>\n"},{"title":"스터디그룹모임 - JavaScript 성능향상을 위한 노력, OOP(객체지향 프로그래밍)","url":"https://sharryhong.github.io/2017/01/20/javascript-study01/","content":"<img src=\"/2017/01/20/javascript-study01/study_group.jpg\" alt=\"[스터디그룹 홧팅!! ^^]\" title=\"[스터디그룹 홧팅!! ^^]\">\n<blockquote>\n<p>스터디를 이어오고 있었는데 이제는 1주에 한번 서로 깨달은 점을 나누고,<br>궁금한 것은 공부해와서 다음에 나누기로 하였습니다.<br>이번주에 서로 나눈 내용은 JS성능향상을 위한 코드 리펙토링과 객체지향!</p>\n</blockquote>\n<h3 id=\"1-JavaScript-성능향상을-위한-고려\"><a href=\"#1-JavaScript-성능향상을-위한-고려\" class=\"headerlink\" title=\"1. JavaScript 성능향상을 위한 고려\"></a>1. JavaScript 성능향상을 위한 고려</h3><p>조건문의 경우 if else보다는 아닐경우 빠져나오는 경우를 먼저 설정하면 성능에 좋다고 합니다.<br>아래 예의 경우 항상 if가 참일 때는 A코드를, 아닐 경우는 B코드를 훑어봐야 합니다.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">function addList(type, num)&#123;</div><div class=\"line\">\tif( dbCheck(type, num) )&#123;</div><div class=\"line\">\t\t//...A</div><div class=\"line\">\t&#125; else &#123; //...B &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>이를 더 좋게 코드 리펙토링 한다면<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">function addList(type, num)&#123;</div><div class=\"line\">\tif( !dbCheck(type, num) )&#123; return; &#125; </div><div class=\"line\">\t//...B </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>위처럼 아닐경우 빠져나가게(return) 설정한다면 모든 코드를 훑을 필요가 없어집니다. </p>\n<h3 id=\"2-이벤트와-함수\"><a href=\"#2-이벤트와-함수\" class=\"headerlink\" title=\"2. 이벤트와 함수\"></a>2. 이벤트와 함수</h3><p>아래처럼 이벤트가 실행될때 익명함수가 실행되게끔 하는 코드를 많이 사용하게 됩니다. </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">tar.addEventListener(&quot;focusout&quot;,function(evt)&#123;</div><div class=\"line\">\t// do something</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>1) 이벤트와 함수를 분리하여 직관적으로 코드 리펙토링 해봅니다.<br>여기서 addText는 콜백함수이므로 focusout시 실행되므로 <code>()</code>를 적을 필요 없습니다.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">function addText(evt)&#123;</div><div class=\"line\">  // do something</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">tar.addEventListener(&quot;focusout&quot;, addText);</div></pre></td></tr></table></figure></p>\n<p>2) 한번 더! 네임스페이스(전역에 하나의 객체만 추가하여 사용) 방식으로 코드 리펙토링<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">var addHandler = &#123;</div><div class=\"line\">  &apos;addText&apos; = function() &#123;</div><div class=\"line\">    // do something</div><div class=\"line\">  &#125;,</div><div class=\"line\">  &apos;addNode&apos; = function() &#123;</div><div class=\"line\">    // do something</div><div class=\"line\">  &#125;,</div><div class=\"line\">  &apos;addSomething&apos; = function() &#123;</div><div class=\"line\">    // do something</div><div class=\"line\">  &#125;,</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">tar.addEventListener(&quot;focusout&quot;, addHandler.addText);</div></pre></td></tr></table></figure></p>\n<h3 id=\"3-OOP-Object-Oriented-Programming-객체지향-프로그래밍-포스팅\"><a href=\"#3-OOP-Object-Oriented-Programming-객체지향-프로그래밍-포스팅\" class=\"headerlink\" title=\"3. OOP(Object Oriented Programming) 객체지향 프로그래밍 포스팅\"></a><a href=\"https://sharryhong.github.io/2017/02/02/javascript-oop01/\">3. OOP(Object Oriented Programming) 객체지향 프로그래밍 포스팅</a></h3>"},{"title":"Algorism - 최대공약수와 최소공배수 (JavaScript)","url":"https://sharryhong.github.io/2017/01/17/algorism11-gcdlcm/","content":"<img src=\"/2017/01/17/algorism11-gcdlcm/al.jpg\" alt=\"[tryhelloworld]\" title=\"[tryhelloworld]\">\n<blockquote>\n<p>최대공약수, 최소공배수.. 오랜만에 다시 보았네요 ㅋㅋㅋ </p>\n</blockquote>\n<h2 id=\"알고리즘-11-최대공약수와-최소공배수-JavaScript\"><a href=\"#알고리즘-11-최대공약수와-최소공배수-JavaScript\" class=\"headerlink\" title=\"알고리즘 11. 최대공약수와 최소공배수 (JavaScript)\"></a>알고리즘 11. 최대공약수와 최소공배수 (JavaScript)</h2><blockquote>\n<p>두 수를 입력받아 두 수의 최대공약수와 최소공배수를 반환해주는 gcdlcm 함수를 완성해 보세요. 배열의 맨 앞에 최대공약수, 그 다음 최소공배수를 넣어 반환하면 됩니다. 예를 들어 gcdlcm(3,12) 가 입력되면, [3, 12]를 반환해주면 됩니다.</p>\n</blockquote>\n<h4 id=\"처음-나의-코딩\"><a href=\"#처음-나의-코딩\" class=\"headerlink\" title=\"처음 나의 코딩\"></a>처음 나의 코딩</h4><p>1) 우선 둘 중 작은 수를 minNum, 큰 수를 maxNum로 다시 세팅한다. </p>\n<p>2) 최소공배수 : 두 수의 공통된 배수(공배수) 중 가장 작은 수<br> minNum * maxNum / 최대공약수 </p>\n<p>3) 최대공약수 : 두 수의 공통된 약수(공약수) 중 가장 큰 수<br> 두 수를 나눠봐서 나머지가 0이면 (즉 나눠지면) maxNum가 최대 공약수이고,<br> 나머지가 생긴다면 maxNum와 나머지값을 다시 비교합니다. </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">function gcdlcm(a, b) &#123;</div><div class=\"line\">    var answer = [];</div><div class=\"line\">    var minNum = Math.min(a, b);</div><div class=\"line\">    var maxNum = Math.max(a, b);</div><div class=\"line\">    answer[0] = gcd(minNum, maxNum);</div><div class=\"line\">    answer[1] = lcm(minNum, maxNum);</div><div class=\"line\">    return answer;</div><div class=\"line\">&#125;</div><div class=\"line\">// 최대공약수 </div><div class=\"line\">function gcd(minNum, maxNum)&#123;</div><div class=\"line\">  return (minNum % maxNum) === 0 ? maxNum : gcd(maxNum, minNum % maxNum);</div><div class=\"line\">&#125;</div><div class=\"line\">// 최소공배수 </div><div class=\"line\">function lcm(minNum, maxNum)&#123;</div><div class=\"line\">  return minNum * maxNum / gcd(minNum, maxNum);</div><div class=\"line\">&#125;</div><div class=\"line\">// 아래는 테스트로 출력해 보기 위한 코드입니다.</div><div class=\"line\">console.log(gcdlcm(3,12));</div></pre></td></tr></table></figure>"},{"title":"JavaScript - Module Patton","url":"https://sharryhong.github.io/2017/01/16/javascript-module-patton/","content":"<img src=\"/2017/01/16/javascript-module-patton/js.png\" alt=\"[JavaScript]\" title=\"[JavaScript]\">\n<blockquote>\n<p>이번에 진행할 Free Project에서 Module Patton으로 Module을 구현하려고 합니다. </p>\n</blockquote>\n<p><strong>Module</strong> : 모듈은 application’s architecture(구조)의 필수 요소이며 일반적으로 프로젝트의 코드 단위를 명확하게 분리하고 구성하는 데 도움이됩니다.</p>\n<p>자바스크립트에서는 모듈 구현을 위한 몇가지 방법이 있습니다.<br>The Module pattern (모듈패턴)<br>Object literal notation (객체 리터럴 표기법)<br>AMD modules<br>CommonJS modules<br>ECMAScript Harmony modules</p>\n<h2 id=\"Module-Patton-모듈-패텬\"><a href=\"#Module-Patton-모듈-패텬\" class=\"headerlink\" title=\"Module Patton(모듈 패텬)\"></a>Module Patton(모듈 패텬)</h2><p>모듈 패턴은 전통적인 소프트웨어 엔지니어링에서 클래스를 위한 private 및 public로 나뉜 캡슐화를 제공하는 방법입니다.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\">// data를 다루는 모듈</div><div class=\"line\">var budgetController = (function()&#123;</div><div class=\"line\"></div><div class=\"line\">\t// private 영역 </div><div class=\"line\">\t// 클로저 내부에 있고 publicTest 메소드를 통해서만 엑세스가 가능하기 때문입니다.</div><div class=\"line\">\tvar x = 20; // private 프로퍼티 </div><div class=\"line\">\tvar add = function(a)&#123; // private 메소드 </div><div class=\"line\">\t\treturn x + a;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t// public 영역 : 필요한 것만 공개합니다.</div><div class=\"line\">\treturn &#123;</div><div class=\"line\">\t\t// 항상 x와 add에 엑세스하므로 클로저(closure)가 생성됩니다.</div><div class=\"line\">\t\tpublicTest: function(b)&#123;</div><div class=\"line\">\t\t\treturn add(b);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;)();</div><div class=\"line\"></div><div class=\"line\">// UI를 다루는 모듈 </div><div class=\"line\">var UIController = (function()&#123;</div><div class=\"line\">\t// code</div><div class=\"line\">&#125;)();</div><div class=\"line\"></div><div class=\"line\">// data와 UI를 같이 다루는 모듈</div><div class=\"line\">var controller = (function(budgetCtrl, UICtrl)&#123;</div><div class=\"line\">\tvar z = budgetCtrl.publicTest(5);</div><div class=\"line\"></div><div class=\"line\">\treturn&#123;</div><div class=\"line\">\t\tanotherPublic: function()&#123;</div><div class=\"line\">\t\t\tconsole.log(z);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;)(budgetController, UIController);</div></pre></td></tr></table></figure>\n<p>위 코드에서 public으로 공개된 코드를 사용하여 <code>controller.anotherPublic();</code> 이런식으로 budgetController의 publicTest 메소드에 접근합니다. </p>\n<p>controller 내에서 <code>budgetCtrl.publicTest(5);</code>로 하지 않고, <code>budgetController.publicTest(5);</code>로도 접근이 가능하지만, 이 경우 나중에 budgetController의 이름을 바꾸게 된다면 모든 코드를 수정해야합니다.<br>따라서, 위처럼 매개변수로 받은 이름을 쓴다면 쉽게 수정이 가능해집니다. </p>\n<h3 id=\"IIFE-Immediately-Invoked-Function-Expressions-즉시실행함수\"><a href=\"#IIFE-Immediately-Invoked-Function-Expressions-즉시실행함수\" class=\"headerlink\" title=\"IIFE (Immediately Invoked Function Expressions 즉시실행함수)\"></a>IIFE (Immediately Invoked Function Expressions 즉시실행함수)</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">(function()&#123;</div><div class=\"line\">\t// code</div><div class=\"line\">&#125;)();</div></pre></td></tr></table></figure>\n<p>위처럼 뒤에 <code>()</code>를 붙이면 함수가 즉시 실행됩니다.<br>함수내부 프로퍼티, 메소드는 외부에서 접근을 못한다는 개념을 사용하여 전역을 오염시키지 않도록 하는 방법입니다.</p>\n<h3 id=\"참고-자료\"><a href=\"#참고-자료\" class=\"headerlink\" title=\"참고 자료\"></a>참고 자료</h3><p><a href=\"https://www.udemy.com/the-complete-javascript-course/learn/v4/overview\" target=\"_blank\" rel=\"external\">Udemy - The Complete JavaScript Course</a><br><a href=\"http://blog.javarouka.me/2012/02/javascripts-pattern-2-module-pattern.html\" target=\"_blank\" rel=\"external\">Nonblock 블로그</a><br><a href=\"https://addyosmani.com/resources/essentialjsdesignpatterns/book/#modulepatternjavascript\" target=\"_blank\" rel=\"external\">Learning JavaScript Design Patterns</a></p>\n"},{"title":"Algorism - 평균구하기 (JavaScript)","url":"https://sharryhong.github.io/2017/01/13/algorism-02/","content":"<img src=\"/2017/01/13/algorism-02/al.jpg\" alt=\"[tryhelloworld]\" title=\"[tryhelloworld]\">\n<h2 id=\"알고리즘-02-평균구하기-JavaScript\"><a href=\"#알고리즘-02-평균구하기-JavaScript\" class=\"headerlink\" title=\"알고리즘 02. 평균구하기 (JavaScript)\"></a>알고리즘 02. 평균구하기 (JavaScript)</h2><blockquote>\n<p>def average(list):<br>함수를 완성해서 매개변수 list의 평균값을 return하도록 만들어 보세요.<br>어떠한 크기의 list가 와도 평균값을 구할 수 있어야 합니다.</p>\n</blockquote>\n<h4 id=\"처음-나의-코딩\"><a href=\"#처음-나의-코딩\" class=\"headerlink\" title=\"처음 나의 코딩\"></a>처음 나의 코딩</h4><p>1) 목표 : 배열 값을 모두 더하여 length만큼 나눠 평균을 구하자. </p>\n<p>2) 매개변수로 들어온 배열.length의 경우 2번이상 쓰이므로 변수에 저장하자. </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">function average(array)&#123;</div><div class=\"line\">  var result = 0;</div><div class=\"line\">  var arrLength = array.length;</div><div class=\"line\">  for(var i = 0; i &lt; arrLength; i++)&#123;</div><div class=\"line\">    result += array[i];</div><div class=\"line\">  &#125;</div><div class=\"line\">  return result/arrLength;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">// 아래는 테스트로 출력해 보기 위한 코드입니다.</div><div class=\"line\">var testArray = [5,3,4] </div><div class=\"line\">console.log(&quot;평균값 : &quot; + average(testArray));</div></pre></td></tr></table></figure>\n<h4 id=\"다른분의-코딩을-참고한-코드-리펙토링\"><a href=\"#다른분의-코딩을-참고한-코드-리펙토링\" class=\"headerlink\" title=\"다른분의 코딩을 참고한 코드 리펙토링\"></a>다른분의 코딩을 참고한 코드 리펙토링</h4><p>ES6문법으로 코드 리펙토링해보았습니다.<br>우선 let 선언으로 정의된 블록내에서만 존재하는 지역변수로 설정하고,<br>for of문을 사용하여 각 배열 값이 자동으로 더해지게 하였습니다.<br>주의사항 : for of문의 경우 브라우저 호환이 안되는 경우가 많습니다. </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">function average(array)&#123;</div><div class=\"line\">  let result = 0;</div><div class=\"line\">  for(let item of array)&#123;</div><div class=\"line\">    result += item;</div><div class=\"line\">  &#125;</div><div class=\"line\">  return result/array.length;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">// 아래는 테스트로 출력해 보기 위한 코드입니다.</div><div class=\"line\">var testArray = [5,3,4] </div><div class=\"line\">console.log(&quot;평균값 : &quot; + average(testArray));</div></pre></td></tr></table></figure>\n<p><a href=\"https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Statements/for...of\" target=\"_blank\" rel=\"external\"><strong>for of문</strong></a><br>for…of 문(statement)은 반복가능한 객체 (Array, Map, Set, String, TypedArray, arguments 객체 등을 포함)에 대해서 반복하고 각 개별 속성값에 대해 실행되는 문이 있는 사용자 정의 반복 후크를 호출하는 루프를 생성합니다. </p>\n"},{"title":"Algorism - 핸드폰번호 가리기 (JavaScript)","url":"https://sharryhong.github.io/2017/01/13/algorism-01/","content":"<img src=\"/2017/01/13/algorism-01/al.jpg\" alt=\"[tryhelloworld]\" title=\"[tryhelloworld]\">\n<blockquote>\n<p>한국에도 이런 사이트가 있어 기쁩니다. ^^<br>해외에는 codecademy, udacity, udemy.. 등의 우수한 강의사이트가 있는데 tryhelloworld도 못지않게 훌륭하네요!<br>JavaScript에 해당하는 알고리즘을 풀고난 후, 다른사람들의 풀이를 보니 공부에 많은 도움이 되고 있습니다. :)  </p>\n</blockquote>\n<h2 id=\"알고리즘-01-핸드폰번호-가리기-JavaScript\"><a href=\"#알고리즘-01-핸드폰번호-가리기-JavaScript\" class=\"headerlink\" title=\"알고리즘 01. 핸드폰번호 가리기 (JavaScript)\"></a>알고리즘 01. 핸드폰번호 가리기 (JavaScript)</h2><blockquote>\n<p>별이는 헬로월드텔레콤에서 고지서를 보내는 일을 하고 있습니다. 개인정보 보호를 위해 고객들의 전화번호는 맨 뒷자리 4자리를 제외한 나머지를 “*“으로 바꿔야 합니다.<br>전화번호를 문자열 s로 입력받는 hide_numbers함수를 완성해 별이를 도와주세요<br>예를들어 s가 “01033334444”면 “*******4444”를 리턴하고, “027778888”인 경우는 “*****8888”을 리턴하면 됩니다.</p>\n</blockquote>\n<h4 id=\"처음-나의-코딩\"><a href=\"#처음-나의-코딩\" class=\"headerlink\" title=\"처음 나의 코딩\"></a>처음 나의 코딩</h4><p>1) 목표 : 문자열 중 마지막 4개만 제외하고 별표로 바꿔야한다.<br> : 문자열 length만큼 for문을 돌면서 별표로 바꾸자. (length - 4까지)</p>\n<p>2) 내가 아는 내장 메소드 중 문자열을 배열값으로 분리하여 저장하는 split()로 하나하나 값을 지정할 수 있게 한다. </p>\n<p>3) for문을 돌며 각 배열 값을 별표로 바꾸자. </p>\n<p>4) join() 메소드로 배열의 모든 요소를 연결하여 문자열로 만들어보자.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">function hide_numbers(s)&#123;</div><div class=\"line\">\tvar result = &quot;&quot;;</div><div class=\"line\">\tresult = s.split(&quot;&quot;);</div><div class=\"line\">\tfor(var i = 0; i &lt; result.length - 4; i++)&#123;</div><div class=\"line\">\t\tresult[i] = &quot;*&quot;;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\treturn result.join(&quot;&quot;);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">console.log(&quot;결과 : &quot; + hide_numbers(&apos;01033334444&apos;));</div></pre></td></tr></table></figure>\n<h4 id=\"다른분의-코딩을-참고한-코드-리펙토링\"><a href=\"#다른분의-코딩을-참고한-코드-리펙토링\" class=\"headerlink\" title=\"다른분의 코딩을 참고한 코드 리펙토링\"></a>다른분의 코딩을 참고한 코드 리펙토링</h4><p>배열로 바꾸지 않고 바로 별표를 대입시킨 코드<br>if문을 삼항식으로 적용하여 한줄로 간단하게 적용한 코드 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">function hide_numbers(s)&#123;</div><div class=\"line\">\tvar result = &quot;&quot;;</div><div class=\"line\">\tvar sLength = s.length;</div><div class=\"line\">\tfor(var i = 0; i &lt; sLength; i++)&#123;</div><div class=\"line\">\t\tresult += i &lt; sLength - 4 ? &quot;*&quot; : s.charAt(i);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\treturn result;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">console.log(&quot;결과 : &quot; + hide_numbers(&apos;01033334444&apos;));</div></pre></td></tr></table></figure>\n<p>charAt()이라는 메소드를 공부해보았습니다.<br><code>str.charAt(index)</code> 문자열에서 index 문자를 반환합니다.<br>if문을 삼항식으로 써보았습니다. 문자열의 길이 s.length - 4 보다 작다면, 즉, 마지막 4개 이전의 index 값에는 *를 대입하고, 나머지는 원래의 s.charAt(i)값을 대입합니다. </p>\n"},{"title":"Photo Gallery - AJAX, JSON data","url":"https://sharryhong.github.io/2017/01/10/project-gallery/","content":"<h3 id=\"사진-갤러리-JavaScript-AJAX-JSON-CSS3\"><a href=\"#사진-갤러리-JavaScript-AJAX-JSON-CSS3\" class=\"headerlink\" title=\"사진 갤러리 : JavaScript, AJAX, JSON, CSS3\"></a>사진 갤러리 : JavaScript, AJAX, JSON, CSS3</h3><p><a href=\"https://sharryhong.github.io/javascript/06_image_gallery/\">결과화면 보기</a><br><a href=\"https://github.com/sharryhong/javascript/tree/master/06_image_gallery\" target=\"_blank\" rel=\"external\">해당 소스 보기</a></p>\n<img src=\"/2017/01/10/project-gallery/photo.jpg\" alt=\"[결과 이미지]\" title=\"[결과 이미지]\">\n<blockquote>\n<p>Window10의 기본 사진 애플리케이션 기능을 웹버전으로 만들어보는 작은 프로젝트입니다. :) </p>\n</blockquote>\n<h3 id=\"특징-및-기능\"><a href=\"#특징-및-기능\" class=\"headerlink\" title=\"특징 및 기능\"></a>특징 및 기능</h3><p>1) AJAX로 JSON data 불러오기<br>2) JSON photo개수에 맞는 template 동적 생성<br>3) hover, focus시 CSS3 transform, transition 사용<br>4) 사진 click시 중앙에 확대, 확대시 검정배경 높이만큼 나오기<br>5) 슬라이드 쇼 버튼 클릭시 슬라이드 쇼 재생, 다시 클릭시 멈추는 기능<br>6) 슬라이드 쇼 재생시 사진을 클릭하면 재생이 끝나는 기능 </p>\n<h3 id=\"주요-코드\"><a href=\"#주요-코드\" class=\"headerlink\" title=\"주요 코드\"></a>주요 코드</h3><h4 id=\"1-AJAX로-JSON-data-불러오기\"><a href=\"#1-AJAX로-JSON-data-불러오기\" class=\"headerlink\" title=\"1) AJAX로 JSON data 불러오기\"></a>1) <a href=\"https://sharryhong.github.io/2016/12/29/javascript-ajax/\">AJAX로 JSON data 불러오기</a></h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">var xhr = new XMLHttpRequest();</div><div class=\"line\">xhr.open(&quot;GET&quot;, &quot;./data/gallery.json&quot;);</div><div class=\"line\">xhr.send();</div><div class=\"line\">xhr.onreadystatechange = function() &#123;</div><div class=\"line\">  if(this.status === 200 &amp;&amp; this.readyState === 4) &#123;</div><div class=\"line\">    var data = JSON.parse(this.response);</div><div class=\"line\">      var template = &apos;&apos;;</div><div class=\"line\">      var photos = data.results;</div></pre></td></tr></table></figure>\n<p><code>gallery.json</code> 파일 내부의 <code>results</code> 배열객체 값을 변수 photos에 저장합니다. </p>\n<h4 id=\"2-JSON의-photos-개수만큼-template-동적-생성\"><a href=\"#2-JSON의-photos-개수만큼-template-동적-생성\" class=\"headerlink\" title=\"2) JSON의 photos 개수만큼 template 동적 생성\"></a>2) JSON의 photos 개수만큼 template 동적 생성</h4><p>index.html <code>&lt;ul class=&quot;ajax-result&quot;&gt;&lt;/ul&gt;</code> 내부에<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">for(var i=0; i&lt;photos.length; i++)&#123;</div><div class=\"line\">  template += [</div><div class=\"line\">    &apos;&lt;li&gt;&apos;,</div><div class=\"line\">      &apos;&lt;a href=&quot;javascript:;&quot; class=&quot;photo-link&quot;&gt;&apos;,</div><div class=\"line\">        &apos;&lt;img class=&quot;photo-img&quot; src=&quot;&apos;+photos[i].image+&apos;&quot; alt=&quot;&apos;+photos[i].alt+&apos;&quot;&gt;&apos;,</div><div class=\"line\">      &apos;&lt;/a&gt;&apos;,</div><div class=\"line\">    &apos;&lt;/li&gt;&apos;</div><div class=\"line\">  ].join(&apos;&apos;);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">result_view.innerHTML = template;</div></pre></td></tr></table></figure></p>\n<p>처음에 저장했던 <code>photos</code> 변수에 담긴 JSON data의 갯수만큼 template을 생성하여 뿌려줍니다. </p>\n<h4 id=\"3-CSS3-transform-transition-animation\"><a href=\"#3-CSS3-transform-transition-animation\" class=\"headerlink\" title=\"3) CSS3 transform, transition, animation\"></a>3) CSS3 transform, transition, animation</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div></pre></td><td class=\"code\"><pre><div class=\"line\">// transition을 주어 애니메이션 효과를 냅니다. </div><div class=\"line\">.photo-link&#123;</div><div class=\"line\">\tposition: static;</div><div class=\"line\">\tdisplay: inline-block;</div><div class=\"line\">\toverflow: hidden;</div><div class=\"line\">\ttransition: .3s all ease-in-out;</div><div class=\"line\">&#125;</div><div class=\"line\">.photo-img&#123;</div><div class=\"line\">\tdisplay: inline-block;</div><div class=\"line\">\tvertical-align: middle;</div><div class=\"line\">\ttransition: .5s all ease-in-out; /* vendorless fallback */</div><div class=\"line\">\t-o-transition: .5s all ease-in-out; /* opera */</div><div class=\"line\">\t-ms-transition: .5s all ease-in-out; /* IE 10 */</div><div class=\"line\">\t-moz-transition: .5s all ease-in-out; /* Firefox */</div><div class=\"line\">\t-webkit-transition: .5s all ease-in-out; /*safari and chrome */</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">// 사진 hover, focus시 약간 확대됩니다. </div><div class=\"line\">.photo-link:hover .photo-img,</div><div class=\"line\">.photo-link:focus .photo-img &#123;</div><div class=\"line\">\ttransform: scale(1.1);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">// 사진 클릭시 JavaScript에서 class=&quot;on&quot;이 추가되어 아래 style이 적용됩니다. </div><div class=\"line\">.photo-link.on&#123;</div><div class=\"line\">\tposition: absolute;</div><div class=\"line\">\tz-index: 90;</div><div class=\"line\">\ttop: 0;</div><div class=\"line\">\tleft: 0;</div><div class=\"line\">\twidth: 100%;</div><div class=\"line\">\theight: inherit;</div><div class=\"line\">\tanimation: ani-opacity 1s;</div><div class=\"line\">&#125;</div><div class=\"line\">.photo-link.on .photo-img&#123;</div><div class=\"line\">\twidth: 100%;</div><div class=\"line\">\theight: 100%;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">// CSS Animation</div><div class=\"line\">@keyframes ani-opacity &#123;</div><div class=\"line\">\t0% &#123; </div><div class=\"line\">\t\topacity: 0; </div><div class=\"line\">\t&#125;</div><div class=\"line\">\t100% &#123; </div><div class=\"line\">\t\topacity: 1; </div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">// 클릭된 사진을 제외한 사진은 안보이게 하는 class=&quot;off&quot; style입니다. </div><div class=\"line\">.photo-link.off&#123;</div><div class=\"line\">\tdisplay:none;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"4-사진-click시-중앙에-확대-확대시-검정배경-높이만큼-나오기\"><a href=\"#4-사진-click시-중앙에-확대-확대시-검정배경-높이만큼-나오기\" class=\"headerlink\" title=\"4) 사진 click시 중앙에 확대, 확대시 검정배경 높이만큼 나오기\"></a>4) 사진 click시 중앙에 확대, 확대시 검정배경 높이만큼 나오기</h4><h5 id=\"검정배경에-관한-코드\"><a href=\"#검정배경에-관한-코드\" class=\"headerlink\" title=\"검정배경에 관한 코드\"></a>검정배경에 관한 코드</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">// 검정배경 Div요소 만들기 </div><div class=\"line\">var photoGallery = document.querySelector(&apos;.photo-gallery&apos;).firstElementChild;</div><div class=\"line\">var menuCoverDiv = document.createElement(&apos;div&apos;);</div><div class=\"line\">menuCoverDiv.setAttribute(&apos;class&apos;, &apos;menu-cover&apos;);</div><div class=\"line\">// 검정 배경 나오게 하기 </div><div class=\"line\">function menuCover(el) &#123;</div><div class=\"line\">\t// 목표노드.부모노드.insertBefore(insert삽입할노드, target목표노드)</div><div class=\"line\">\tphotoGallery.parentNode.insertBefore(menuCoverDiv, photoGallery);</div><div class=\"line\">\t// 확대된 사진의 height</div><div class=\"line\">\tvar photoHeight = el.offsetHeight;</div><div class=\"line\">\t// 사진크기와 브라우저크기를 비교하여 검정 배경 height 정하기</div><div class=\"line\">\tif((windowHeight-90) &gt; photoHeight)&#123;</div><div class=\"line\">\t\tmenuCoverDiv.style.height = (windowHeight-10)+&apos;px&apos;;</div><div class=\"line\">\t&#125;else&#123;</div><div class=\"line\">\t\tmenuCoverDiv.style.height = (photoHeight+30)+&apos;px&apos;;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\">// 검정 배경 없애기 </div><div class=\"line\">function removeMenuCover() &#123;</div><div class=\"line\">\tphotoGallery.parentNode.removeChild(menuCoverDiv);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h5 id=\"사진-클릭시-확대되는-코드\"><a href=\"#사진-클릭시-확대되는-코드\" class=\"headerlink\" title=\"사진 클릭시 확대되는 코드\"></a>사진 클릭시 확대되는 코드</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\">// 각 사진 클릭시 photoShow 함수 실행 </div><div class=\"line\">function photoAddEvent() &#123;</div><div class=\"line\">\tfor(var i=0; i&lt;photoLink.length; i++)&#123;</div><div class=\"line\">\t\tphotoLink[i].addEventListener(&quot;click&quot;, photoShow, false);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\">// 사진 클릭시 커지는 함수 </div><div class=\"line\">function photoShow() &#123;</div><div class=\"line\">\tconsole.log(&quot;photoShow함수실행&quot;);</div><div class=\"line\">\t// 현재 사진 </div><div class=\"line\">\tindex = photoLink.indexOf(this);</div><div class=\"line\">\t// 현재 사진 제외하고 안보이게 처리 </div><div class=\"line\">\tfor(var j=0; j&lt;photoLink.length; j++)&#123;</div><div class=\"line\">\t\tif( j !== index ) &#123;</div><div class=\"line\">\t\t\tphotoLink[j].classList.toggle(&quot;off&quot;);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t// 현재 사진 확대 </div><div class=\"line\">\tthis.classList.toggle(&quot;on&quot;);</div><div class=\"line\">\tif(!photoClick)&#123;</div><div class=\"line\">\t\tmenuCover(this);</div><div class=\"line\">\t\tphotoClick = !photoClick;</div><div class=\"line\">\t\tconsole.log(&apos;사진 클릭&apos;);</div><div class=\"line\">\t&#125;else&#123;</div><div class=\"line\">\t\tremoveMenuCover();</div><div class=\"line\">\t\tphotoClick = !photoClick;</div><div class=\"line\">\t\tindex = 0;</div><div class=\"line\">\t\tconsole.log(&apos;사진 클릭해제&apos;);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"5-슬라이드-쇼-버튼-클릭시-슬라이드-쇼-재생-다시-클릭시-멈추는-기능\"><a href=\"#5-슬라이드-쇼-버튼-클릭시-슬라이드-쇼-재생-다시-클릭시-멈추는-기능\" class=\"headerlink\" title=\"5) 슬라이드 쇼 버튼 클릭시 슬라이드 쇼 재생, 다시 클릭시 멈추는 기능\"></a>5) 슬라이드 쇼 버튼 클릭시 슬라이드 쇼 재생, 다시 클릭시 멈추는 기능</h4><h4 id=\"6-슬라이드-쇼-재생시-사진을-클릭하면-재생이-끝나는-기능\"><a href=\"#6-슬라이드-쇼-재생시-사진을-클릭하면-재생이-끝나는-기능\" class=\"headerlink\" title=\"6) 슬라이드 쇼 재생시 사진을 클릭하면 재생이 끝나는 기능\"></a>6) 슬라이드 쇼 재생시 사진을 클릭하면 재생이 끝나는 기능</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div></pre></td><td class=\"code\"><pre><div class=\"line\">// 슬라이드 쇼를 멈추고 사진들이 원래대로 돌아오게 하는 함수 </div><div class=\"line\">function stopSlideShow(e)&#123;</div><div class=\"line\">\tconsole.log(&quot;stopSlideShow함수실행&quot;);</div><div class=\"line\">\t// 슬라이드 버튼이 눌러졌다면 </div><div class=\"line\">\tif(chkBtn || PauseBtnOn)&#123;</div><div class=\"line\">\t\tphotoLink[index].classList.remove(&quot;on&quot;);</div><div class=\"line\">\t&#125;else&#123;</div><div class=\"line\">\t\tphotoLink[index-1].classList.remove(&quot;on&quot;);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\tindex = 0;</div><div class=\"line\">\tclearInterval(slideInterval);</div><div class=\"line\">\tphotoAddEvent();</div><div class=\"line\">\tremoveMenuCover();</div><div class=\"line\">\tslideBtn.classList.remove(&quot;pause-interval&quot;);</div><div class=\"line\">\tslideBtn.classList.remove(&quot;on&quot;);</div><div class=\"line\">\tfor(var j=0; j&lt;photoLink.length; j++)&#123;</div><div class=\"line\">\t\tphotoLink[j].classList.remove(&quot;off&quot;);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\tchkBtn = false;</div><div class=\"line\">\tPauseBtnOn = false;</div><div class=\"line\">\tphotoClick = false;</div><div class=\"line\">\tremoveStopSlideShow();</div><div class=\"line\">&#125;</div><div class=\"line\">// stopSlideShow함수 removeEvent</div><div class=\"line\">function removeStopSlideShow()&#123;</div><div class=\"line\">\tfor(var j=0; j&lt;photoLink.length; j++)&#123;</div><div class=\"line\">\t\tphotoLink[j].removeEventListener(&quot;click&quot;, stopSlideShow, false);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\">// 슬라이드 쇼 함수</div><div class=\"line\">function slideShow() &#123;</div><div class=\"line\">\tfor(var j=0; j&lt;photoLink.length; j++)&#123;</div><div class=\"line\">\t\t// 슬라이드 쇼 함수 진행 중 확대된 사진을 클릭하면 슬라이드 쇼 멈추기 </div><div class=\"line\">\t\tphotoLink[j].addEventListener(&quot;click&quot;, stopSlideShow, false);</div><div class=\"line\">\t\tif( j !== index ) &#123;</div><div class=\"line\">\t\t\tphotoLink[j].classList.add(&quot;off&quot;);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\tphotoLink[index].classList.add(&quot;on&quot;);</div><div class=\"line\">\tmenuCover(photoLink[index]);</div><div class=\"line\">\tglobal.slideInterval = setInterval(function()&#123;</div><div class=\"line\">\t\tindex++;</div><div class=\"line\">\t\tif(index &lt; photoLink.length)&#123;</div><div class=\"line\">\t\t\tphotoLink[index-1].classList.remove(&quot;on&quot;);</div><div class=\"line\">\t\t\tphotoLink[index-1].classList.add(&quot;off&quot;);</div><div class=\"line\">\t\t\tphotoLink[index].classList.remove(&quot;off&quot;);</div><div class=\"line\">\t\t\tphotoLink[index].classList.add(&quot;on&quot;);</div><div class=\"line\">\t\t\tmenuCover(photoLink[index]);</div><div class=\"line\">\t\t\tconsole.log(index);</div><div class=\"line\">\t\t&#125;else &#123; // 슬라이드 쇼 끝난 후 </div><div class=\"line\">\t\t\tchkBtn = false;</div><div class=\"line\">\t\t\tPauseBtnOn = false;</div><div class=\"line\">\t\t\tphotoClick = false;</div><div class=\"line\">\t\t\tstopSlideShow();</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;, 2000);</div><div class=\"line\">&#125;</div><div class=\"line\">// 슬라이드 버튼 클릭시 </div><div class=\"line\">slideBtn.onclick = function()&#123;</div><div class=\"line\">\t// 슬라이드 재생 </div><div class=\"line\">\tif(!chkBtn)&#123;</div><div class=\"line\">\t\tslideShow();</div><div class=\"line\">\t\tphotoRemoveEvent();</div><div class=\"line\">\t\tslideBtn.classList.remove(&quot;pause-interval&quot;);</div><div class=\"line\">\t\tslideBtn.classList.add(&quot;on&quot;);</div><div class=\"line\">\t\tchkBtn = true;</div><div class=\"line\">\t&#125;else&#123; // 슬라이드 멈춤 </div><div class=\"line\">\t\tclearInterval(global.slideInterval);</div><div class=\"line\">\t\tslideBtn.classList.remove(&quot;on&quot;);</div><div class=\"line\">\t\tslideBtn.classList.add(&quot;pause-interval&quot;);</div><div class=\"line\">\t\tchkBtn = false;</div><div class=\"line\">\t\tPauseBtnOn = true;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n"},{"title":"JavaScript String 프로퍼티, 메소드","url":"https://sharryhong.github.io/2017/01/09/javascript-string/","content":"<img src=\"/2017/01/09/javascript-string/js.png\" alt=\"[JavaScript]\" title=\"[JavaScript]\">\n<blockquote>\n<p>Free Project를 진행하면서 자주 사용하는 프로퍼티, 메소드 등을 계속 추가할 예정입니다. :)</p>\n</blockquote>\n<h4 id=\"목차\"><a href=\"#목차\" class=\"headerlink\" title=\"목차\"></a>목차</h4><p><a href=\"#charAt-메소드\">charAt 메소드</a><br><a href=\"#replace-메소드\">replace 메소드</a><br><a href=\"#repeat-메소드\">repeat 메소드</a><br><a href=\"#slice-메소드\">slice 메소드</a><br><a href=\"#substring-메소드\">substring 메소드</a></p>\n<h2 id=\"charAt-메소드\"><a href=\"#charAt-메소드\" class=\"headerlink\" title=\"charAt 메소드\"></a><a href=\"https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/String/charAt\" target=\"_blank\" rel=\"external\">charAt 메소드</a></h2><p>문자열에서 특정 위치의 문자를 구할 수 있습니다. </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">str.charAt(index)</div></pre></td></tr></table></figure>\n<p>index : 문자열의 위치 인덱스 값으로 0부터 시작<br>리턴값 : index 위치의 문자 </p>\n<p>알고리즘 코드에 올린 내용입니다.<br>마지막 번호 4개를 제외하고 *로 보이게 하기 (핸드폰번호 가리기)<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">function hide_numbers(s)&#123;</div><div class=\"line\">\tvar result = &quot;&quot;;</div><div class=\"line\">\tvar sLength = s.length;</div><div class=\"line\">\tfor(var i = 0; i &lt; sLength; i++)&#123;</div><div class=\"line\">\t\tresult += i &lt; sLength - 4 ? &quot;*&quot; : s.charAt(i);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\treturn result;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">console.log(&quot;결과 : &quot; + hide_numbers(&apos;01033334444&apos;));</div></pre></td></tr></table></figure></p>\n<p>문자열의 길이 s.length - 4 보다 작다면, 즉, 마지막 4개 이전의 index 값에는 *를 대입하고, 나머지는 원래의 s.charAt(i)값을 대입합니다. </p>\n<p><sup><a href=\"#목차\">(목차로 돌아가기)</a></sup></p>\n<h2 id=\"replace-메소드\"><a href=\"#replace-메소드\" class=\"headerlink\" title=\"replace 메소드\"></a><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace\" target=\"_blank\" rel=\"external\">replace 메소드</a></h2><p>어떤 패턴에 일치하는 일부 또는 모든 부분이 교체된 새로운 문자열을 반환합니다.</p>\n<p>String.prototype.replace()</p>\n<h4 id=\"문법\"><a href=\"#문법\" class=\"headerlink\" title=\"문법\"></a>문법</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">str.replace(regexp|substr, newSubStr|function)</div></pre></td></tr></table></figure>\n<p>regexp : 정규표현식, substr : 문자열<br>newSubStr : 새로운 문자열, function : 함수</p>\n<h4 id=\"예-속성-class-값-중-‘no-js’-값을-‘js’로-변경하기\"><a href=\"#예-속성-class-값-중-‘no-js’-값을-‘js’로-변경하기\" class=\"headerlink\" title=\"예) 속성 class 값 중 ‘no-js’ 값을 ‘js’로 변경하기\"></a>예) 속성 class 값 중 ‘no-js’ 값을 ‘js’로 변경하기</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">var html_class_attr = element.getAttribute(&apos;class&apos;);</div><div class=\"line\">element.setAttribute(&apos;class&apos;, html_class_attr.replace(/no-js/,&apos;js&apos;));</div></pre></td></tr></table></figure>\n<p><sup><a href=\"#목차\">(목차로 돌아가기)</a></sup></p>\n<h2 id=\"repeat-메소드\"><a href=\"#repeat-메소드\" class=\"headerlink\" title=\"repeat 메소드\"></a><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/repeat\" target=\"_blank\" rel=\"external\">repeat 메소드</a></h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">str.repeat(count)</div></pre></td></tr></table></figure>\n<p><strong>count</strong> : 0이상의 정수. 기존의 문자열을 반복할 횟수<br>리턴값 : 횟수만큼 복사를 포함하는 새 문자열 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&quot;abc&quot;.repeat(2); // 결과 : // &quot;abcabc&quot;</div></pre></td></tr></table></figure>\n<h6 id=\"브라우저-호환-IE-오페라-지원안함\"><a href=\"#브라우저-호환-IE-오페라-지원안함\" class=\"headerlink\" title=\"브라우저 호환 : IE, 오페라 지원안함\"></a>브라우저 호환 : IE, 오페라 지원안함</h6><p>ES6에서 추가된 메소드입니다. </p>\n<p><sup><a href=\"#목차\">(목차로 돌아가기)</a></sup></p>\n<h2 id=\"slice-메소드\"><a href=\"#slice-메소드\" class=\"headerlink\" title=\"slice 메소드\"></a><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/slice\" target=\"_blank\" rel=\"external\">slice 메소드</a></h2><p>지정한 문자열 시작위치 ~ 끝위치까지의 문자열을 반환합니다.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">str.slice(beginSlice[, endSlice])</div></pre></td></tr></table></figure>\n<p><sup><a href=\"#목차\">(목차로 돌아가기)</a></sup></p>\n<h2 id=\"substring-메소드\"><a href=\"#substring-메소드\" class=\"headerlink\" title=\"substring 메소드\"></a><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/substring\" target=\"_blank\" rel=\"external\">substring 메소드</a></h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">str.substring(indexStart[, indexEnd])</div></pre></td></tr></table></figure>"},{"title":"JavaScript - Web API - Element","url":"https://sharryhong.github.io/2017/01/07/javascript-webAPI-Element/","content":"<img src=\"/2017/01/07/javascript-webAPI-Element/dom.png\" alt=\"[JavaScript DOM]\" title=\"[JavaScript DOM]\">\n<blockquote>\n<p> Free Project를 진행하면서 자주 사용하는 Element Web API를 계속 추가할 예정입니다. :)</p>\n</blockquote>\n<h2 id=\"element-classList\"><a href=\"#element-classList\" class=\"headerlink\" title=\"element.classList\"></a><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Element/classList\" target=\"_blank\" rel=\"external\">element.classList</a></h2><p>요소의 class속성 목록을 반환합니다. </p>\n<h6 id=\"브라우저-호환-IE10이상\"><a href=\"#브라우저-호환-IE10이상\" class=\"headerlink\" title=\"브라우저 호환 : IE10이상\"></a>브라우저 호환 : IE10이상</h6><p><strong>add</strong> : 요소의 클래스 목록에 클래스 추가<br><strong>remove</strong> : 요소의 클래스 목록에서 클래스 삭제<br><strong>toggle</strong> : 요소의 클래스 목록에서 특정 클래스 전환<br><strong>contains</strong> : 요소의 클래스 목록이 특정 클래스를 포함 여부 확인</p>\n<p><strong>classList를 지원하는지 확인</strong>하고 class속성에서 no-js값을 js로 변경하는 코드<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">(function(global)&#123;</div><div class=\"line\">  &apos;use strict&apos;;</div><div class=\"line\"></div><div class=\"line\">  // &lt;html&gt; 요소를 찾아서 class 속성에서 &apos;no-js&apos; 값을 &apos;js&apos;로 변경</div><div class=\"line\">  global.html = query(&apos;html&apos;);</div><div class=\"line\"></div><div class=\"line\">  if ( html.classList ) &#123;</div><div class=\"line\">    // 신형 방식 IE 10+</div><div class=\"line\">    html.classList.remove(&apos;no-js&apos;);</div><div class=\"line\">    html.classList.add(&apos;js&apos;);</div><div class=\"line\">  &#125; else &#123;</div><div class=\"line\">    // 구형 방식</div><div class=\"line\">    var html_class_attr = html.getAttribute(&apos;class&apos;);</div><div class=\"line\">    // 설정</div><div class=\"line\">    html.setAttribute(&apos;class&apos;, html_class_attr.replace(/no-js/,&apos;js&apos;));</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;(this));</div></pre></td></tr></table></figure></p>\n<h3 id=\"관련-My-포스팅\"><a href=\"#관련-My-포스팅\" class=\"headerlink\" title=\"관련 My 포스팅\"></a>관련 My 포스팅</h3><p><a href=\"https://sharryhong.github.io/2016/12/28/javascript-dom/\">JavaScript DOM</a></p>\n<h3 id=\"참고-자료\"><a href=\"#참고-자료\" class=\"headerlink\" title=\"참고 자료\"></a>참고 자료</h3><p><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Element\" target=\"_blank\" rel=\"external\">Web APIs Element - MDN</a></p>\n"},{"title":"JavaScript Array 프로퍼티, 메소드","url":"https://sharryhong.github.io/2017/01/07/javascript-array/","content":"<img src=\"/2017/01/07/javascript-array/js.png\" alt=\"[JavaScript]\" title=\"[JavaScript]\">\n<blockquote>\n<p>Free Project를 진행하면서 자주 사용하는 프로퍼티, 메소드 등을 계속 추가할 예정입니다. :)</p>\n</blockquote>\n<h4 id=\"목차\"><a href=\"#목차\" class=\"headerlink\" title=\"목차\"></a>목차</h4><p><a href=\"#length-프로퍼티\">length 프로퍼티</a><br><a href=\"#indexOf-메소드\">indexOf 메소드</a><br><a href=\"#splice-메소드\">splice 메소드</a></p>\n<h2 id=\"length-프로퍼티\"><a href=\"#length-프로퍼티\" class=\"headerlink\" title=\"length 프로퍼티\"></a><a href=\"https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Array/length\" target=\"_blank\" rel=\"external\">length 프로퍼티</a></h2><p>배열의 원소 개수를 나타냅니다.</p>\n<p>만약에 배열 index에 임의대로 값을 저장하면 length는 가장 큰 index를 기준으로 정해집니다.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">var arr = []; // 변수 배열로 초기화</div><div class=\"line\">console.log(arr.length); // 0</div><div class=\"line\"></div><div class=\"line\">arr = [2,1,2]; // arr.length = 3</div><div class=\"line\">arr[100] = 5; </div><div class=\"line\">console.log(arr.length); // 101</div></pre></td></tr></table></figure></p>\n<h5 id=\"예-DOM-요소-개수만큼-class-name-추가하기\"><a href=\"#예-DOM-요소-개수만큼-class-name-추가하기\" class=\"headerlink\" title=\"예) DOM 요소 개수만큼 class name 추가하기\"></a>예) DOM 요소 개수만큼 class name 추가하기</h5><p><a href=\"https://sharryhong.github.io/2017/01/04/project-gallery/\">해당 Free Project 바로가기</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">// class=&quot;photo-link&quot;인 요소들을 모두 선택합니다.</div><div class=\"line\">// 이 때 변수 photoLink에 요소들이 유사배열로 저장됩니다. </div><div class=\"line\">var photoLink = document.querySelectorAll(&apos;.photo-link&apos;);</div><div class=\"line\"></div><div class=\"line\">for(var i=0; i&lt;photoLink.length; i++)&#123;</div><div class=\"line\"></div><div class=\"line\">\tphotoLink[i].onclick = function() &#123;</div><div class=\"line\">\t\t// 클릭한 요소가 몇번째 index에 있는가 </div><div class=\"line\">\t\tvar idx = photoLink.indexOf(this);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tfor(var j=0; j&lt;photoLink.length; j++)&#123;</div><div class=\"line\">\t\t\t// 클릭한 요소가 아닌 모든 요소 선택 </div><div class=\"line\">\t\t\tif( j !== idx ) &#123;</div><div class=\"line\">\t\t\t\tphotoLink[j].classList.toggle(&quot;off&quot;);</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t// 클릭한 요소에 class name 토글(add, remove)</div><div class=\"line\">\t\tthis.classList.toggle(&quot;on&quot;);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><sup><a href=\"#목차\">(목차로 돌아가기)</a></sup></p>\n<h2 id=\"indexOf-메소드\"><a href=\"#indexOf-메소드\" class=\"headerlink\" title=\"indexOf 메소드\"></a><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf\" target=\"_blank\" rel=\"external\">indexOf 메소드</a></h2><p>배열에서 지정된 요소를 찾을 수있는 첫 번째 인덱스를 반환하고 존재하지 않으면 -1을 반환합니다.</p>\n<h5 id=\"예-배열-중-지정한-값-삭제하는-함수-만들기\"><a href=\"#예-배열-중-지정한-값-삭제하는-함수-만들기\" class=\"headerlink\" title=\"예) 배열 중 지정한 값 삭제하는 함수 만들기\"></a>예) 배열 중 지정한 값 삭제하는 함수 만들기</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">var originArray = [0,1,2,3,4,5];</div><div class=\"line\"></div><div class=\"line\">function removeValue(originArray, idx) &#123;</div><div class=\"line\">    // 매개변수 idx값이 몇번째 index인지 알아냅니다. </div><div class=\"line\">    var idx_check = originArray.indexOf(idx);</div><div class=\"line\">    // 만약 -1이라면 배열에 없는 값이므로 false반환하고 끝냅니다. </div><div class=\"line\">    if ( idx_check === -1 ) &#123;</div><div class=\"line\">        return false;</div><div class=\"line\">    &#125; </div><div class=\"line\">    // 만약 -1보다 크다면 배열에 있는 값입니다. </div><div class=\"line\">    if ( idx_check &gt; -1 ) &#123;</div><div class=\"line\">        // splice메소드를 사용하여 해당 index로부터 1개를 삭제합니다. </div><div class=\"line\">        return originArray.splice(idx_check, 1);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">removeValue(originArray, 3); // 결과 originArray = [0,1,2,4,5]</div></pre></td></tr></table></figure>\n<p><sup><a href=\"#목차\">(목차로 돌아가기)</a></sup></p>\n<h2 id=\"splice-메소드\"><a href=\"#splice-메소드\" class=\"headerlink\" title=\"splice 메소드\"></a><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/splice\" target=\"_blank\" rel=\"external\">splice 메소드</a></h2><p>배열의 내용을 추가/제거하는 데 사용됩니다.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">array.splice(start, deleteCount[, item1[, item2[, ...]]])</div></pre></td></tr></table></figure>\n<p><strong>start</strong> : 변경이 시작되는 인덱스<br><strong>deleteCount</strong> : 배열에서 제거를 할 요소의 수<br><strong>itemN</strong> : 배열에 추가될 요소</p>\n<p><sup><a href=\"#목차\">(목차로 돌아가기)</a></sup></p>\n<h3 id=\"참고-자료\"><a href=\"#참고-자료\" class=\"headerlink\" title=\"참고 자료\"></a>참고 자료</h3><p><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array\" target=\"_blank\" rel=\"external\">Array - MDN</a><br>인사이드 자바스크립트 - 한빛미디어</p>\n<h3 id=\"연관-포스팅\"><a href=\"#연관-포스팅\" class=\"headerlink\" title=\"연관 포스팅\"></a>연관 포스팅</h3><p><a href=\"https://sharryhong.github.io/2017/02/13/javascript-array02/\">JavaScript Array - forEach, map, filter 내장 메소드</a></p>\n"},{"title":"CSS3 Hover Effect Transition, Transform, Animation","url":"https://sharryhong.github.io/2017/01/06/link-css3/","content":"<img src=\"/2017/01/06/link-css3/css3.jpg\" alt=\"[ CSS3 효과 ]\" title=\"[ CSS3 효과 ]\">\n<p><a href=\"http://james-star.com/answers/en/css3-hover-effect-transitions-transformations-and-animations/\" target=\"_blank\" rel=\"external\">CSS3 효과 모음 사이트</a></p>\n<blockquote>\n<p>CSS3 Transition, Transform, Animation 효과를 직관적으로 보여주는 사이트입니다.<br>재미있고 쉽게 익힐 수 있습니다. ^^</p>\n</blockquote>\n"},{"title":"Movie 박스오피스 - AJAX, Movie API","url":"https://sharryhong.github.io/2016/12/31/project-ajax-movieapi/","content":"<p><a href=\"https://sharryhong.github.io/javascript/05_AJAX/ajax-json-movieapi.html\">결과화면 보기</a></p>\n<img src=\"/2016/12/31/project-ajax-movieapi/movie.jpg\" alt=\"[결과 이미지]\" title=\"[결과 이미지]\">\n<h3 id=\"박스오피스-사이트-AJAX-통신-Movie-API-사용\"><a href=\"#박스오피스-사이트-AJAX-통신-Movie-API-사용\" class=\"headerlink\" title=\"박스오피스 사이트 : AJAX 통신, Movie API 사용\"></a>박스오피스 사이트 : AJAX 통신, Movie API 사용</h3><blockquote>\n<p>2017-01-04 코드 리펙토링 : 익스플로러(IE)에서는 for of문이 인식되지 않아 일반 for문으로 처리하였습니다. 하단에 설명 추가 </p>\n</blockquote>\n<h3 id=\"특징-및-기능\"><a href=\"#특징-및-기능\" class=\"headerlink\" title=\"특징 및 기능\"></a>특징 및 기능</h3><p>1) <a href=\"http://www.kobis.or.kr/kobisopenapi/homepg/main/main.do\" target=\"_blank\" rel=\"external\">영화진흥위원회가 제공하는 <strong>영화 API</strong>사용</a><br>: 로컬 서버에서는 구현이 잘 되고 있으나 github의 gh-pages에서는 API data가 불러와 지지 않습니다. 그래서 2016-12-19일 기준으로 JSON파일을 만들어 연결하였습니다. </p>\n<p>2) <strong><a href=\"https://sharryhong.github.io/2016/12/29/javascript-ajax\">AJAX 비동기 통신 사용</a></strong></p>\n<p>3) template 동적 생성</p>\n<p>4) 랭킹 1~3위는 빨강배경, 4~10위는 회색배경 적용</p>\n<p>5) 순위 변경 data가 0 일땐 <code>녹색 -</code> 표시, 순위 상승시 <code>빨강 화살표</code>, 순위 하락시 data 중 마이너스 삭제하고 <code>파랑 화살표</code> 표시 </p>\n<p>추가 예정 : 영화 상세 페이지<br>디자인 : CGV사이트 참고<br>영화 포스터 : API에서 제공하지 않아 못 넣었습니다. 아쉽네요 ㅜㅜ </p>\n<h3 id=\"코드-설명\"><a href=\"#코드-설명\" class=\"headerlink\" title=\"코드 설명\"></a>코드 설명</h3><p>1) AJAX관련 코드 : <a href=\"https://sharryhong.github.io/2016/12/29/javascript-ajax\">자세한 설명은 여기에서</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">var xhr = new XMLHttpRequest();</div><div class=\"line\">xhr.open(&apos;GET&apos;, &quot;http://www.kobis.or.kr/kobisopenapi/webservice/rest/boxoffice/searchDailyBoxOfficeList.json?key=발급받은키&amp;targetDt=&quot;+ today);</div><div class=\"line\">xhr.send();</div></pre></td></tr></table></figure>\n<p>제공하는 영화 API URL 맨 뒤에는 알고싶은 날짜를 적으면 됩니다. 저는 <a href=\"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Date\" target=\"_blank\" rel=\"external\">Date() 클래스</a>를 사용하여 하루 전 날짜를 넣어주었습니다. (당일 날짜는 안되더군요.)</p>\n<p>2) 하루 전 날짜 구하기</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">var d = new Date();</div><div class=\"line\">var yy = d.getFullYear();</div><div class=\"line\">var mm = d.getMonth() + 1;</div><div class=\"line\">var dd = d.getDate() - 1;</div><div class=\"line\">// var today = yy + &quot;&quot; + &quot;&quot; + mm + &quot;&quot; + dd;</div><div class=\"line\">// 혹은</div><div class=\"line\">var today = `$&#123;yy&#125;$&#123;mm&#125;$&#123;dd&#125;`;</div></pre></td></tr></table></figure>\n<p>Date() 클래스의 인스턴스 d<br>d.getMonth() 리턴값은 0(1월) ~ 11(12월)</p>\n<p>3) 랭킹 1~3위는 빨강배경, 4~10위는 회색배경 적용</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">var rank_array = document.querySelectorAll(&apos;.rank&apos;);</div><div class=\"line\">var gray_array = Array.prototype.slice.apply(rank_array);</div><div class=\"line\">var gray_rank = gray_array.slice(3);</div><div class=\"line\">for(var i=0; i&lt;gray_rank.length; i++)&#123;</div><div class=\"line\">\tgray_rank[i].classList.add(&apos;gray&apos;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><code>&lt;strong class=&quot;rank&quot;&gt;&#39;+&#39;No.&#39;+movie.rank+&#39;&lt;/strong&gt;&#39;</code> 전체를 유사배열로 받아옵니다.<br>이 것을 <code>Array.prototype.slice.apply(rank_array);</code>로 실제 배열처럼 사용할 수 있게 합니다.<br><code>.slice(3)</code>은 네번째 배열값부터 끝까지 적용한다는 뜻입니다.<br>즉, 이 코드는 <code>class=&quot;rank&quot;</code>를 가진 전체 요소 중에 네번째 배열값부터 끝까지 class=”gray”를 추가시킨다. 는 것인데 css상에는 아래처럼 되어있어 자동으로 회색배경이 적용됩니다.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">.movie-contents .rank.gray&#123;</div><div class=\"line\">\tbackground: #555;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"전체-코드\"><a href=\"#전체-코드\" class=\"headerlink\" title=\"전체 코드\"></a>전체 코드</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div></pre></td><td class=\"code\"><pre><div class=\"line\">(function(global, XHR)&#123;</div><div class=\"line\">\t&apos;use strict&apos;;</div><div class=\"line\"></div><div class=\"line\">\tvar createXHR = (function() &#123;</div><div class=\"line\">\t\tXHR = XHR || ActiveXObject(&apos;Microsoft.XMLHTTP&apos;);</div><div class=\"line\">\t\treturn function() &#123;</div><div class=\"line\">\t\t\treturn new XHR;</div><div class=\"line\">\t\t&#125;;</div><div class=\"line\">\t&#125;)();</div><div class=\"line\"></div><div class=\"line\">\tvar xhr = createXHR();</div><div class=\"line\">\tvar result_view = document.querySelector(&apos;.ajax-result&apos;);</div><div class=\"line\"></div><div class=\"line\">\t//오늘 날짜</div><div class=\"line\">\tvar d = new Date();</div><div class=\"line\">\tvar yy = d.getFullYear();</div><div class=\"line\">\tvar mm = d.getMonth() + 1;</div><div class=\"line\">\tvar dd = d.getDate() - 1;</div><div class=\"line\">\tvar today = `$&#123;yy&#125;$&#123;mm&#125;$&#123;dd&#125;`;</div><div class=\"line\"></div><div class=\"line\">\txhr.open(&apos;GET&apos;, &quot;http://www.kobis.or.kr/kobisopenapi/webservice/rest/boxoffice/searchDailyBoxOfficeList.json?key=발급받은키&amp;targetDt=&quot;+ today);</div><div class=\"line\">\txhr.send();</div><div class=\"line\"></div><div class=\"line\">\txhr.onreadystatechange = function() &#123;</div><div class=\"line\">\t\tif ( this.status === 200 &amp;&amp; this.readyState === 4 ) &#123;</div><div class=\"line\">\t\t\tconsole.log(&apos;통신 데이터 전송 성공! ^^&apos;); </div><div class=\"line\">\t\t\t// console.log(this.response);</div><div class=\"line\">\t\t\t// text file</div><div class=\"line\">\t\t\tvar getmovies = this.response; </div><div class=\"line\">\t\t\tvar template = &apos;&apos;;</div><div class=\"line\">\t\t\t// text -&gt; object </div><div class=\"line\">\t\t\tgetmovies = JSON.parse(getmovies); </div><div class=\"line\">\t\t\t// json파일내에 있는 속성 results</div><div class=\"line\">\t\t\tvar movies = getmovies.boxOfficeResult.dailyBoxOfficeList; </div><div class=\"line\">\t\t\t// movies 반복 순환 처리</div><div class=\"line\">\t\t\tfor(var movie of movies) &#123;</div><div class=\"line\">\t\t\t\ttemplate += [</div><div class=\"line\">\t\t\t\t\t&apos;&lt;li class=&quot;movie-contents&quot;&gt;&apos;,</div><div class=\"line\">\t\t\t\t\t\t&apos;&lt;strong class=&quot;rank&quot;&gt;&apos;+&apos;No.&apos;+movie.rank+&apos;&lt;/strong&gt;&apos;,</div><div class=\"line\">\t\t\t\t\t\t&apos;&lt;h3 class=&quot;name&quot;&gt;&apos;+movie.movieNm+&apos;&lt;/h3&gt;&apos;,</div><div class=\"line\">\t\t\t\t\t\t&apos;&lt;p class=&quot;opendt small&quot;&gt;&apos;+&apos;개봉일 : &apos;+&apos;&lt;span&gt;&apos;+movie.openDt+&apos;&lt;/span&gt;&apos;+&apos;&lt;/p&gt;&apos;,</div><div class=\"line\">\t\t\t\t\t\t&apos;&lt;p class=&quot;audiacc small&quot;&gt;&apos;+&apos;누적 관객 수 : &apos;+&apos;&lt;span&gt;&apos;+movie.audiAcc+&apos;&lt;/span&gt;&apos;+&apos;명&apos;+&apos;&lt;/p&gt;&apos;,</div><div class=\"line\">\t\t\t\t\t\t&apos;&lt;p class=&quot;rankinten small&quot;&gt;&apos;+&apos;순위 변화 : &apos;+&apos;&lt;span class=&quot;rank-change&quot;&gt;&apos;+movie.rankInten+&apos;&lt;/span&gt;&apos;+&apos;&lt;/p&gt;&apos;,</div><div class=\"line\">\t\t\t\t\t&apos;&lt;/li&gt;&apos;</div><div class=\"line\">\t\t\t\t].join(&apos;&apos;);</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125; else &#123;</div><div class=\"line\">\t\t\tconsole.log(&apos;통신 데이터 전송 실패&apos;);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\tresult_view.innerHTML = template;</div><div class=\"line\"></div><div class=\"line\">\t\t// 랭킹 4위부터 회색배경 </div><div class=\"line\">\t\tvar rank_array = document.querySelectorAll(&apos;.rank&apos;);</div><div class=\"line\">\t\tvar gray_array = Array.prototype.slice.apply(rank_array);</div><div class=\"line\">\t\tvar gray_rank = gray_array.slice(3);</div><div class=\"line\">\t\tfor(var i=0; i&lt;gray_rank.length; i++)&#123;</div><div class=\"line\">\t\t\tgray_rank[i].classList.add(&apos;gray&apos;);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t// 순위변경 표시하기</div><div class=\"line\">\t\tvar rankinten_array = document.querySelectorAll(&apos;.rank-change&apos;);</div><div class=\"line\">\t\tfor(var a=0; a&lt;rankinten_array.length; a++)&#123;</div><div class=\"line\">\t\t\tvar rankinten_el = rankinten_array[a];</div><div class=\"line\">\t\t\tvar rankinten_el_first = rankinten_el.firstChild;</div><div class=\"line\">\t\t\t// console.log(rankinten_el_first.nodeValue);</div><div class=\"line\">\t\t\t// 순위변경이 없다면 숫자 0을 없애고 css에 적용한 zero클래스 붙이기</div><div class=\"line\">\t\t\tif(rankinten_el_first.nodeValue == 0)&#123;</div><div class=\"line\">\t\t\t\trankinten_el_first.nodeValue = &apos;&apos;;</div><div class=\"line\">\t\t\t\trankinten_el.classList.add(&apos;zero&apos;);</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\t// 순위가 올랐다면 css에 적용한 up클래스 붙이기</div><div class=\"line\">\t\t\telse if(rankinten_el_first.nodeValue &gt; 0)&#123;</div><div class=\"line\">\t\t\t\trankinten_el.classList.add(&apos;up&apos;);</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\t// 순위가 내려갔다면 css에 적용한 down클래스 붙이기, 마이너스 없애기</div><div class=\"line\">\t\t\telse if(rankinten_el_first.nodeValue &lt; 0)&#123;</div><div class=\"line\">\t\t\t\t// console.log(rankinten_el_first.nodeValue[0]);</div><div class=\"line\">\t\t\t\tvar el_value = rankinten_el_first.nodeValue;</div><div class=\"line\">\t\t\t\tvar result = el_value.slice(1)+el_value.slice(2, el_value.length);</div><div class=\"line\">\t\t\t\t// console.log(result);</div><div class=\"line\">\t\t\t\trankinten_el_first.nodeValue = result;</div><div class=\"line\">\t\t\t\trankinten_el.classList.add(&apos;down&apos;);</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">&#125;)(this, this.XMLHttpRequest);</div></pre></td></tr></table></figure>\n<h3 id=\"IE에서-작동되지-않는-문제점-발견\"><a href=\"#IE에서-작동되지-않는-문제점-발견\" class=\"headerlink\" title=\"IE에서 작동되지 않는 문제점 발견\"></a>IE에서 작동되지 않는 문제점 발견</h3><p>크롬에서 작업하고 크로스브라우징을 위해 모바일과 IE, 엣지에서 확인해보니 IE에서는 실행이 되지 않았습니다.<br>여러가지 분석 결과 for of문이 인식되지 않는 것을 알았고, json data 객체를 불러들이기 위해 for of문 대신 일반 for문을 사용하였습니다. </p>\n<p>코드 리펙토링 부분<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">for(var i=0; i&lt;movies.length; i++) &#123;</div><div class=\"line\">\ttemplate += [</div><div class=\"line\">\t\t&apos;&lt;li class=&quot;movie-contents&quot;&gt;&apos;,</div><div class=\"line\">\t\t\t&apos;&lt;strong class=&quot;rank&quot;&gt;&apos;+&apos;No.&apos;+movies[i].rank+&apos;&lt;/strong&gt;&apos;,</div><div class=\"line\">\t\t\t&apos;&lt;h3 class=&quot;name&quot;&gt;&apos;+movies[i].movieNm+&apos;&lt;/h3&gt;&apos;,</div><div class=\"line\">\t\t\t&apos;&lt;p class=&quot;opendt small&quot;&gt;&apos;+&apos;개봉일 : &apos;+&apos;&lt;span&gt;&apos;+movies[i].openDt+&apos;&lt;/span&gt;&apos;+&apos;&lt;/p&gt;&apos;,</div><div class=\"line\">\t\t\t&apos;&lt;p class=&quot;audiacc small&quot;&gt;&apos;+&apos;누적 관객 수 : &apos;+&apos;&lt;span&gt;&apos;+movies[i].audiAcc+&apos;&lt;/span&gt;&apos;+&apos;명&apos;+&apos;&lt;/p&gt;&apos;,</div><div class=\"line\">\t\t\t&apos;&lt;p class=&quot;rankinten small&quot;&gt;&apos;+&apos;순위 변화 : &apos;+&apos;&lt;span class=&quot;rank-change&quot;&gt;&apos;+movies[i].rankInten+&apos;&lt;/span&gt;&apos;+&apos;&lt;/p&gt;&apos;,</div><div class=\"line\">\t\t&apos;&lt;/li&gt;&apos;</div><div class=\"line\">\t].join(&apos;&apos;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"연관-링크\"><a href=\"#연관-링크\" class=\"headerlink\" title=\"연관 링크\"></a>연관 링크</h3><p><a href=\"http://www.kobis.or.kr/kobisopenapi/homepg/main/main.do\" target=\"_blank\" rel=\"external\">영화진흥위원회 API</a></p>\n"},{"title":"Networking - AJAX 비동기 통신 기술","url":"https://sharryhong.github.io/2016/12/29/javascript-ajax/","content":"<img src=\"/2016/12/29/javascript-ajax/ajax.png\" alt=\"[AJAX 기술]\" title=\"[AJAX 기술]\">\n<h2 id=\"AJAX-Asynchronous-Javascript-And-XML-개념\"><a href=\"#AJAX-Asynchronous-Javascript-And-XML-개념\" class=\"headerlink\" title=\"AJAX(Asynchronous Javascript And XML) 개념\"></a>AJAX(Asynchronous Javascript And XML) 개념</h2><p>Javascript가 XML을 만나면서 비동기 통신을 한다. -&gt; 요새는 XML보다는 JSON으로 하지만 이름은 그대로 사용하고 있다고 하네요. ^^<br>XML은 자유롭게 마음대로 정할 수 있지만 무겁고 구조화가 어렵다는 단점이 있습니다. 이를 해결하기위해 JSON 등장!</p>\n<p><strong>비동기 통신</strong> : view가 update하는 동안에도(data 변경 등) 사용자는 다른 일을 할 수 있습니다. 자바스크립트 객체가 특정 데이터(업데이트 등을 할 데이터)를 서버에 주고받고 하여 그 부분만 업데이트합니다.<br><strong>필요한 부분만 별도로 요청, 응답받아 처리</strong>합니다. 모든데이터를 업데이트할 필요없어 <strong>불필요한 대역폭 감소</strong>가 가능하고 <strong>비용절감</strong>을 가져옵니다.</p>\n<p>장점 : 사용자에게 더 나은 사용 경험 제공. 속도, 비용 절감<br>단점 : 접근성에는 열악합니다. -&gt; 해결하기 위해 등장 : <a href=\"https://sharryhong.github.io/2016/12/13/web-aria/\">WAI-ARIA</a></p>\n<h3 id=\"AJAX-기술\"><a href=\"#AJAX-기술\" class=\"headerlink\" title=\"AJAX 기술\"></a>AJAX 기술</h3><p>브라우저에서 페이지를 이동하지 않고 자바스크립트를 통해 HTTP Request를 보내고 받아 JS에서 처리할 수 있습니다.</p>\n<p>서버 설치 : <code>$ npm install http-server -g</code><br>로컬 서버 연결 : <code>$ http-server -o -a localhost -p 8081</code><br>: <code>http://localhost:8081</code>로 자동으로 띄워줍니다. </p>\n<p>1) create. <strong>XHR</strong>(XML Http Request)<br>AJAX 통신을 하기 위한 생성자를 통해 객체를 만듭니다. 여러개를 만들어 동시다발적으로 수행시킬 수 있습니다.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">var xhr = new XMLHttpRequest();</div></pre></td></tr></table></figure></p>\n<p>2) open 메소드 : setting 구간. 요청의 방식과 url설정<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">xhr.open(&apos;GET&apos;, &apos;data/data.json&apos;);</div></pre></td></tr></table></figure></p>\n<p>3) send 메소드 : 요청 전송. 통신 시작<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">xhr.send();</div></pre></td></tr></table></figure></p>\n<p>응답확인 : <code>xhr.response</code> 콘솔창에 쳐보면 data.json 데이터를 볼 수 있습니다. </p>\n<h4 id=\"XMLHttpRequest에서-http요청을-보냈을-때-발생하는-이벤트의-종류\"><a href=\"#XMLHttpRequest에서-http요청을-보냈을-때-발생하는-이벤트의-종류\" class=\"headerlink\" title=\"XMLHttpRequest에서 http요청을 보냈을 때 발생하는 이벤트의 종류\"></a>XMLHttpRequest에서 http요청을 보냈을 때 발생하는 이벤트의 종류</h4><h5 id=\"readyState-속성\"><a href=\"#readyState-속성\" class=\"headerlink\" title=\"readyState 속성\"></a>readyState 속성</h5><p>AJAX 요청에 따라 0~4까지 변화<br>0 : open 메소드 호출 전<br>1 : open 메소드 호출 후<br>2 : 보낸 요청에 대해 응답 헤더가 수신된 후<br>3 : 응답의 바디 부분이 수신중일 때<br><strong>4 : 모든 응답이 수신되었을 때</strong></p>\n<h5 id=\"status-속성\"><a href=\"#status-속성\" class=\"headerlink\" title=\"status 속성\"></a>status 속성</h5><p>HTTP response의 응답 헤더에 기록된 코드<br><strong>200 : OK. 정상적으로 data를 보냄</strong><br>404 : Not Found<br>500 : Internal Error</p>\n<h5 id=\"onreadystatechange-속성\"><a href=\"#onreadystatechange-속성\" class=\"headerlink\" title=\"onreadystatechange 속성\"></a>onreadystatechange 속성</h5><p>readyState가 변할 때마다 호출되는 콜백 함수</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">var xhr = new XMLHttpRequest();</div><div class=\"line\">xhr.onreadystatechange = function a() &#123;</div><div class=\"line\">\tconsole.log(this.readyState, this.status);</div><div class=\"line\">\tif(this.readyState == 4 &amp;&amp; this.status == 200) &#123;</div><div class=\"line\">\t\tconsole.log(this.response);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\">xhr.open(&apos;GET&apos;, &apos;./data.txt&apos;);</div><div class=\"line\">xhr.send();</div></pre></td></tr></table></figure>\n<h2 id=\"JSON-JavaScript-Object-Notation\"><a href=\"#JSON-JavaScript-Object-Notation\" class=\"headerlink\" title=\"JSON (JavaScript Object Notation)\"></a>JSON (JavaScript Object Notation)</h2><p>AJAX 형태로 받은 문자를 객체로, 객체를 문자로 바꿀 수 있는 능력을 가지고 있습니다.<br><strong>자바스크립트 객체를 문자열로 표현</strong>하므로 프로그램간에 전달하기 편리합니다.<br>서버에서 보낼 데이터를 JSON형태로 브라우저로 전송<br>데이터를 수신한 브라우저는 자바스크립트를 통해 데이터를 파싱하고 문서에 반영합니다. </p>\n<h4 id=\"JSON-API\"><a href=\"#JSON-API\" class=\"headerlink\" title=\"JSON API\"></a>JSON API</h4><p><code>JSON.stringify(object)</code> 메소드 : 인자로 받은 객체를 JSON 문자열로 반환<br><code>JSON.parse(string)</code> 메소드 : 인자로 받은 문자열을 Javascript Object로 변경하여 반환<br>※ undefined, function 은 변환되지 않습니다.</p>\n<h3 id=\"참고-자료\"><a href=\"#참고-자료\" class=\"headerlink\" title=\"참고 자료\"></a>참고 자료</h3><p><a href=\"http://tryhelloworld.co.kr/courses/%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8%EC%99%80-%EC%9B%B9-%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C\" target=\"_blank\" rel=\"external\">helloworld - 자바스크립트와 웹 프론트엔드</a><br><a href=\"https://github.com/sharryhong/FDS/tree/master/day41-angulerjs\" target=\"_blank\" rel=\"external\">My Github 링크</a></p>\n"},{"title":"JavaScript DOM","url":"https://sharryhong.github.io/2016/12/28/javascript-dom/","content":"<img src=\"/2016/12/28/javascript-dom/dom.png\" alt=\"[JavaScript DOM]\" title=\"[JavaScript DOM]\">\n<blockquote>\n<p>JavaScript를 배운다는 건…<br>core(문법), core library(기본 제공 함수 등), BOM, DOM<br>이 중 DOM에 대해 정리해보겠습니다. </p>\n</blockquote>\n<h2 id=\"DOM-Document-Object-Model\"><a href=\"#DOM-Document-Object-Model\" class=\"headerlink\" title=\"DOM(Document Object Model)\"></a>DOM(Document Object Model)</h2><p>노드, 스타일, 속성, 이벤트, 위치 및 크기 등을 다룰 수 있는 다양한 기능이 포함되어 있습니다.<br>※ 노드 : HTML 웹페이지 구성요소의 가장 작은 단위로써 요소, 주석, 텍스트 등이 모두 노드에 해당합니다. </p>\n<h3 id=\"DOM과-HTML페이지의-관계\"><a href=\"#DOM과-HTML페이지의-관계\" class=\"headerlink\" title=\"DOM과 HTML페이지의 관계\"></a>DOM과 HTML페이지의 관계</h3><ol>\n<li>HTML페이지 로딩<br>-&gt; 2. 파싱(Parsing)을 거쳐 작성된 마크업 요소와 1:1로 매칭되는 DOM객체 생성(DOM Tree)<br>예를들어, 파싱단계에서 <code>&lt;div&gt;</code>를 만나면 <code>HTMLDivElement</code>라는 클래스의 인스턴스(객체)를 생성하게 됩니다.<br>-&gt; 3. 브라우저 화면에 출력 </li>\n</ol>\n<h3 id=\"핵심-DOM-객체\"><a href=\"#핵심-DOM-객체\" class=\"headerlink\" title=\"핵심 DOM 객체\"></a>핵심 DOM 객체</h3><p><strong>Node</strong> : 노드를 다루는 기본 기능과 프로퍼티 제공. 노드를 탐색, 조작<br>※ 노드에는 Element node(요소), Text node(텍스트, 빈칸포함), 주석 노드 등도 모두 포함<br><strong>Document</strong> : text node, element node, attribute node 생성<br><strong>Element</strong> : 요소의 기본 기능과 프로퍼티 제공. 속성과 이벤트 제어<br><strong>Text</strong> : 텍스트를 다루는 기능<br><strong>Attribute</strong> : 속성을 다루는 기능<br><strong>HTMLDocument</strong> : Document객체를 확장하여 HTML용 프로퍼티와 메서드를 추가한 객체<br><strong>HTMLElement</strong> : HTML요소의 기본 기능과 프로퍼티 제공. id, className, style등이 존재</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">DOM객체</th>\n<th style=\"text-align:left\">Node</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">상속구조</td>\n<td style=\"text-align:left\">Node</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">기능</td>\n<td style=\"text-align:left\">노드 탐색, 조작하는 프로퍼티와 메서드</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">주요 프로퍼티</td>\n<td style=\"text-align:left\"><code>node.parentNode</code> 부모노드 탐색<br><code>node.childNodes</code> 자식노드들 탐색<br><code>node.firstChild</code> 첫번째 자식노드 탐색<br><code>node.lastChild</code> 마지막 자식노드 탐색<br><code>node.previousSibling</code> 이전 형제노드 탐색<br><code>node.nextSibling</code>다음 형제노드 탐색<br><code>node.children</code> 그 안의 요소만 가져옴. <br>빈칸은 textnode인데 가져오지 않으므로 편리하다. <br><code>node.nodeName</code>요소의 이름을 대문자로 반환<br><code>node.nodeType</code> 요소노드는 1, 텍스트노드 3, 주석노드 8<br><code>node.nodeValue</code> 텍스트노드에만 접근 가능.<br> 텍스트 노드의 실제 값 반환. 요소노드의 경우는 null 반환<br><code>node.hasChildNodes()</code> 자식이 있으면 true, 없으면 false<br><br><strong>※ 아래는 IE8이하는 안되나 요소만 찾아줌</strong> <br> <code>node.parentElement</code> 부모요소 탐색 <br><code>node.firstElementChild</code> 첫 자식요소 노드 탐색<br> <code>node.lastElementChild</code> 마지막 자식 요소 노드 탐색<br> <code>node.previousElementSibling</code> 이전 형제요소 탐색<br> <code>node.nextElementSibling</code> 다음 형제요소 탐색</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">주요 메서드</td>\n<td style=\"text-align:left\"><code>node.hasChildNodes()</code> true/false 반환<br><code>node.hasChildNodes()</code> true/false 반환<br><code>node.cloneNode(boolean)</code> false가 기본값. true면 자식까지 복제<br><code>부모노드.appendChild(자식노드)</code> 부모의 꽁지쪽에 붙이기<br><code>목표노드.부모노드.insertBefore(insert삽입할노드, target목표노드)</code> <br><code>node.removeChild(childnode)</code><br><code>target_node.parentNode.replaceChild(replace_node, target_node)</code> <br>노드 교체. 위치를 교체하는 것이 아니라, 이전 노드를 삭제 한다.<br>이전 노드를 삭제하지만 결과 값으로 반환된다.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">사용 예</td>\n<td style=\"text-align:left\"><code>var el = document.getElementById(&#39;div-01&#39;).nextSibling;</code></td>\n</tr>\n</tbody>\n</table>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">DOM객체</th>\n<th>Document</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">상속구조</td>\n<td>Node &gt; Document</td>\n<td></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">기능</td>\n<td>Text node, Element node 생성</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">주요 프로퍼티</td>\n<td></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">주요 메서드</td>\n<td><code>document.createElement(&#39;element&#39;)</code> 요소 만들기. 실제 DOM에 붙는건 아님<br> <code>document.createTextNode(&#39;text&#39;)</code> 텍스트 노드 만들기 <br> <code>document.createAttribute(&quot;name&quot;);</code> 잘쓰지않음<br><code>document.getElementById(&quot;idname&quot;);</code> id로 대상(요소노드)을 선택 <br><code>document.getElementsByTagName(&quot;p&quot;);</code> 요소명으로 선택<br><code>document.getElementsByClassName(&#39;classname&#39;);</code> 클래스명으로 선택<br><code>document.querySelector(css selector);</code>막강!!! IE8이상. 첫번째 하나만 반환<br><code>document.querySelectorAll(css selector);</code> 상동. 전체 복수로 반환<br>createEvent()<br><code>target.addEventListener(type, listener[, options]);</code><br>dispatchEvent()<br>removeListener()</td>\n</tr>\n</tbody>\n</table>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">DOM객체</th>\n<th>HTMLDocument</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">상속구조</td>\n<td>Node &gt; Document &gt; HTMLDocument</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">기능</td>\n<td>HTML문서 전용 프로퍼티, 메서드</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">주요 프로퍼티</td>\n<td></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">주요 메서드</td>\n<td>close()<br>open()<br>write()<br>Element[]<br>getElementByName()</td>\n</tr>\n</tbody>\n</table>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">DOM객체</th>\n<th>Element</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">상속구조</td>\n<td>Node &gt; Element</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">기능</td>\n<td>속성을 다루는 기능, 이벤트</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">주요 프로퍼티</td>\n<td><code>tagName</code> 요소의 이름반환. 예전방식</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">주요 메서드</td>\n<td>Element[]<br>ElementsByTagName()<br><code>element.hasAttribute(attName);</code> true/false 반환<br><code>element.getAttribute(attributeName);</code><br><code>element.removeAttribute(attrName);</code><br><code>element.setAttribute(name, value);</code><br><code>target.addEventListener(type, listener[, options]);</code><br>dispatchEvent()<br>removeListener()</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">사용 예</td>\n<td><code>var parent_el = document.getElementById(&#39;parent&#39;);</code> <br><code>console.log(&#39;data-con:&#39;, parent_el.getAttribute(&#39;data-con&#39;));</code></td>\n</tr>\n</tbody>\n</table>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">DOM객체</th>\n<th>HTMLElement</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">상속구조</td>\n<td>Node &gt; Element &gt; HTMLElement</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">기능</td>\n<td>HTML요소 전용 프로퍼티, 메서드</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">주요 프로퍼티</td>\n<td><code>element.id</code><br><code>element.className</code><br><code>element.innerHTML = content;</code>노드 동적생성을 쉽게해줌<br><code>element.style.color = &quot;blue&quot;;</code><br><code>element.offsetWidth</code> border까지의 width<br><code>element.offsetHeight</code> border까지의 height<br><code>element.offsetLeft</code><br><code>element.offsetTop</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">주요 메서드</td>\n<td>onkeydown<br>onkeypress<br>onkeyup<br>onclick<br>ondbclick<br>onmousedown<br>onmousemove<br>onmouseout<br>onmouseover<br>onmouseup</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">사용 예</td>\n<td><code>var parent_el = document.getElementById(&#39;parent&#39;);</code><br><code>console.log(&#39;id:&#39;, parent_el.id);</code><br><code>console.log(&#39;class:&#39;, parent_el.className);</code><br><code>console.log(&#39;title:&#39;, parent_el.title);</code></td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"참고-자료\"><a href=\"#참고-자료\" class=\"headerlink\" title=\"참고 자료\"></a>참고 자료</h3><p><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Document\" target=\"_blank\" rel=\"external\">DOM - MDN</a><br><a href=\"https://github.com/sharryhong/FDS/tree/master/day29-javascript\" target=\"_blank\" rel=\"external\">My Github 링크</a><br>웹 프론트엔드 개발자를 위한, 자바스크립트+jQuery 완전정복 스터디 - 김춘경(딴동네) </p>\n"},{"title":"JavaScript BOM","url":"https://sharryhong.github.io/2016/12/28/javascript-bom/","content":"<img src=\"/2016/12/28/javascript-bom/bom.jpg\" alt=\"[JavaScript BOM]\" title=\"[JavaScript BOM]\">\n<blockquote>\n<p>JavaScript를 배운다는 건…<br>core(문법), core library(기본 제공 함수 등), BOM, DOM<br>이 중 BOM에 대해 정리해보겠습니다. </p>\n</blockquote>\n<h2 id=\"BOM-Brower-Object-Model\"><a href=\"#BOM-Brower-Object-Model\" class=\"headerlink\" title=\"BOM(Brower Object Model)\"></a>BOM(Brower Object Model)</h2><p>웹 브라우저를 구성하는 객체들이 포함되어 있습니다. </p>\n<h4 id=\"Window-객체\"><a href=\"#Window-객체\" class=\"headerlink\" title=\"Window 객체\"></a>Window 객체</h4><p>Javascript 실행시 가장 상위에 존재하는 객체입니다.<br>웹 페이지의 정보에 접근하거나 변경을 할 수 있습니다.<br>윈도우 창을 구성하며 server-side에는 없습니다.<br>브라우저별로 문법이 다르기 때문에 크로스브라우징이 어렵습니다.<br>IE9부터는 표준을 지켜서 괜찮으나 IE8은 고려해야 합니다.</p>\n<p><strong>Navigator</strong>        : 브라우저 정보<br><strong>Location</strong>        : 주소창 부분<br><strong>History</strong>        : 이번보기 다음보기 등<br><strong>Document</strong>        : 웹 페이지 문서의 HTML, CSS 등에 대한 접근 가능. 가장 중요한 개념<br><strong>Screen</strong>         : 디스플레이 부분</p>\n<p>※크롬 콘솔창에 <code>window</code>라고 치면 window 객체에 내장되어 있는 프로퍼티들이 쭉 나옵니다.<br>※ <code>wondow.</code>은 생략이 가능합니다. </p>\n<h4 id=\"주요-프로퍼티-등\"><a href=\"#주요-프로퍼티-등\" class=\"headerlink\" title=\"주요 프로퍼티 등\"></a>주요 프로퍼티 등</h4><p><code>window.devicePixelRatio</code> : 기기의 픽셀 농도<br><code>window.innerWidth</code> : window의 화면 가로 폭<br><code>window.innerHeight</code> : window의 화면 세로 폭<br><code>window.alert(&quot;Dialog 창 띄우기&quot;);</code> : 오늘날은 alert창 별로 쓰지 않고 console로 씁니다.<br><code>window.prompt(&#39;당신의 이름은?&#39;, &#39;예) 홍길동&#39;);</code> : 입력창이 뜹니다. 잘 쓰지 않습니다.<br><code>window.confirm(&quot;당신은 청년입니까?&quot;);</code> : Yes, No 값을 받을 수 있습니다.<br><code>window.open(&#39;http://www.naver.com&#39;);</code> : 들어가자마자 새창이 뜹니다. 요샌 쓰지 않습니다.<br><code>window.scrollX</code> = <code>window.pageXOffset;</code> : 가로 스크롤바 위치<br><code>window.scrollY</code> =<code>window.pageYOffset</code> : 세로 스크롤바 위치 (나중에 스크롤 moving사용시 씀)<br>크롬은 둘다 사용. 브라우저별로 다른 문법 사용<br><code>window.scrollTo(0,1000);</code> : x축 0, y축 1000px 절대적 위치이동<br><code>window.scrollBy(0,100);</code> : x축 0, y축 1000px 상대적 위치이동<br><code>window.setInterval(할일(함수), 시간(밀리초));</code> : 주기마다 계속 함수 반복<br><code>window.setTimeout(할일(함수), 시간(밀리초));</code> : 시간 후에 1회만 함수 실행<br><code>window.clearInterval()</code> : 멈춤. 변수에 setInterval되는 것을 담아놨다가 ()안에 넣기<br><code>window.requestAnimationFrame();</code> : setInterval의 단점을 보완. IE10부터.</p>\n<h4 id=\"Location-주소창-객체\"><a href=\"#Location-주소창-객체\" class=\"headerlink\" title=\"Location (주소창) 객체\"></a>Location (주소창) 객체</h4><p><code>location.href;</code> : 주소 “<a href=\"http://caniuse.com\" target=\"_blank\" rel=\"external\">http://caniuse.com</a>“<br><code>location.protocol;</code> : “http:”<br><code>location.domain;</code><br><code>location.host;</code> : “caniuse.com”<br><code>location.hostname;</code> : “caniuse.com”<br><code>location.port;</code><br><code>location.hash;</code> : 해당페이지의 목적지(id)</p>\n<h4 id=\"History-객체\"><a href=\"#History-객체\" class=\"headerlink\" title=\"History 객체\"></a>History 객체</h4><p><code>history.back()</code> : 한칸 뒤로가기<br><code>history.forward()</code> : 한칸 앞페이지 가기<br><code>history.go(-2)</code> : 2칸 뒤로가기 등 제어가능</p>\n<h4 id=\"Screen-객체\"><a href=\"#Screen-객체\" class=\"headerlink\" title=\"Screen 객체\"></a>Screen 객체</h4><p>정확하게 말하자면 내 노트북의 모니터 screen 정보를 말하는 것입니다.<br>통계할 때 빼곤 잘 쓰지 않습니다.<br><code>screen.width</code> : 스크린 width<br><code>screen.height</code> : 스크린 height<br><code>screen.availHeight</code> : 실제 사용가능한 height<br><code>screen.orientation</code> : 중요! 모바일 등 제어<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">// 기울기, 가로모드, onchange되면.. 설정가능</div><div class=\"line\">ScreenOrientation &#123;angle: 0, type: &quot;landscape-primary&quot;, onchange: null&#125;`</div></pre></td></tr></table></figure></p>\n<p>예 )<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">screen.orientation.onchange = fnction() &#123;</div><div class=\"line\">  if ( screen.orientation.type == &apos;landscape-primary&apos;) &#123;</div><div class=\"line\">  ... </div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h4 id=\"Navigator-객체\"><a href=\"#Navigator-객체\" class=\"headerlink\" title=\"Navigator 객체\"></a>Navigator 객체</h4><p><code>navigator.userAgent</code> : 사용자의 브라우저 식발자를 감지하여 거기에 맞는 디자인이 가능합니다.<br>: 크롬 개발자도구의 모바일 버전으로 테스트가 가능합니다.<br>“Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/51.0.2704.103 Safari/537.36”<br><code>navigator.appCodeName</code> : “Mozilla”<br><code>navigator.userAgent.indexOf(&#39;Chrome&#39;) &gt; -1;</code> : Chrome이라는게 있니? 즉, 크롬이니?. 해당 문구가 없다면 -1이 나옵니다. -1보다 크다면(크롬이라면) true를 반환합니다.<br><code>navigator.vendor</code> : 크롬 웹브라우저의 경우 “Google Inc.”<br><code>navigator.cookieEnabled</code> : 쿠키를 쓸 수 있나? true. 현재 모든 브라우저는 쿠키 쓸 수 있습니다.<br><code>!!window.localStorage</code> : 새로운 기술. 로컬스토리지<br><code>navigator.onLine</code> : 온라인인가? true : 온라인일 때 다운받게 하기 등 가능<br><code>navigator.language</code> : 주 언어 “ko”</p>\n<h4 id=\"Document-객체\"><a href=\"#Document-객체\" class=\"headerlink\" title=\"Document 객체\"></a>Document 객체</h4><p>웹 페이지 문서의 HTML, CSS 등에 대한 접근을 가능하게 하므로 Front-End개발에서 가장 중요한 개념입니다. </p>\n<p><code>document.title</code> : title<br><code>document.doctype</code> : &lt;!DOCTYPE html&gt;<br><code>document.compatMode</code> : “CSS1Compat” 표준모드. “BackcCompat” 비표준모드<br><code>돔스크립트(DOM Script)</code> : 자바스크립트를 사용한 문서 동적 제어<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">// 웹 표준 호환 모드라면 standard_mode에 true값이 참조(Reference)됩니다.</div><div class=\"line\">var standard_mode = document.compatMode == &apos;CSS1Compat&apos;;</div><div class=\"line\">// 문서에서 root element인 &lt;html&gt; 요소를 찾아서 변수 html에 참조됩니다.</div><div class=\"line\">var html = document.documentElement;</div><div class=\"line\">// 웹 표준 호환 모드라면 첫번째 코드 블록문이 실행</div><div class=\"line\">if ( standard_mode ) &#123;</div><div class=\"line\">  // 변수 html에 참조된 문서 객체 &lt;html&gt;요소에 class 속성 값을 &apos;standard&apos;로 설정합니다. </div><div class=\"line\">  html.setAttribute(&apos;class&apos;, &apos;standard&apos;);</div><div class=\"line\">&#125; else &#123;</div><div class=\"line\">  html.setAttribute(&apos;class&apos;, &apos;nostandard&apos;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><code>document.activeElement;</code> : focus된, 활성화된 엘리먼트를 알 수 있습니다. 접근성에서 중요합니다.<br><code>document.write(&#39;&#39;);</code> : html코드에 추가되는데 이젠 이렇게 잘 쓰지 않습니다.</p>\n<p><a href=\"https://sharryhong.github.io/2016/12/28/javascript-dom/\">DOM에 대한 포스팅 바로가기</a></p>\n"},{"title":"JavaScript ES6 문법 - Arrow functions","url":"https://sharryhong.github.io/2016/12/26/javascript-es6-arrow-functions/","content":"<img src=\"/2016/12/26/javascript-es6-arrow-functions/js.png\" alt=\"[JavaScript]\" title=\"[JavaScript]\">\n<h3 id=\"Arrow-functions-애로우-펑션-화살표-함수-표현식\"><a href=\"#Arrow-functions-애로우-펑션-화살표-함수-표현식\" class=\"headerlink\" title=\"Arrow functions(애로우 펑션, 화살표 함수 표현식)\"></a>Arrow functions(애로우 펑션, 화살표 함수 표현식)</h3><p>화살표 함수 표현식(arrow function expression)은 함수 표현식(function expression)에 비해 <strong>구문이 짧으며(예제 1.)</strong><br>this, arguments, super 또는 new.target을 <strong>자체 바인딩하지 않습니다(예제 2.)</strong>.</p>\n<p>메소드가 아닌 함수에 가장 적합하며 생성자로 사용할 수 없습니다.</p>\n<h5 id=\"문법\"><a href=\"#문법\" class=\"headerlink\" title=\"문법\"></a>문법</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">(매개변수) =&gt; &#123; statements &#125; // 매개변수가 하나일 땐 괄호 생략 가능</div><div class=\"line\">() =&gt; &#123; statements &#125;        // 매개변수가 없는 함수는 괄호가 필요합니다.</div><div class=\"line\"></div><div class=\"line\">// 객체 리터럴을 return하는 경우는 body를 괄호속에 넣어야 합니다. </div><div class=\"line\">매개변수 =&gt; (&#123; foo: bar &#125;)</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">// 한줄일 경우 &#123;&#125;, return을 생략가능합니다.</div><div class=\"line\">var func = x =&gt; x * x;</div><div class=\"line\"></div><div class=\"line\">// &#123;&#125; 를 쓴다면 return도 써야합니다. </div><div class=\"line\">var func = (x, y) =&gt; &#123; return x + y; &#125;;</div></pre></td></tr></table></figure>\n<h5 id=\"예제-1-짧은-문법-제공\"><a href=\"#예제-1-짧은-문법-제공\" class=\"headerlink\" title=\"예제 1. 짧은 문법 제공\"></a>예제 1. 짧은 문법 제공</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">var materials = [</div><div class=\"line\">  &quot;Hydrogen&quot;,</div><div class=\"line\">  &quot;Helium&quot;,</div><div class=\"line\">  &quot;Lithium&quot;,</div><div class=\"line\">  &quot;Beryllium&quot;</div><div class=\"line\">];</div><div class=\"line\"></div><div class=\"line\">var materialsLength1 = materials.map(function(material)&#123; </div><div class=\"line\"> return material.length </div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">var materialsLength2 = materials.map((material)=&gt;&#123;</div><div class=\"line\"> return material.length</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">var materialsLength3 = materials.map(material=&gt; material.length);</div></pre></td></tr></table></figure>\n<p>위 materialsLength1, materialsLength2, materialsLength3의 결과는 모두 <code>[8, 6, 7, 9]</code>로 같습니다. </p>\n<h5 id=\"예제-2\"><a href=\"#예제-2\" class=\"headerlink\" title=\"예제 2.\"></a>예제 2.</h5><p>기존 JavaScript 문법의 <code>this</code><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">function Person() &#123;</div><div class=\"line\">  // Person () 생성자는`this`를 자신의 인스턴스로 정의합니다.</div><div class=\"line\">  this.age = 0;</div><div class=\"line\"></div><div class=\"line\">  setInterval(function growUp() &#123;</div><div class=\"line\">    // non-strict mode에서는 growUp()함수는 `this`를 정의합니다.</div><div class=\"line\">    // Person () 생성자에 의해 정의된 `this`와는 다른 전역(window) 객체로 정의됩니다.</div><div class=\"line\">    this.age++; </div><div class=\"line\">  &#125;, 1000);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">var p = new Person(); // age가 증가하지 않습니다.</div></pre></td></tr></table></figure></p>\n<p>위와 같은 문제를 해결하기 위해서 ECMAScript 3/5 문법에서는 아래와 같이 <code>this</code>를 변수에 저장하였습니다.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">function Person() &#123;</div><div class=\"line\">  var that = this;</div><div class=\"line\">  that.age = 0;</div><div class=\"line\"></div><div class=\"line\">  setInterval(function growUp() &#123;</div><div class=\"line\">    // callback은 `that`변수를 참조합니다. </div><div class=\"line\">    that.age++;</div><div class=\"line\">  &#125;, 1000);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">var p = new Person(); // age가 증가합니다.</div></pre></td></tr></table></figure></p>\n<p>혹은 bind를 사용하여 아래와같이 해결하기도 합니다.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">function Person() &#123;</div><div class=\"line\">  this.age = 0;</div><div class=\"line\"></div><div class=\"line\">  setInterval(function growUp() &#123;</div><div class=\"line\">    this.age++;</div><div class=\"line\">  &#125;.bind(this), 1000);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">var p = new Person(); // age가 증가합니다.</div></pre></td></tr></table></figure></p>\n<p>Arrow functions은 <code>this</code>를 자체 바인딩하지 않으므로 아래처럼 사용하면 예상대로 작동됩니다.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">function Person()&#123;</div><div class=\"line\">  this.age = 0;</div><div class=\"line\"></div><div class=\"line\">  setInterval(() =&gt; &#123;</div><div class=\"line\">    this.age++; // `this`는 Person객체를 제대로 참조합니다. </div><div class=\"line\">  &#125;, 1000);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">var p = new Person(); // age가 증가합니다.</div></pre></td></tr></table></figure></p>\n<h3 id=\"연관-링크\"><a href=\"#연관-링크\" class=\"headerlink\" title=\"연관 링크\"></a>연관 링크</h3><p><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions\" target=\"_blank\" rel=\"external\">Arrow functions - MDN</a></p>\n<h3 id=\"ES6-포스팅\"><a href=\"#ES6-포스팅\" class=\"headerlink\" title=\"ES6 포스팅\"></a>ES6 포스팅</h3><p><a href=\"https://sharryhong.github.io/2016/12/25/javascript-es6/\">변수선언 let, const</a><br><a href=\"https://sharryhong.github.io/2017/02/02/javascript-es6-blocks/\">Blocks and IIFEs</a><br><a href=\"https://sharryhong.github.io/2017/02/03/javascript-es6-string/\">Strings 문자열표기법 등</a><br><a href=\"https://sharryhong.github.io/2016/12/26/javascript-es6-arrow-functions/\">Arrow functions</a><br><a href=\"https://sharryhong.github.io/2017/02/06/javascript-es6-class/\">Class</a></p>\n"},{"title":"JavaScript ES6 문법 - 변수선언 let, const","url":"https://sharryhong.github.io/2016/12/25/javascript-es6/","content":"<img src=\"/2016/12/25/javascript-es6/js.png\" alt=\"[JavaScript]\" title=\"[JavaScript]\">\n<h2 id=\"ES6-변수-상수-선언-키워드\"><a href=\"#ES6-변수-상수-선언-키워드\" class=\"headerlink\" title=\"ES6 변수, 상수 선언 키워드\"></a>ES6 변수, 상수 선언 키워드</h2><p><code>let</code> : 정의된 블록내에서만 존재하는 변수 선언 (지역 변수)<br><code>const</code> : 위와 동일, 상수(변하지 않는 값) 선언</p>\n<p><code>var</code> : ES6문법 이전부터 사용하던 변수 선언 (전역 변수)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">var x = &apos;global&apos;;\t// 전역 변수 </div><div class=\"line\">let y = &apos;global&apos;;\t// 지역 변수 </div><div class=\"line\">console.log(this.x); \t// &quot;global&quot;</div><div class=\"line\">console.log(this.y);\t// undefined</div></pre></td></tr></table></figure>\n<h3 id=\"Scoping-rules-var와-let-비교\"><a href=\"#Scoping-rules-var와-let-비교\" class=\"headerlink\" title=\"Scoping rules - var와 let 비교\"></a>Scoping rules - <code>var</code>와 <code>let</code> 비교</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">function varTest() &#123;</div><div class=\"line\">  var x = 1;</div><div class=\"line\">  if (true) &#123;</div><div class=\"line\">    var x = 2; \t\t // 위의 x와 같은 변수 </div><div class=\"line\">    console.log(x); \t // 결과 : 2</div><div class=\"line\">  &#125;</div><div class=\"line\">  console.log(x); \t // 결과 : 2</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">function letTest() &#123;</div><div class=\"line\">  let x = 1;</div><div class=\"line\">  if (true) &#123;</div><div class=\"line\">    let x = 2; \t\t // 위의 x와 다른 변수 </div><div class=\"line\">    console.log(x); \t // 결과 : 2</div><div class=\"line\">  &#125;</div><div class=\"line\">  console.log(x); \t // 결과 : 1</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"내부함수-코드를-명확하게-해주는-let\"><a href=\"#내부함수-코드를-명확하게-해주는-let\" class=\"headerlink\" title=\"내부함수 코드를 명확하게 해주는 let\"></a>내부함수 코드를 명확하게 해주는 <code>let</code></h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">var list = document.getElementById(&quot;list&quot;);</div><div class=\"line\"></div><div class=\"line\">for (let i = 1; i &lt;= 5; i++) &#123; \t // for문 내에서만 사용할 변수이므로 let 사용 </div><div class=\"line\">  let item = document.createElement(&quot;li&quot;);</div><div class=\"line\">  item.appendChild(document.createTextNode(&quot;Item &quot; + i));</div><div class=\"line\"></div><div class=\"line\">  item.onclick = function (ev) &#123;</div><div class=\"line\">    console.log(&quot;Item &quot; + i + &quot; is clicked.&quot;);</div><div class=\"line\">  &#125;;</div><div class=\"line\">  list.appendChild(item);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"변수-선언-amp-호이스팅-2017-02-18-수정\"><a href=\"#변수-선언-amp-호이스팅-2017-02-18-수정\" class=\"headerlink\" title=\"변수 선언 &amp; 호이스팅 (2017-02-18 수정)\"></a>변수 선언 &amp; 호이스팅 (2017-02-18 수정)</h3><p><strong>var</strong> : scope내 최상단으로 <strong>호이스팅됩니다</strong>.  </p>\n<h6 id=\"※-호이스팅-어떤-위치에-있든지-위로-끌어올려지는-현상\"><a href=\"#※-호이스팅-어떤-위치에-있든지-위로-끌어올려지는-현상\" class=\"headerlink\" title=\"※ 호이스팅 : 어떤 위치에 있든지 위로 끌어올려지는 현상\"></a>※ 호이스팅 : 어떤 위치에 있든지 위로 끌어올려지는 현상</h6><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">(function()&#123;</div><div class=\"line\">    console.log(a); // var a 까지만 호이스팅되어 undefined</div><div class=\"line\">    var a = 10;   // 값 할당 </div><div class=\"line\">    console.log(a); // 10</div><div class=\"line\">&#125;)();</div></pre></td></tr></table></figure>\n<p><strong>let</strong>과 <strong>const</strong> : <code>TDZ (temporal dead zone, 임시사각지대)</code> 블락 스코프 내에서는 지역변수/상수에 대한 호이스팅이 이뤄지기는 하나, 선언된 위치 이전까지는 해당 변수/상수를 인식하지 못합니다. </p>\n<h6 id=\"출처-고무곰님-블로그\"><a href=\"#출처-고무곰님-블로그\" class=\"headerlink\" title=\"출처 : 고무곰님 블로그\"></a>출처 : <a href=\"https://gomugom.github.io/es6-for-react/index.html\" target=\"_blank\" rel=\"external\">고무곰님 블로그</a></h6><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">function do_something() &#123;</div><div class=\"line\">  console.log(foo); \t// ReferenceError</div><div class=\"line\">  let foo = 2;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">&#123;</div><div class=\"line\">    let a = 2;</div><div class=\"line\">    &#123;</div><div class=\"line\">        console.log(a); // 2일 것 같지만 이것도 error이다.</div><div class=\"line\">        let a = 3;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"전역변수-2017-02-19-추가\"><a href=\"#전역변수-2017-02-19-추가\" class=\"headerlink\" title=\"전역변수 (2017-02-19 추가)\"></a>전역변수 (2017-02-19 추가)</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">var a = 1;</div><div class=\"line\">window.a; // 1</div><div class=\"line\">delete window.a; // false</div><div class=\"line\"></div><div class=\"line\">let b = 2;</div><div class=\"line\">window.b; // undefined</div><div class=\"line\"></div><div class=\"line\">window.c = 3;</div><div class=\"line\">c; // 3</div><div class=\"line\">delete window.c; // true </div><div class=\"line\">c; // error c is not defined</div></pre></td></tr></table></figure>\n<p><code>var a = 1;</code> 처럼 var로 변수를 선언하면 전역 변수가 되어 window 객체의 프로퍼티로 됩니다.<br>하지만 <code>delete window.a</code> 로 삭제를 하려고 해도 삭제를 할 수가 없습니다. </p>\n<p>let은 전역변수가 아니므로 window 객체에 담기지 않습니다.<br>전역변수로 만들고 싶으면 <code>window.c = 3;</code>처럼 직접 window객체의 프로퍼티로 만듭니다.<br>이 때에는 <code>delete window.c;</code>로 지울 수 있습니다. </p>\n<h3 id=\"연관-링크\"><a href=\"#연관-링크\" class=\"headerlink\" title=\"연관 링크\"></a>연관 링크</h3><p><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let\" target=\"_blank\" rel=\"external\">let - MDN</a><br><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference\" target=\"_blank\" rel=\"external\">JavaScript Reference - MDN</a><br><a href=\"http://ccoenraets.github.io/es6-tutorial/\" target=\"_blank\" rel=\"external\">ECMAScript 6 Tutorial</a> </p>\n<h3 id=\"ES6-포스팅\"><a href=\"#ES6-포스팅\" class=\"headerlink\" title=\"ES6 포스팅\"></a>ES6 포스팅</h3><p><a href=\"https://sharryhong.github.io/2016/12/25/javascript-es6/\">변수선언 let, const</a><br><a href=\"https://sharryhong.github.io/2017/02/02/javascript-es6-blocks/\">Blocks and IIFEs</a><br><a href=\"https://sharryhong.github.io/2017/02/03/javascript-es6-string/\">Strings 문자열표기법 등</a><br><a href=\"https://sharryhong.github.io/2016/12/26/javascript-es6-arrow-functions/\">Arrow functions</a><br><a href=\"https://sharryhong.github.io/2017/02/06/javascript-es6-class/\">Class</a></p>\n"},{"title":"javascript30.com 재미있는 자바스크립트 강의","url":"https://sharryhong.github.io/2016/12/24/link-javascript-30/","content":"<p><a href=\"https://javascript30.com\" target=\"_blank\" rel=\"external\">javascript30.com</a> | <a href=\"https://github.com/wesbos/JavaScript30\" target=\"_blank\" rel=\"external\">github 소스</a></p>\n<img src=\"/2016/12/24/link-javascript-30/js.jpg\" alt=\"[ javascript30.com ]\" title=\"[ javascript30.com ]\">\n<blockquote>\n<p>영어로 진행하는데도 재미있게 알아들을 수 있는 신선한 라이브코딩식 강의!</p>\n</blockquote>\n<p>처음엔 <strong>30 Day Vanilla JS Coding Challenge</strong>라고 되어있기에 문제를 하나씩 던져주고 해결하라고 하는건가? 라고 생각했는데, 동영상으로 라이브코딩처럼 진행하는 방식입니다. </p>\n<p>Vanilla JS, 즉, 라이브러리 등을 사용하지 않고 순수 자바스크립트로 코딩하는 데, console.log를 하나하나 찍어가면서 테스트해보기 때문에 더 정감이 가네요 ㅋㅋ </p>\n<p>저는 아직 자바스크립트 ES6 문법을 제대로 익히지 못했는데, 이 강의는 ES6를 쓰는군요!<br>재미있게 강의 보면서 자연스럽게 찾아보고 익혀야겠습니다. :) </p>\n"},{"title":"AngularJS 도입 선택 가이드 - Naver","url":"https://sharryhong.github.io/2016/12/23/angularjs-story/","content":"<p><a href=\"http://d2.naver.com/helloworld/1172239\" target=\"_blank\" rel=\"external\">AngularJS 도입 선택 가이드 - Naver D2</a></p>\n<img src=\"/2016/12/23/angularjs-story/angular.jpg\" alt=\"[ AngularJS 도입 선택 ]\" title=\"[ AngularJS 도입 선택 ]\">\n<blockquote>\n<p>예전에 관리했던 블로그를 살펴보는데 참 재밋네요 :)<br>그 당시에도 앵귤러에 관심이 있어서 링크해두었던 글입니다. </p>\n</blockquote>\n"},{"title":"NVM(Node Version Manager)으로 node.js 버전관리하기","url":"https://sharryhong.github.io/2016/12/20/nodejs-nvm/","content":"<p><a href=\"https://github.com/creationix/nvm\" target=\"_blank\" rel=\"external\">Node Version Manager</a></p>\n<img src=\"/2016/12/20/nodejs-nvm/nvm.jpg\" alt=\"[ Node Version Manager ]\" title=\"[ Node Version Manager ]\">\n<blockquote>\n<p>webpack이 자꾸 안되었던 이유가 node.js의 버전때문이었습니다. 하아 ㅜㅜ 지금이라도 알았으니 다행.. ^^<br>gulp + webpack 설정으로 사용하고 싶어, 스터디 팀끼리 서로 정보 공유하며 씨름하다 결국엔 성공했습니다. ^^ 씐나씐나 ~~~</p>\n</blockquote>\n<p><strong>Windows</strong> 환경에서 <strong>NVM</strong>을 설치하여 <strong>node.js 버전을 바꾸며 사용</strong>하는 방법입니다.<br>(언제나 그렇듯 Mac은 쉽죠잉 : <a href=\"http://blog.jeonghwan.net/2016/08/10/nvm.html\" target=\"_blank\" rel=\"external\">맥은 여기 참조</a>)</p>\n<p>1) 기존에 사용하던 node를 삭제합니다.<br> 윈도우의 경우 제어판의 프로그램 제거에서 삭제하면 됩니다. </p>\n<p>2) <a href=\"https://github.com/coreybutler/nvm-windows/releases\" target=\"_blank\" rel=\"external\">nvm을 설치합니다.</a> nvm-setup.zip 다운받아 설치</p>\n<p>3) 터미널에서 <code>$ nvm install v4.4.6</code> 처럼 사용할 버전의 노드를 설치합니다. </p>\n<p>4) <code>$ nvm ls</code> 로 설치된 버전을 확인 할 수 있습니다.<br> <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ nvm ls</div><div class=\"line\"></div><div class=\"line\"> * 6.9.2 (Currently using 64-bit executable)</div><div class=\"line\">   4.4.6</div></pre></td></tr></table></figure></p>\n<p>위처럼 저는 기존에 사용하던 gulp를 위해 v4.x와 현재 사용할 webpack + gulp를 위해 v6.x를 설치하였습니다. </p>\n<p>5) 노트 버전을 바꾸어봅니다. <code>$ nvm use 4.4.6</code><br>node버전 확인 :  <code>$ node -v</code> 만약 node가 설치 안된 것 처럼 나올 때는 터미널을 껐다 켜봅니다.</p>\n<p>6) gulp를 전역에 설치합니다. <code>$ npm install --global gulp</code><br>주의할 점은 gulp가 버전별로 설치가 되어야 한다는 점입니다.<br>즉, <code>$ nvm use 4.4.6</code> 에서도 설치, <code>$ nvm use 6.9.2</code>로 바꿔서도 설치해줍니다. </p>\n<p>7) 이제 프로젝트에 해당하는 node 버전으로 바꾼 후에 기존처럼 사용하면 됩니다. </p>\n"},{"title":"SASS Nesting(중첩)","url":"https://sharryhong.github.io/2016/12/19/sass-nesting/","content":"<img src=\"/2016/12/19/sass-nesting/thumb.png\" alt=\"[sass]\" title=\"[sass]\">\n<p><a href=\"https://github.com/sharryhong/TIL/tree/master/sass/01_First_Sass\" target=\"_blank\" rel=\"external\">해당 코드가 있는 Github 바로가기01</a><br><a href=\"https://github.com/sharryhong/FDS/tree/master/day22-sass\" target=\"_blank\" rel=\"external\">해당 코드가 있는 Github 바로가기02</a></p>\n<h2 id=\"Nesting-중첩\"><a href=\"#Nesting-중첩\" class=\"headerlink\" title=\"Nesting(중첩)\"></a>Nesting(중첩)</h2><p>중첩은 <strong>반복을 제거</strong>하고 스타일링에 <strong>분명한 DOM관계</strong>를 보여줌으로서 코드를 <strong>효율적</strong>으로 만듭니다.</p>\n<p>확장자가 SCSS, SASS 일 때 문법이 다른데,<br>SCSS파일의 경우는 기존의 CSS의 문법과 동일합니다.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">.parent &#123;</div><div class=\"line\">  color: blue;</div><div class=\"line\">  .child &#123;</div><div class=\"line\">    font-size: 12px;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>SASS파일의 경우 <code>{}</code>를 쓰지 않고 들여쓰기로 구분합니다. <code>;</code>도 쓰지 않습니다.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">.parent </div><div class=\"line\">  color: blue</div><div class=\"line\">  .child </div><div class=\"line\">    font-size: 12px</div></pre></td></tr></table></figure></p>\n<p>위의 SCSS와 SASS의 CSS 컴파일 결과는 같습니다.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">.parent &#123;</div><div class=\"line\">  color: blue;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">.parent .child &#123;</div><div class=\"line\">    font-size: 12px;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h4 id=\"속성에-관련한-Nesting\"><a href=\"#속성에-관련한-Nesting\" class=\"headerlink\" title=\"속성에 관련한 Nesting :\"></a>속성에 관련한 Nesting <code>:</code></h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">.parent &#123;</div><div class=\"line\">  font : &#123;</div><div class=\"line\">    family: Roboto, sans-serif;</div><div class=\"line\">    size: 12px;</div><div class=\"line\">    decoration: none;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>컴파일 결과<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">.parent &#123;</div><div class=\"line\">  font-family: Roboto, sans-serif;</div><div class=\"line\">  font-size: 12px;</div><div class=\"line\">  font-decoration: none;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h4 id=\"amp-부모-참조-선택자-중첩된-구조에서-사용합니다\"><a href=\"#amp-부모-참조-선택자-중첩된-구조에서-사용합니다\" class=\"headerlink\" title=\"&amp; : 부모 참조 선택자. 중첩된 구조에서 사용합니다.\"></a><code>&amp;</code> : 부모 참조 선택자. 중첩된 구조에서 사용합니다.</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">.button</div><div class=\"line\">  &amp;:hover</div><div class=\"line\">     background: skyblue</div></pre></td></tr></table></figure>\n<p>컴파일 결과<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">.button:hover &#123;</div><div class=\"line\">  background: skyblue;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h4 id=\"extend-선택자-상속-그룹핑-개념으로-선언된-다른-규칙의-내용을-상속받습니다\"><a href=\"#extend-선택자-상속-그룹핑-개념으로-선언된-다른-규칙의-내용을-상속받습니다\" class=\"headerlink\" title=\"@extend : 선택자 상속. 그룹핑 개념으로 선언된 다른 규칙의 내용을 상속받습니다.\"></a><code>@extend</code> : 선택자 상속. 그룹핑 개념으로 선언된 다른 규칙의 내용을 상속받습니다.</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">$btn-radius: 4px</div><div class=\"line\">$btn-align: center</div><div class=\"line\">$btn-gap: .6em</div><div class=\"line\">$btn-bg: #fe9977</div><div class=\"line\"></div><div class=\"line\">.button</div><div class=\"line\">  display: inline-block</div><div class=\"line\">  padding: $btn-gap $btn-gap</div><div class=\"line\">  background: $btn-bg</div><div class=\"line\">  text-align: $btn-align</div><div class=\"line\"></div><div class=\"line\">  &amp;:hover</div><div class=\"line\">    background: skyblue</div><div class=\"line\"></div><div class=\"line\">.button-error</div><div class=\"line\">  @extend .button</div><div class=\"line\">  color: #fff</div><div class=\"line\">  border: 3px solid green</div></pre></td></tr></table></figure>\n<p>컴파일 결과<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">.button, .button-error &#123;</div><div class=\"line\">  display: inline-block;</div><div class=\"line\">  padding: 0.6em 0.6em;</div><div class=\"line\">  background: #fe9977;</div><div class=\"line\">  text-align: center; &#125;</div><div class=\"line\">  .button:hover, .button-error:hover &#123;</div><div class=\"line\">    background: skyblue; &#125;</div><div class=\"line\"></div><div class=\"line\">.button-error &#123;</div><div class=\"line\">  color: #fff;</div><div class=\"line\">  border: 3px solid green; &#125;</div></pre></td></tr></table></figure></p>\n"},{"title":"SASS Variables (변수)","url":"https://sharryhong.github.io/2016/12/19/sass-variable/","content":"<img src=\"/2016/12/19/sass-variable/thumb.png\" alt=\"[sass]\" title=\"[sass]\">\n<p><a href=\"https://github.com/sharryhong/TIL/tree/master/sass/01_First_Sass\" target=\"_blank\" rel=\"external\">해당 코드가 있는 Github 바로가기01</a><br><a href=\"https://github.com/sharryhong/FDS/tree/master/day23-sass\" target=\"_blank\" rel=\"external\">해당 코드가 있는 Github 바로가기02</a></p>\n<p>CSS로 style 코드를 작성하다보면 반복사용 하는 것들을 한번에 관리하면 좋겠다는 생각을 하게 됩니다.<br>이럴 때 사용하면 좋을 문법이 sass의 <strong>변수</strong>입니다. 나중엔 mixin, 함수 개념등을 알면 좋은데 우선 변수만 잘 써도 일이 확 줄어드는 것을 알 수 있습니다. 조으다! ^^</p>\n<h2 id=\"Variables-변수\"><a href=\"#Variables-변수\" class=\"headerlink\" title=\"Variables (변수)\"></a>Variables (변수)</h2><p>변수는 가독성과 유지보수를 향상시켜줍니다.</p>\n<p>문법 : <code>$</code>를 붙여 변수를 만들고 값을 대입합니다.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">// 변수 선언 </div><div class=\"line\">$translucent-white: rgba(255,255,255,0.3);</div><div class=\"line\"></div><div class=\"line\">// 변수 사용시 </div><div class=\"line\">background-color: $translucent-white;</div></pre></td></tr></table></figure></p>\n<h4 id=\"변수이름-작성-규칙\"><a href=\"#변수이름-작성-규칙\" class=\"headerlink\" title=\"변수이름 작성 규칙\"></a>변수이름 작성 규칙</h4><p>변수 이름 사이에 공백을 사용하지 않습니다.<br>변수 이름의 음절 사이에 <code>_</code> , <code>-</code> 등을 사용합니다. <code>_</code> , <code>-</code> 구별을 하지 않습니다.<br>만약 프로그래밍에 익숙해서 camelCase방식이 익숙하다면 사용이 가능하지만 camelCase방식은 함수 이름에 사용되므로 권장하지는 않습니다.</p>\n<p><code>!global</code> : 전역변수처럼 사용가능하게 합니다.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">#main &#123;</div><div class=\"line\">  $width: 5em !global;</div><div class=\"line\">  width: $width;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">#sidebar &#123;</div><div class=\"line\">  width: $width;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><code>!default</code> : 기본값. null값을 제외하곤 다른 값이 우선시됩니다.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$set-width: 900px;</div><div class=\"line\">$set-width: 1000px !default</div><div class=\"line\">// 의 경우 900px로 됩니다.</div></pre></td></tr></table></figure></p>\n<h4 id=\"Data-Type-데이터-유형\"><a href=\"#Data-Type-데이터-유형\" class=\"headerlink\" title=\"Data Type (데이터 유형)\"></a>Data Type (데이터 유형)</h4><table>\n<thead>\n<tr>\n<th style=\"text-align:left\">데이터유형</th>\n<th style=\"text-align:right\">설명</th>\n<th style=\"text-align:center\">예</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">null</td>\n<td style=\"text-align:right\">빈 값</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">number</td>\n<td style=\"text-align:right\">숫자</td>\n<td style=\"text-align:center\">1.2, 3, 14px (특이하게 단위가 붙어도 숫자형입니다.)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">string</td>\n<td style=\"text-align:right\">문자</td>\n<td style=\"text-align:center\">color (#, rgba, …) “../img/icon.jpg”, ‘Time, serif’, #333</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">boolean</td>\n<td style=\"text-align:right\">논리. true, false</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">list</td>\n<td style=\"text-align:right\">배열 개념</td>\n<td style=\"text-align:center\"><code>1.5em Helvetica bold;</code> or <code>Helvetica, Arial, sans-serif;</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">map</td>\n<td style=\"text-align:right\">객체 개념</td>\n<td style=\"text-align:center\"><code>(key1: value1, key2: value2);</code></td>\n</tr>\n</tbody>\n</table>\n"},{"title":"Link-AngularJS","url":"https://sharryhong.github.io/2016/12/18/Link-AngularJS/","content":"<p><a href=\"http://blog.jeonghwan.net/2016/08/20/angular-facts-easy-to-miss.html\" target=\"_blank\" rel=\"external\">앵귤러 개발자가 놓치기 쉬운 10가지 사실들 - 김정환님 블로그</a> 포스팅을 보며 앵귤러 코드 리펙토링하고 있습니다.<br>저 글 뿐 아니라 앵귤러 세미나내용도 있으니 우리 썬쓰 SunS(스터디 팀)끼리 열심히 해볼 생각입니다. ^^<br>저도 차근차근 실력쌓아서 도움되는 블로그를 만들고 싶네요. :)</p>\n"},{"title":"2016 정보접근성 기술 컨퍼런스 & WAI-ARIA","url":"https://sharryhong.github.io/2016/12/13/web-aria/","content":"<img src=\"/2016/12/13/web-aria/aria.jpg\" alt=\"[ 소중하다! :) ]\" title=\"[ 소중하다! :) ]\">\n<p>12월 9일 금요일. <strong>UN 인권의 날 기념 - 2016 정보접근성 기술 컨퍼런스</strong>에 다녀왔습니다.<br>집에서 먼 거리에 있어 상암쪽은 살면서 두번째네요~<br>결론은.. 눈 비비며 먼 길 다녀온 보람이 있었다는 것입니다. ^^</p>\n<p>특히 우리 프론트엔드 개발스쿨의 <strong>야무쌤</strong> 파트였던 WAI-ARIA부분은 예전부터 알고 싶던 기술이었기 때문에 더 귀를 쫑끗하며 들었습니다.<br>한국 웹접근성 지침을 잘 따르더라도, 모두가 동등하게 사용하는데에는 부족하다는데요.<br>실제로 스크린리더기 등으로 들어보니 우리가 의도한 바를 어떤 분들은 알기 어렵구나, 그리고 아리아를 적용하는게 생각보다 어렵진 않겠구나를 느꼈습니다. </p>\n<blockquote>\n<p>WAI-ARIA란?<br>접근성이 떨어지기 쉬운 <strong>동적 컨텐츠에 접근성을 보완</strong>하는 기술입니다. </p>\n</blockquote>\n<h3 id=\"접근성이-떨어지기-쉬운-부분은\"><a href=\"#접근성이-떨어지기-쉬운-부분은\" class=\"headerlink\" title=\"접근성이 떨어지기 쉬운 부분은?\"></a>접근성이 떨어지기 쉬운 부분은?</h3><p>동적인 웹 애플리케이션 접근성 보장을 위한 지침이 부족합니다.<br>Ajax를 통한 실시간 변경 콘텐츠를 못 읽을 수 있습니다.<br>페이지 콘텐츠 중 일부만 변경 시, 동일한 내용을 계속 읽어야 하는 문제가 발생합니다.<br>화면을 확대해서 보는 분들의 경우, 가시범위 밖의 콘텐츠 변경 내용을 알기 어렵습니다.<br>그 외에도 많다고 하네요 ㅜㅜ </p>\n<blockquote>\n<p>WAI-ARIA의 목적?<br>마크업에 <code>역할(Role)</code>, <code>속성(Property)</code>, <code>상태(State)</code> 정보를 추가하여<br><strong>스크린 리더</strong> 및 <strong>보조 기기</strong>등에서 <strong>접근성 및 상호운용성</strong>을 향상시키고<br>보다 나은 <strong>사용자경험</strong>(UX)을 제공하기 위함 </p>\n</blockquote>\n<p><a href=\"http://caniuse.com/#search=wai-aria\" target=\"_blank\" rel=\"external\">브라우저 지원현황</a><br>: IE11부터, 대부분의 브라우저가 지원하고 있습니다. </p>\n<p><a href=\"https://github.com/niawa/ARIA\" target=\"_blank\" rel=\"external\">WAI-ARIA 사례 바로가기</a><br>: 야무쌤 포함 여러 전문가들의 노력으로 아리아 사례가 github에 공개되어 있습니다. </p>\n<h4 id=\"세미나-그-후-나의-생각\"><a href=\"#세미나-그-후-나의-생각\" class=\"headerlink\" title=\"세미나 그 후 나의 생각\"></a>세미나 그 후 나의 생각</h4><p>아직 공공기관이나 대기업의 사이트 정도만 웹접근성을 잘 따르려 노력하고 있다고 들었는데, 앞으로는 모두를 위해 천천히라도 적용하였으면 좋겠습니다.<br>웹 접근성을 지키면 사람의 일부가 아니라, 전체에 좋아질거라 생각됩니다.<br>노인을 위한 디자인을 위해, 3년간 노인 분장을 하고 도시를 돌아다녔던 <a href=\"http://m.post.naver.com/viewer/postView.nhn?volumeNo=3353175&amp;memberNo=22225909&amp;vType=VERTICAL\" target=\"_blank\" rel=\"external\">패트리샤 무어의 이야기</a>.. 그 결과 힘이 약한 노인이나 아이들 뿐 아니라, 모두에게 편리한 제품을 디자인할 수 있었습니다.<br>웹, 앱도 다르지 않을거라 생각됩니다. 좋은 서비스에 맞는 좋은 접근성을 제공하여 누구나 쉽고 편리하게 사용하는 서비스를 만들고 싶네요… ^^ </p>\n<h3 id=\"연관-링크\"><a href=\"#연관-링크\" class=\"headerlink\" title=\"연관 링크\"></a>연관 링크</h3><p><a href=\"https://www.w3.org/TR/wai-aria-1.1/\" target=\"_blank\" rel=\"external\">W3C의 WAI-ARIA 1.1</a></p>\n"},{"title":"portfolio-sli.do 서비스 (AngularJS)","url":"https://sharryhong.github.io/2016/12/12/portfolio-slido/","content":"<h2 id=\"Hong’s-portfolio-sli-do-바로가기\"><a href=\"#Hong’s-portfolio-sli-do-바로가기\" class=\"headerlink\" title=\"Hong’s portfolio - sli.do 바로가기\"></a><a href=\"https://sharryhong.github.io/hs_slido/src\">Hong’s portfolio - sli.do 바로가기</a></h2><p><a href=\"https://github.com/sharryhong/TIL/tree/master/angularjs/hs_slido\" target=\"_blank\" rel=\"external\">Github 소스 바로가기</a></p>\n<h4 id=\"포트폴리오-주제\"><a href=\"#포트폴리오-주제\" class=\"headerlink\" title=\"포트폴리오 주제\"></a>포트폴리오 주제</h4><p>강의 중 실시간으로 질문, 답변을 받는 서비스 </p>\n<img src=\"/2016/12/12/portfolio-slido/main.jpg\" alt=\"[sli.do service]\" title=\"[sli.do service]\">\n<h4 id=\"포트폴리오-개발-기간\"><a href=\"#포트폴리오-개발-기간\" class=\"headerlink\" title=\"포트폴리오 개발 기간\"></a>포트폴리오 개발 기간</h4><p>2016-11 ~ 공부하며 코드 리펙토링 중입니다.</p>\n<h4 id=\"특징-및-기능\"><a href=\"#특징-및-기능\" class=\"headerlink\" title=\"특징 및 기능\"></a>특징 및 기능</h4><p><code>반응형 웹</code> : 데스크탑, 테블릿, 모바일에 대응하여 적절한 view를 보여줍니다.<br><code>JSON파일의 data</code>를 불러옵니다. (그룹 이름, 작성자 이름, 질문 내용, 좋아요 개수 등)<br>질문을 입력받아 <code>popular(인기순)</code>, <code>Recent(최신순)</code> 대로 보여줍니다.<br>popular(인기순) : <code>좋아요</code> 버튼 클릭시 <code>자동으로 상단</code>으로 이동합니다.<br>질문자 이름을 입력하지 않을 시 <code>Anonymous(익명)</code>로 표시됩니다.<br>질문 내용을 클릭하면 상세페이지로 이동하여 <code>comment(덧글)</code>를 달 수 있습니다.<br>덧글 개수가 JSON data로 저장되어 main에서 숫자로 보여집니다. </p>\n<h4 id=\"사용-Skill\"><a href=\"#사용-Skill\" class=\"headerlink\" title=\"사용 Skill\"></a>사용 Skill</h4><p>JavaScript, AngularJS, JSON, jQuery<br>HTML, SASS to CSS<br>Gulp</p>\n<h4 id=\"주제-선정-이유\"><a href=\"#주제-선정-이유\" class=\"headerlink\" title=\"주제 선정 이유\"></a>주제 선정 이유</h4><p>AngularJS로 서비스를 만들어보고 싶던 중, 생활코딩 세미나에서 <a href=\"https://app.sli.do/event/qao1egje/ask\" target=\"_blank\" rel=\"external\">sli.do의 서비스</a>를 사용하였습니다.<br>사용이 직관적이어서 좋았고, 강의 중 질문을 바로 올리고, 나중에 강사가 모아서 대답을 할 수 있는 좋은 서비스라 생각되어 개발해보고 싶었습니다. </p>\n<h4 id=\"고려사항\"><a href=\"#고려사항\" class=\"headerlink\" title=\"고려사항\"></a>고려사항</h4><p>comment 기능이 있으면 좋을 것 같아 추가하였습니다.<br>JavaScript prototype Class문법<br>크로스 브라우징 : IE9이상 </p>\n"},{"title":"Grid 시스템을 적용한 Responsive(반응형) Site","url":"https://sharryhong.github.io/2016/12/05/progect-grid-responsive/","content":"<p><a href=\"https://sharryhong.github.io/suns/hs-indurge/\">결과화면 보기</a> | <a href=\"https://github.com/sharryhong/suns/tree/master/hs-indurge\" target=\"_blank\" rel=\"external\">Github 소스 바로가기</a></p>\n<img src=\"/2016/12/05/progect-grid-responsive/grid.jpg\" alt=\"[데스크탑 대응 결과 이미지]\" title=\"[데스크탑 대응 결과 이미지]\">\n<img src=\"/2016/12/05/progect-grid-responsive/grid2.jpg\" alt=\"[모바일 대응 결과 이미지]\" title=\"[모바일 대응 결과 이미지]\">\n<h3 id=\"개발-기간\"><a href=\"#개발-기간\" class=\"headerlink\" title=\"개발 기간\"></a>개발 기간</h3><p>2016-07</p>\n<h3 id=\"특징-및-기능\"><a href=\"#특징-및-기능\" class=\"headerlink\" title=\"특징 및 기능\"></a>특징 및 기능</h3><h5 id=\"그리드-시스템에-따른-반응형-웹\"><a href=\"#그리드-시스템에-따른-반응형-웹\" class=\"headerlink\" title=\"그리드 시스템에 따른 반응형 웹\"></a>그리드 시스템에 따른 반응형 웹</h5><p>데스크탑 대응은 <strong>10컬럼</strong>, 모바일 대응은 <strong>2컬럼</strong> 그리드 시스템을 사용하였습니다. </p>\n<h3 id=\"코드-설명\"><a href=\"#코드-설명\" class=\"headerlink\" title=\"코드 설명\"></a>코드 설명</h3><h4 id=\"grid-responsive-css\"><a href=\"#grid-responsive-css\" class=\"headerlink\" title=\"grid-responsive.css\"></a><a href=\"https://github.com/sharryhong/suns/blob/master/hs-indurge/css/grid-responsive.css\" target=\"_blank\" rel=\"external\">grid-responsive.css</a></h4><p>모바일 대응 : <code>.unit-s-1-2</code> ~ <code>.unit-s-11-12</code><br>데스크탑 대응 : <code>.unit-l-1-2</code> ~ <code>.unit-l-11-12</code><br>먼저 위같이 class name을 먼저 지정해주고 width를 %단위로 정해줍니다.<br>그 후 html에서 3등분의 경우 <code>class=&quot;unit-s-1-3&quot;</code>로 지정해주면 자동으로 3등분한 style이 적용됩니다. </p>\n<h4 id=\"style-css\"><a href=\"#style-css\" class=\"headerlink\" title=\"style.css\"></a>style.css</h4><p><strong>모바일 대응 그리드</strong>를 보여주는 부분<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">.show-grid::before &#123;</div><div class=\"line\">\tcontent: &apos;&apos;;</div><div class=\"line\">\tposition: absolute;</div><div class=\"line\">\tz-index: 100;</div><div class=\"line\">\ttop: 0;</div><div class=\"line\">\tleft: 0;</div><div class=\"line\">\twidth: 100%;</div><div class=\"line\">\theight: 2165px;</div><div class=\"line\">\tbackground: </div><div class=\"line\">\t\tlinear-gradient(90deg, rgba(191, 64, 64, 0.1) 50%, rgba(0,0,0,0.1) 50%),</div><div class=\"line\">\t\tlinear-gradient(transparent 95%, #26923f 95%);</div><div class=\"line\">\tbackground-size: </div><div class=\"line\">\t\t// 첫번째 linear-gradient</div><div class=\"line\">\t\t100%,</div><div class=\"line\">\t\t// 두번째 linear-gradient. 가로 1px, 세로 21px로 채워줍니다. </div><div class=\"line\">\t\t1px 1.3125rem;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><code>linear-gradient</code>로 그리드를 직접 볼 수 있도록 그려주었습니다.<br><code>linear-gradient(90deg, rgba(191, 64, 64, 0.1) 50%, rgba(0,0,0,0.1) 50%)</code><br>: x축 그리기. 50%, 50% 간격으로 그리드 색을 지정해줍니다.<br><code>linear-gradient(transparent 95%, #26923f 95%);</code><br>: y축 그리기. 95%는 투명색, 5%는 색상을 지정해주어 선을 표시합니다.</p>\n<p><strong>데스크탑 대응 그리드</strong>를 보여주는 부분<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">@media (min-width: 1000px) &#123;</div><div class=\"line\">\t.show-grid::before &#123;</div><div class=\"line\">\t\tbackground-size: </div><div class=\"line\">\t\t\t20% 20%,</div><div class=\"line\">\t\t\t1px 1.3125rem; </div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><code>linear-gradient</code> 그라이언트 그리드 배경 색상 부분은 모바일 대응과 같아 생략가능하므로 배경 사이즈만 지정하였습니다.</p>\n<h4 id=\"Image-Responsive-Scale의-예-이미지-반응형-크기-대응하기\"><a href=\"#Image-Responsive-Scale의-예-이미지-반응형-크기-대응하기\" class=\"headerlink\" title=\"Image Responsive-Scale의 예 (이미지 반응형 크기 대응하기)\"></a>Image Responsive-Scale의 예 (이미지 반응형 크기 대응하기)</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">.responsive-scale &#123;</div><div class=\"line\">\twidth: 100%;\t</div><div class=\"line\">\tpadding-bottom: 63%; /*1200/1920 *100*/</div><div class=\"line\">\tbackground-image: url(&quot;../img/landscape-photos.jpg&quot;);</div><div class=\"line\">\tbackground-size: cover;</div><div class=\"line\">\tbackground-position: center;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><code>padding-bottom: 세로/가로 * 100%;</code>로 해주면 이미지가 반응형으로 대응합니다. </p>\n"},{"title":"Webpack","url":"https://sharryhong.github.io/2016/11/30/Link-webpack/","content":"<p><a href=\"https://perfectacle.github.io/2016/11/18/Module-bundling-with-Webpck/\" target=\"_blank\" rel=\"external\">webpack에 대하여 - 양권성님 블로그</a><br><a href=\"https://hyunseob.github.io/2016/04/03/webpack-practical-guide/\" target=\"_blank\" rel=\"external\">webpack 기본 가이드 - HyunSeob님 블로그</a><br><a href=\"https://github.com/yamoo9/FDS/blob/master/2nd/DAY30/README.md\" target=\"_blank\" rel=\"external\">webpack for Angular+jquery,sass - yamoo9님 github</a></p>\n"},{"title":"SASS Satting","url":"https://sharryhong.github.io/2016/11/29/sass-satting/","content":"<img src=\"/2016/11/29/sass-satting/thumb.png\" alt=\"[sass]\" title=\"[sass]\">\n<p><a href=\"https://github.com/sharryhong/FDS/tree/master/day22-sass\" target=\"_blank\" rel=\"external\">해당 코드가 있는 Github 바로가기</a></p>\n<p>CSS Preprocessor 인 SASS. 웹 스타일링을 담당하는 CSS를 좀 더 똘똘하게 사용하고 유지보수를 좋게하는 프리프로세서입니다.</p>\n<h2 id=\"설치-및-Sass-to-CSS\"><a href=\"#설치-및-Sass-to-CSS\" class=\"headerlink\" title=\"설치 및 Sass to CSS\"></a>설치 및 Sass to CSS</h2><p>Sass to CSS를 위해 node sass를 실행합니다. 추후엔 Gulp같은 자동화툴로 관리하도록 합니다. </p>\n<h3 id=\"다운로드-및-설치\"><a href=\"#다운로드-및-설치\" class=\"headerlink\" title=\"다운로드 및 설치\"></a><a href=\"https://git-scm.com\" target=\"_blank\" rel=\"external\">다운로드 및 설치</a></h3><p>git bash : 터미널 방식으로 명령어를 사용하여서 Git를 컨트롤 하는 시스템<br>설치 후 파일탐색기 &gt; 해당폴더 &gt; 마우스 오른쪽 &gt; git bush here 를 클릭하여 터미널을 실행시킵니다. </p>\n<h5 id=\"node-sass-설치\"><a href=\"#node-sass-설치\" class=\"headerlink\" title=\"node sass 설치\"></a>node sass 설치</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ npm install node-sass --global 혹은 </div><div class=\"line\">$ npm i -g node-sass (install global줄여쓴 것)</div></pre></td></tr></table></figure>\n<h3 id=\"sass-gt-css로\"><a href=\"#sass-gt-css로\" class=\"headerlink\" title=\"sass -&gt; css로\"></a>sass -&gt; css로</h3><ol>\n<li><p>sass or scss파일을 만들고 저장 후 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ node-sass -w sass/ -o css/ --source-map css</div></pre></td></tr></table></figure>\n<p>sass폴더내의 sass or scss 파일을 css폴더내의 css파일로 컴파일한다는 뜻<br>sourcemapping이 있어야 개발자도구에서 style.sass이런식으로 표시가 됩니다.</p>\n</li>\n<li><p>css 폴더내에 xxx.css.map 파일이 생깁니다. 배포시엔 map파일을 제외하고 올립니다. </p>\n</li>\n<li><p>sass파일을 수정 후 저장합니다. </p>\n</li>\n<li><p>자, 이제 sass -&gt; css파일로 컴파일 되었습니다. 이젠 css파일은 건드리지 않고 sass파일로만 작업합니다. </p>\n</li>\n</ol>\n<h3 id=\"파일-쪼개고-병합하기\"><a href=\"#파일-쪼개고-병합하기\" class=\"headerlink\" title=\"파일 쪼개고 병합하기\"></a>파일 쪼개고 병합하기</h3><p>예를들어 <code>_footer.sass</code>와 같이 <code>_</code>가 붙으면 병합될 파일이므로 컴파일되지 않습니다.<br>style.sass 에서 <code>@import /part/page/footer</code> 이런 식으로 @import 하여 병합시킵니다.<br>@import시 파일이름의 <code>_</code>, <code>.sass</code>, <code>.scss</code>는 생략할 수 있습니다. </p>\n<h3 id=\"Sublime-Text에서-sass-scss-파일-인지시키기\"><a href=\"#Sublime-Text에서-sass-scss-파일-인지시키기\" class=\"headerlink\" title=\"Sublime Text에서 sass, scss 파일 인지시키기\"></a>Sublime Text에서 sass, scss 파일 인지시키기</h3><ol>\n<li>Sublime Text의 install package에서 syntax highlighting for sass를 설치합니다. </li>\n<li>서브라임 텍스트의 오른쪽 하단에서 sass를 선택합니다. </li>\n</ol>\n<h5 id=\"참고-사이트\"><a href=\"#참고-사이트\" class=\"headerlink\" title=\"참고 사이트\"></a>참고 사이트</h5><ul>\n<li><a href=\"http://sass-lang.com/\" target=\"_blank\" rel=\"external\">Sass-lang.com</a><br><img src=\"thumb.png\" alt=\"Sass\">  </li>\n</ul>\n"},{"title":"ReactJS ES6","url":"https://sharryhong.github.io/2016/11/28/Link-ReactJS-ES6/","content":"<p><a href=\"https://gomugom.github.io/es6-for-react/index.html\" target=\"_blank\" rel=\"external\">ReactJS를 작성할 때에 알아두면 좋은 ES6 문법들 - 고무곰님의 블로그</a></p>\n"},{"title":"JavaScript TabMenu (ES5_prototype class)","url":"https://sharryhong.github.io/2016/11/28/project-javascript-tabmenu/","content":"<h3 id=\"JavaScript-프로토타입-방식으로-클래스-만들기-탭-메뉴\"><a href=\"#JavaScript-프로토타입-방식으로-클래스-만들기-탭-메뉴\" class=\"headerlink\" title=\"JavaScript 프로토타입 방식으로 클래스 만들기 - 탭 메뉴\"></a>JavaScript 프로토타입 방식으로 클래스 만들기 - 탭 메뉴</h3><img src=\"/2016/11/28/project-javascript-tabmenu/tabmenu.jpg\" alt=\"[결과 이미지]\" title=\"[결과 이미지]\">\n<p><a href=\"https://github.com/sharryhong/FDS/blob/master/day06_css/css/file-format-icons03.css\" target=\"_blank\" rel=\"external\">해당 코드가 있는 Github 바로가기</a> | <a href=\"https://sharryhong.github.io/TIL/javaScript/02_class/tabmenu.html\">결과화면 보기</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div></pre></td><td class=\"code\"><pre><div class=\"line\">// 2. 함수 단위 -&gt; 프로토타입 방식 클래스 </div><div class=\"line\"></div><div class=\"line\">(function(global, $)&#123;</div><div class=\"line\">&apos;use strict&apos;;</div><div class=\"line\"></div><div class=\"line\">// 인스턴스 생성 \t</div><div class=\"line\">var tabTab1 = new TabMenu();</div><div class=\"line\">var tabTab2 = new TabMenu();</div><div class=\"line\"></div><div class=\"line\">// 클래스 생성, 프로퍼티 생성 </div><div class=\"line\">function TabMenu() &#123;</div><div class=\"line\">\tthis.$tab = null</div><div class=\"line\">\tthis.$tabMenus = null;</div><div class=\"line\">\tthis.$selectMenu = null;</div><div class=\"line\">&#125;</div><div class=\"line\">// 메서드 생성, 요소 초기화  </div><div class=\"line\">TabMenu.prototype.init =function(el)&#123;</div><div class=\"line\">\tthis.$tab = $(el);</div><div class=\"line\">\tthis.$tabMenus = this.$tab.find(&apos;li&apos;);</div><div class=\"line\">\tconsole.log(this);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">TabMenu.prototype.initEvent = function()&#123;</div><div class=\"line\">\tvar objThis = this;\t\t// 아래에 설명 추가 </div><div class=\"line\">\tthis.$tabMenus.on(&quot;click&quot;, function()&#123;</div><div class=\"line\">\t\tobjThis.setSelectMenu($(this));</div><div class=\"line\">\t&#125;);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">TabMenu.prototype.setSelectMenu = function($thisMenu)&#123;</div><div class=\"line\">\tif(this.$selectMenu)&#123;</div><div class=\"line\">\t\tthis.$selectMenu.removeClass(&apos;select&apos;);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\tthis.$selectMenu = $thisMenu;</div><div class=\"line\">\tthis.$selectMenu.addClass(&apos;select&apos;);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">tabTab1.init(&apos;#tabMenu1&apos;);</div><div class=\"line\">tabTab1.initEvent();</div><div class=\"line\"></div><div class=\"line\">tabTab2.init(&apos;#tabMenu2&apos;);</div><div class=\"line\">tabTab2.initEvent();</div><div class=\"line\"></div><div class=\"line\">&#125;)(this, this.jQuery);</div></pre></td></tr></table></figure>\n<h4 id=\"this에-대하여\"><a href=\"#this에-대하여\" class=\"headerlink\" title=\"this에 대하여\"></a><code>this</code>에 대하여</h4><p>클릭(이벤트) 전 <code>this</code> 는 아래처럼 구성되어 있습니다. (크롬 개발자도구)<br>클래스에 프로퍼티와, prototype에 메서드가 정의되어 있는 걸 볼 수 있습니다.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">TabMenu</div><div class=\"line\">\t$selectMenu:null</div><div class=\"line\">\t$tab:n.fn.init[1]</div><div class=\"line\">\t$tabMenus:n.fn.init[6]</div><div class=\"line\">\t__proto__: Object\t\t// = prototype</div><div class=\"line\">\tconstructor:TabMenu()</div><div class=\"line\">\tinit: function(el)</div><div class=\"line\">\tinitEvent: function()</div><div class=\"line\">\tsetSelectMenu: function($thisMenu)</div><div class=\"line\">\t__proto__: Object</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">TabMenu.prototype.initEvent = function()&#123;</div><div class=\"line\">\tvar objThis = this;</div><div class=\"line\">\tthis.$tabMenus.on(&quot;click&quot;, function()&#123;</div><div class=\"line\">\t\tobjThis.setSelectMenu($(this));</div><div class=\"line\">\t&#125;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>위 코드에서  <code>this.$tabMenus.on(&quot;click&quot;,...</code> 클릭을 하면 <code>this</code>가 <strong>클릭한 li요소</strong>로 되어버립니다.<br>(이벤트에서 this는 이벤트를 발생시킨 객체이기 때문입니다.)<br>따라서 변수 objThis에 본래의 this를 저장하여 <code>objThis.setSelectMenu($(this));</code>로 사용한 것입니다. </p>\n<h3 id=\"연관-링크\"><a href=\"#연관-링크\" class=\"headerlink\" title=\"연관 링크\"></a>연관 링크</h3><p><a href=\"https://sharryhong.github.io/2016/11/26/javascript-class/\">JavaScript ES5 Class - 관련 링크 바로가기</a></p>\n"},{"title":"JavaScript Class (ES5)","url":"https://sharryhong.github.io/2016/11/26/javascript-class/","content":"<img src=\"/2016/11/26/javascript-class/js.png\" alt=\"[JavaScript]\" title=\"[JavaScript]\">\n<p>완전정복 스터디 3권(웹동네)으로 공부 + 코드 리펙토링 :)<br><a href=\"https://github.com/sharryhong/TIL/tree/master/javaScript/02_class\" target=\"_blank\" rel=\"external\">해당 코드가 있는 Github 바로가기</a></p>\n<h2 id=\"Class\"><a href=\"#Class\" class=\"headerlink\" title=\"Class\"></a>Class</h2><p>함수가 특정 알고리즘을 포장하는 기술이라면, 클래스는 연관있는 변수와 함수만을 포장하는 기술입니다.<br>클래스로 포장하는 이유는 <strong>객체 단위</strong>로 코드를 그룹화 하고 <strong>재사용</strong>하기 위함입니다.</p>\n<p>ES6에서는 <em>class</em>가 생겼지만 아직 이전 버전으로 개발을 많이 하고 있습니다. </p>\n<p>JavaScript에서 클래스처럼 사용할 수 있는 방법으로는</p>\n<ol>\n<li>리터럴 방식 </li>\n<li>함수 방식</li>\n<li>프로토타입 방식이 있는데 <strong>프로토타입 방식을 선호</strong>합니다.<br>이유는 아래에 설명하겠습니다. </li>\n</ol>\n<h3 id=\"개념\"><a href=\"#개념\" class=\"headerlink\" title=\"개념\"></a>개념</h3><h5 id=\"인스턴스-객체\"><a href=\"#인스턴스-객체\" class=\"headerlink\" title=\"인스턴스 객체\"></a>인스턴스 객체</h5><p>함수를 사용하려면 함수호출을 해야하듯, 클래스를 사용하려면 일반적으로 인스턴스를 생성해야 합니다.<br>클래스 : 설계도, 인스턴스 : 설계도대로 만들어진 결과물 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">var 인스턴스 = new 클래스이름();</div></pre></td></tr></table></figure>\n<p>인스턴스가 만들어지면 클래스에서 포장해 놓은 프로퍼티와 메서드를 사용할 수 있게 됩니다. </p>\n<h5 id=\"프로퍼티-변수\"><a href=\"#프로퍼티-변수\" class=\"headerlink\" title=\"프로퍼티 (변수)\"></a>프로퍼티 (변수)</h5><p>주로 객체 내부에서 사용하는 일반적인 정보, 객체 내부 함수(메서드)에서 처리한 결과값 저장</p>\n<h5 id=\"메서드-함수\"><a href=\"#메서드-함수\" class=\"headerlink\" title=\"메서드 (함수)\"></a>메서드 (함수)</h5><p>주로 객체의 프로퍼티 값을 변경하거나 알아내는 기능, 클래스의 기능들 </p>\n<h5 id=\"생성자\"><a href=\"#생성자\" class=\"headerlink\" title=\"생성자\"></a>생성자</h5><p>인스턴스가 만들어지면서 자동으로 호출되는 함수<br>생성자의 주 용도는 프로퍼티 초기화 역할 담당 </p>\n<h3 id=\"리터럴-방식으로-클래스-만들기\"><a href=\"#리터럴-방식으로-클래스-만들기\" class=\"headerlink\" title=\"리터럴 방식으로 클래스 만들기\"></a>리터럴 방식으로 클래스 만들기</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">var 인스턴스 = &#123;</div><div class=\"line\">\t프로퍼티: 초기 값 \t\t\t\t// 프로퍼티 정의</div><div class=\"line\">\t...</div><div class=\"line\">\t메서드: function() &#123;\t\t\t// 메서드 정의</div><div class=\"line\">\t\t...</div><div class=\"line\">\t&#125;,</div><div class=\"line\">\t...</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">// 객체 외부에서 접근하기 </div><div class=\"line\">인스턴스.프로퍼티;</div><div class=\"line\">인스턴스.메서드();</div></pre></td></tr></table></figure>\n<p>예 :<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(&quot;p&quot;).css(&quot;color&quot;, &quot;#f00&quot;);</div></pre></td></tr></table></figure></p>\n<p>$인 함수를 매개변수 값 “p”로 호출<br>$()함수에서 jQuery의 인스턴스를 만들어 리턴해주기 때문에 접근연산자 <code>.</code>를 이용해 jQuery가 제공하는 기능 중 css() 를 호출해 글자색을 변경할 수 있습니다. </p>\n<blockquote>\n<p><strong>특징</strong><br>리터럴 방식에서는 <strong>생성자가 존재하지 않습니다</strong>.<br>리터럴 방식은 <strong>클래스를 정의함과 동시에 자동으로 인스턴스가 만들어집니다</strong>.<br>단점 : <strong>인스턴스를 하나만</strong> 만들 수 있습니다.<br>주 용도 : 여러 개의 데이터를 묶어 값을 보관하거나 함수의 매개변수 값으로 전달할 때 주로 사용합니다. </p>\n</blockquote>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">var $ch = $(&quot;#ch&quot;);</div><div class=\"line\">$ch.css(&#123;</div><div class=\"line\">\t&quot;position&quot;: &quot;absolute&quot;,</div><div class=\"line\">\t&quot;top&quot;: 100,</div><div class=\"line\">\t&quot;left&quot;: 100</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h3 id=\"함수-방식으로-클래스-만들기\"><a href=\"#함수-방식으로-클래스-만들기\" class=\"headerlink\" title=\"함수 방식으로 클래스 만들기\"></a>함수 방식으로 클래스 만들기</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">// 일반 함수와 비교하기 위해 클래스이름은 대문자로 시작하도록 한다. (일반적인 규칙)</div><div class=\"line\">function 클래스이름() &#123;</div><div class=\"line\">\tthis.프로퍼티 = 초기 값; \t\t// 프로퍼티 정의 </div><div class=\"line\">\t...</div><div class=\"line\">\tthis.메서드 = function() &#123; \t// 메서드 정의</div><div class=\"line\">\t  ...</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t...</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">// 인스턴스 생성</div><div class=\"line\">var 인스턴스 = new 클래스이름(); </div><div class=\"line\">// 메서드 호출</div><div class=\"line\">인스턴스.메서드();</div></pre></td></tr></table></figure>\n<blockquote>\n<p><strong>특징</strong><br>생성자 : <strong>클래스이름 자체가 생성자</strong>이며 <strong>인스턴스가 생성될 때 자동으로 호출</strong>됩니다.<br>장점 : <strong>코드 재사용</strong> 가능<br>단점 : 인스턴스마다 <strong>메서드가 중복해서 생성</strong>됩니다. -&gt; 치명적인 단점</p>\n</blockquote>\n<h3 id=\"프로토타입-방식으로-클래스-만들기\"><a href=\"#프로토타입-방식으로-클래스-만들기\" class=\"headerlink\" title=\"프로토타입 방식으로 클래스 만들기\"></a>프로토타입 방식으로 클래스 만들기</h3><p>클래스를 만드는 방법 중 가장 강력한 방법<br>jQuery도 프로토타입 방식으로 만들어졌다. </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">function 클래스이름() &#123;</div><div class=\"line\">\tthis.프로퍼티 = 초기 값;</div><div class=\"line\">\t...</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">// 메서드는 prototype이라는 프로퍼티에 정의한다. </div><div class=\"line\">클래스이름.prototype.메서드 = function() &#123; \t</div><div class=\"line\">\t...</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">// 인스턴스 생성</div><div class=\"line\">var 인스턴스 = new 클래스이름();</div><div class=\"line\">// 메서드 호출</div><div class=\"line\">인스턴스.메서드();</div></pre></td></tr></table></figure>\n<blockquote>\n<p><strong>특징</strong><br><strong>코드 재사용</strong><br>모든 인스턴스는 <strong>prototype</strong>에 만들어져 있는 <strong>메서드를 공유해서 사용</strong>합니다.<br>자바스크립트에서는 prototype을 이용해 <strong>상속을 구현</strong>합니다. </p>\n</blockquote>\n<h3 id=\"연관-링크\"><a href=\"#연관-링크\" class=\"headerlink\" title=\"연관 링크\"></a>연관 링크</h3><p><a href=\"https://sharryhong.github.io/2016/11/28/project-javascript-tabmenu/\">JavaScript 프로토타입 방식으로 클래스 만들기 실습 - 탭 메뉴</a></p>\n<h3 id=\"연관-포스팅\"><a href=\"#연관-포스팅\" class=\"headerlink\" title=\"연관 포스팅\"></a>연관 포스팅</h3><p><a href=\"https://sharryhong.github.io/2017/02/06/javascript-es6-class/\">JavaScript ES6 문법 - class</a></p>\n"},{"title":"CSS 속성 선택자를 활용하여 각 파일포맷별 아이콘 설정하기","url":"https://sharryhong.github.io/2016/11/26/project-css-icons/","content":"<p><a href=\"https://github.com/sharryhong/TIL/blob/master/javaScript/02_class/js/tabmenu_v02.js\" target=\"_blank\" rel=\"external\">해당 코드가 있는 Github 바로가기</a> | <a href=\"https://sharryhong.github.io/FDS/day06_css/02-css-file-format-type03.html\">결과화면 보기</a><br><br><br><img src=\"/2016/11/26/project-css-icons/css-icons.jpg\" alt=\"[결과 이미지]\" title=\"[결과 이미지]\"></p>\n<h4 id=\"속성-선택자\"><a href=\"#속성-선택자\" class=\"headerlink\" title=\"속성 선택자\"></a>속성 선택자</h4><p>주로 특수한 상황인 요소를 찾을 때 쓰입니다.<br><code>[class=&quot;snack&quot;]</code> : classname이 반드시 snack인 요소 선택<br><code>[class=&quot;snack seeu&quot;]</code> : classname이 반드시 snack seeu인 요소 선택<br><code>[class*=&quot;snack&quot;]</code> : classname에 snack이 있는 요소 선택<br><code>[class^=&quot;snack&quot;]</code> : classname이 snack으로 시작하는 요소 선택<br><code>a[href$=&quot;.docx&quot;]</code> : href 끝나는 값이 .docx인 a요소 선택<br><code>a[href][title][data-href]</code> : 제시된 3가지 속성을 모두 가지고 있는 a요소 선택</p>\n<h4 id=\"핵심-코드-설명\"><a href=\"#핵심-코드-설명\" class=\"headerlink\" title=\"핵심 코드 설명\"></a>핵심 코드 설명</h4><p><a href=\"https://github.com/sharryhong/FDS/blob/master/day06_css/02-css-file-format-type03.html\" target=\"_blank\" rel=\"external\">html 파일</a> </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;li class=&quot;lecture-file-item&quot;&gt;</div><div class=\"line\">\t&lt;a href=&quot;resources/file.aac&quot;&gt;file-aac&lt;/a&gt;</div><div class=\"line\">&lt;/li&gt;</div></pre></td></tr></table></figure>\n<ul>\n<li>다운받을 파일명을 이용하여 background-image를 CSS에 미리 설정해 놓습니다. </li>\n</ul>\n<p><a href=\"(https://github.com/sharryhong/TIL/blob/master/javaScript/02_class/js/tabmenu_v02.js\">CSS 파일</a><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">a[href$=&quot;.aac&quot;] &#123;</div><div class=\"line\">  background-image: url(&quot;../img/icon-aac.png&quot;);</div><div class=\"line\">&#125;</div><div class=\"line\">...</div><div class=\"line\"></div><div class=\"line\">a[href^=&quot;http://&quot;][target=&quot;_blank&quot;],</div><div class=\"line\">a[href^=&quot;https://&quot;][target=&quot;_blank&quot;] &#123;</div><div class=\"line\">  background-image: url(&quot;../img/external-link.png&quot;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<ul>\n<li><code>^</code> 는 <code>처음 값</code></li>\n<li><code>$</code> 는 <code>마지막 값</code></li>\n<li><code>a[href$=&quot;.aac&quot;]</code> : href속성 마지막 값이 .aac인 a요소 선택</li>\n</ul>\n<h3 id=\"연관-링크\"><a href=\"#연관-링크\" class=\"headerlink\" title=\"연관 링크\"></a>연관 링크</h3><p><a href=\"https://github.com/sharryhong/FDS/tree/master/day06_css\" target=\"_blank\" rel=\"external\">CSS 선택자에 관한 공부 링크 바로가기</a></p>\n"},{"title":"portfolio-선대인경제연구소 사이트","url":"https://sharryhong.github.io/2016/11/25/portfolio-sdi/","content":"<p><a href=\"http://sharry.dothome.co.kr/2016/hs-sdi/index.html\" target=\"_blank\" rel=\"external\">Hong’s portfolio - 선대인경제연구소 main 바로가기</a><br><a href=\"http://sharry.dothome.co.kr/2016/hs-sdi/introduce_01.html\" target=\"_blank\" rel=\"external\">sub page01</a> | <a href=\"http://sharry.dothome.co.kr/2016/hs-sdi/insights_01.html\" target=\"_blank\" rel=\"external\">sub page02-블로그리스트</a> | <a href=\"http://sharry.dothome.co.kr/2016/hs-sdi/insights_01_view.html\" target=\"_blank\" rel=\"external\">sub page03-블로그내용</a></p>\n<img src=\"/2016/11/25/portfolio-sdi/sdi.jpg\" alt=\"[선대인경제연구소 사이트]\" title=\"[선대인경제연구소 사이트]\">\n<h4 id=\"포트폴리오-개발-기간\"><a href=\"#포트폴리오-개발-기간\" class=\"headerlink\" title=\"포트폴리오 개발 기간\"></a>포트폴리오 개발 기간</h4><p>2015-12</p>\n<h4 id=\"특징-및-기능\"><a href=\"#특징-및-기능\" class=\"headerlink\" title=\"특징 및 기능\"></a>특징 및 기능</h4><p><code>웹표준</code>, <code>웹접근성</code> 준수<br>크로스 브라우징 : <code>IE8</code> 이상<br>UI에 초점</p>\n<h4 id=\"사용-Skill\"><a href=\"#사용-Skill\" class=\"headerlink\" title=\"사용 Skill\"></a>사용 Skill</h4><p>HTML, CSS, jQuery, JavaScript, Photoshop</p>\n<h4 id=\"고려사항\"><a href=\"#고려사항\" class=\"headerlink\" title=\"고려사항\"></a>고려사항</h4><p><a href=\"http://www.dbcut.com/\" target=\"_blank\" rel=\"external\">디비컷 사이트</a> 중 UI, 공부에 도움될 만한 사이트를 선별하여 작업하였습니다.<br>이미지로 되어있는 것을 가능하면 text와 font awesome등으로 만들었습니다.</p>\n<blockquote>\n<p>2016년 12월 현재.. <strong>코드 리펙토링</strong>하면 좋을 것들<br>jQuery-UI 라이브러리를 사용한 것을 순수 JavaScript로 개발하면 성능에 더 좋을 것 같습니다.</p>\n</blockquote>\n"},{"title":"portfolio-SK 주식회사 사이트","url":"https://sharryhong.github.io/2016/11/25/portfolio-SK/","content":"<p><a href=\"http://sharry.dothome.co.kr/2016/hs-sk/index.html\" target=\"_blank\" rel=\"external\">Hong’s portfolio - SK 주식회사 main 바로가기</a><br><a href=\"http://sharry.dothome.co.kr/2016/hs-sk/introduce_01.html\" target=\"_blank\" rel=\"external\">sub page01</a> | <a href=\"http://sharry.dothome.co.kr/2016/hs-sk/business_01.html\" target=\"_blank\" rel=\"external\">sub page02</a> | <a href=\"http://sharry.dothome.co.kr/2016/hs-sk/prcenter_01.html\" target=\"_blank\" rel=\"external\">sub page03-게시판리스트</a> | <a href=\"http://sharry.dothome.co.kr/2016/hs-sk/prcenter_01_view.html\" target=\"_blank\" rel=\"external\">sub page04-게시판내용</a></p>\n<img src=\"/2016/11/25/portfolio-SK/sk.jpg\" alt=\"[SK 주식회사 사이트]\" title=\"[SK 주식회사 사이트]\">\n<h4 id=\"포트폴리오-개발-기간\"><a href=\"#포트폴리오-개발-기간\" class=\"headerlink\" title=\"포트폴리오 개발 기간\"></a>포트폴리오 개발 기간</h4><p>2015-11</p>\n<h4 id=\"특징-및-기능\"><a href=\"#특징-및-기능\" class=\"headerlink\" title=\"특징 및 기능\"></a>특징 및 기능</h4><p><code>반응형 웹</code> : 데스크탑, 테블릿, 모바일에 대응하여 적절한 view를 보여줍니다.<br><code>웹표준</code>, <code>웹접근성</code> 준수<br>크로스 브라우징 : <code>IE8</code> 이상 </p>\n<h4 id=\"사용-Skill\"><a href=\"#사용-Skill\" class=\"headerlink\" title=\"사용 Skill\"></a>사용 Skill</h4><p>HTML, CSS, jQuery, JavaScript, Photoshop</p>\n<h4 id=\"고려사항\"><a href=\"#고려사항\" class=\"headerlink\" title=\"고려사항\"></a>고려사항</h4><p>디자인대로 마크업, 의미있는 마크업을 하기 위해 노력하였습니다.<br>개발단계를 고려하여 예상 가능한 부분을 미리 마크업하였습니다.(예 : 게시판의 제목이 길어질 경우)<br>버튼, 게시판 등은 모듈화하여 재사용성을 높였습니다.</p>\n<blockquote>\n<p>2016년 12월 현재.. <strong>코드 리펙토링</strong>하면 좋을 것들<br>반응형을 위한 미디어쿼리를 <code>&lt;head&gt;</code>에서 <code>&lt;link media..&gt;</code>로 설정하였는데, 이럴 경우 성능에 좋지 않는 다는 것을 알게되었습니다.<br>이 부분을 <strong>css상에서 @media</strong>로 코드 리펙토링 하는 게 좋을 것 같습니다. </p>\n</blockquote>\n"},{"title":"About Me","url":"https://sharryhong.github.io/about/index.html","content":"<p><strong>Hong’s keyword</strong> : 호기심, 탐구, 열정, 여행, 긍정 에너지<br><strong>지향점</strong> : HTML(구조), CSS(표현), JavaScript(상호작용)을 잘 이해하고 구현하여, 높은 퀄리티의 서비스를 개발하는 Front-End 개발자<br><strong>현재 관심 skill</strong> : HTML, CSS, SASS, Javascript, jQuery, AngularJS, Ionic … </p>\n<p><img src=\"sharry.JPG\" alt=\"Hong Hong\"></p>\n"}]