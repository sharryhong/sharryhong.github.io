[{"title":"javascript tabmenu (ES5_prototype class)","url":"https://sharryhong.github.io/2016/11/28/javascript-tabmenu/","content":"<h3 id=\"JavaScript-프로토타입-방식으로-클래스-만들기-실습-탭-메뉴\"><a href=\"#JavaScript-프로토타입-방식으로-클래스-만들기-실습-탭-메뉴\" class=\"headerlink\" title=\"JavaScript 프로토타입 방식으로 클래스 만들기 실습 - 탭 메뉴\"></a>JavaScript 프로토타입 방식으로 클래스 만들기 실습 - 탭 메뉴</h3><img src=\"/2016/11/28/javascript-tabmenu/tabmenu.jpg\" alt=\"[결과 이미지]\" title=\"[결과 이미지]\">\n<p><a href=\"https://github.com/sharryhong/TIL/blob/master/javaScript/02_class/js/tabmenu_v02.js\" target=\"_blank\" rel=\"external\">해당 코드가 있는 Github 바로가기</a> | <a href=\"https://sharryhong.github.io/TIL/javaScript/02_class/tabmenu.html\">결과화면 보기</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div></pre></td><td class=\"code\"><pre><div class=\"line\">// 2. 함수 단위 -&gt; 프로토타입 방식 클래스 </div><div class=\"line\"></div><div class=\"line\">(function(global, $)&#123;</div><div class=\"line\">&apos;use strict&apos;;</div><div class=\"line\"></div><div class=\"line\">// 인스턴스 생성 \t</div><div class=\"line\">var tabTab1 = new TabMenu();</div><div class=\"line\">var tabTab2 = new TabMenu();</div><div class=\"line\"></div><div class=\"line\">// 클래스 생성, 프로퍼티 생성 </div><div class=\"line\">function TabMenu() &#123;</div><div class=\"line\">\tthis.$tab = null</div><div class=\"line\">\tthis.$tabMenus = null;</div><div class=\"line\">\tthis.$selectMenu = null;</div><div class=\"line\">&#125;</div><div class=\"line\">// 메서드 생성, 요소 초기화  </div><div class=\"line\">TabMenu.prototype.init =function(el)&#123;</div><div class=\"line\">\tthis.$tab = $(el);</div><div class=\"line\">\tthis.$tabMenus = this.$tab.find(&apos;li&apos;);</div><div class=\"line\">\tconsole.log(this);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">TabMenu.prototype.initEvent = function()&#123;</div><div class=\"line\">\tvar objThis = this;\t\t// 아래에 설명 추가 </div><div class=\"line\">\tthis.$tabMenus.on(&quot;click&quot;, function()&#123;</div><div class=\"line\">\t\tobjThis.setSelectMenu($(this));</div><div class=\"line\">\t&#125;);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">TabMenu.prototype.setSelectMenu = function($thisMenu)&#123;</div><div class=\"line\">\tif(this.$selectMenu)&#123;</div><div class=\"line\">\t\tthis.$selectMenu.removeClass(&apos;select&apos;);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\tthis.$selectMenu = $thisMenu;</div><div class=\"line\">\tthis.$selectMenu.addClass(&apos;select&apos;);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">tabTab1.init(&apos;#tabMenu1&apos;);</div><div class=\"line\">tabTab1.initEvent();</div><div class=\"line\"></div><div class=\"line\">tabTab2.init(&apos;#tabMenu2&apos;);</div><div class=\"line\">tabTab2.initEvent();</div><div class=\"line\"></div><div class=\"line\">&#125;)(this, this.jQuery);</div></pre></td></tr></table></figure>\n<ul>\n<li>클릭(이벤트) 전 <code>this</code> 는 아래처럼 구성되어 있다. (크롬 개발자도구)</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">TabMenu</div><div class=\"line\">\t$selectMenu:null</div><div class=\"line\">\t$tab:n.fn.init[1]</div><div class=\"line\">\t$tabMenus:n.fn.init[6]</div><div class=\"line\">\t__proto__: Object</div><div class=\"line\">\tconstructor:TabMenu()</div><div class=\"line\">\tinit: function(el)</div><div class=\"line\">\tinitEvent: function()</div><div class=\"line\">\tsetSelectMenu: function($thisMenu)</div><div class=\"line\">\t__proto__: Object</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">TabMenu.prototype.initEvent = function()&#123;</div><div class=\"line\">\tvar objThis = this;</div><div class=\"line\">\tthis.$tabMenus.on(&quot;click&quot;, function()&#123;</div><div class=\"line\">\t\tobjThis.setSelectMenu($(this));</div><div class=\"line\">\t&#125;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p> 위 코드에서  <code>this.$tabMenus.on(&quot;click&quot;,...</code> 클릭을 하면 <code>this</code>가 <strong>클릭한 li요소</strong>로 되어버립니다. <br><br> 따라서 변수 objThis에 본래의 this를 저장하여 <code>objThis.setSelectMenu($(this));</code>로 사용한 것입니다. </p>\n<h3 id=\"연관-링크\"><a href=\"#연관-링크\" class=\"headerlink\" title=\"연관 링크\"></a>연관 링크</h3><p><a href=\"https://sharryhong.github.io/2016/11/26/javascript-class/\">JavaScript ES5 Class - 관련 링크 바로가기</a></p>\n"},{"title":"javascript class (ES6)","url":"https://sharryhong.github.io/2016/11/26/javascript-class-ES6/","content":"<img src=\"/2016/11/26/javascript-class-ES6/js.png\" alt=\"[JavaScript ES6]\" title=\"[JavaScript ES6]\">\n<p>업뎃중 ^^</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">class Polygon &#123;  // 클래스 이름</div><div class=\"line\">  constructor(height, width) &#123;  // 생성자 (클래스가 만들어지면서 생성자 자동실행)</div><div class=\"line\">    this.height = height;\t\t// 초기화</div><div class=\"line\">    this.width = width;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">var p = new Polygon(); // ReferenceError 호이스팅이 안되므로 에러 </div><div class=\"line\"></div><div class=\"line\">class Polygon &#123;&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"연관-사이트\"><a href=\"#연관-사이트\" class=\"headerlink\" title=\"연관 사이트\"></a>연관 사이트</h3><p><a href=\"https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Classes\" target=\"_blank\" rel=\"external\">MDN - JavaScript Class (ES6)</a></p>\n"},{"title":"javascript class (ES5)","url":"https://sharryhong.github.io/2016/11/26/javascript-class/","content":"<img src=\"/2016/11/26/javascript-class/js.png\" alt=\"[JavaScript]\" title=\"[JavaScript]\">\n<p>완전정복 스터디 3권(웹동네)으로 공부 + 코드 리펙토링 중 입니다. :)<br><a href=\"https://github.com/sharryhong/TIL/tree/master/javaScript/02_class\" target=\"_blank\" rel=\"external\">해당 코드가 있는 Github 바로가기</a></p>\n<h2 id=\"Class\"><a href=\"#Class\" class=\"headerlink\" title=\"Class\"></a>Class</h2><p>함수가 특정 알고리즘을 포장하는 기술이라면, 클래스는 연관있는 변수와 함수만을 포장하는 기술입니다.<br>클래스로 포장하는 이유는 <strong>객체 단위</strong>로 코드를 그룹화 하고 <strong>재사용</strong>하기 위함입니다.</p>\n<p>ES6에서는 <em>class</em>가 생겼지만 아직 이전 버전으로 개발을 많이 하고 있습니다. </p>\n<p>JavaScript에서 클래스처럼 사용할 수 있는 방법으로는</p>\n<ol>\n<li>리터럴 방식 </li>\n<li>함수 방식</li>\n<li>프로토타입 방식이 있는데 <strong>프로토타입 방식을 선호</strong>합니다.<br>이유는 아래에 설명하겠습니다. </li>\n</ol>\n<h3 id=\"개념\"><a href=\"#개념\" class=\"headerlink\" title=\"개념\"></a>개념</h3><h5 id=\"인스턴스-객체\"><a href=\"#인스턴스-객체\" class=\"headerlink\" title=\"인스턴스 객체\"></a>인스턴스 객체</h5><p>함수를 사용하려면 함수호출을 해야하듯, 클래스를 사용하려면 일반적으로 인스턴스를 생성해야 합니다.<br>클래스 : 설계도, 인스턴스 : 설계도대로 만들어진 결과물 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">var 인스턴스 = new 클래스이름();</div></pre></td></tr></table></figure>\n<p>인스턴스가 만들어지면 클래스에서 포장해 놓은 프로퍼티와 메서드를 사용할 수 있게 됩니다. </p>\n<h5 id=\"프로퍼티-변수\"><a href=\"#프로퍼티-변수\" class=\"headerlink\" title=\"프로퍼티 (변수)\"></a>프로퍼티 (변수)</h5><p>주로 객체 내부에서 사용하는 일반적인 정보, 객체 내부 함수(메서드)에서 처리한 결과값 저장</p>\n<h5 id=\"메서드-함수\"><a href=\"#메서드-함수\" class=\"headerlink\" title=\"메서드 (함수)\"></a>메서드 (함수)</h5><p>주로 객체의 프로퍼티 값을 변경하거나 알아내는 기능, 클래스의 기능들 </p>\n<h5 id=\"생성자\"><a href=\"#생성자\" class=\"headerlink\" title=\"생성자\"></a>생성자</h5><p>인스턴스가 만들어지면서 자동으로 호출되는 함수<br>생성자의 주 용도는 프로퍼티 초기화 역할 담당 </p>\n<h3 id=\"리터럴-방식으로-클래스-만들기\"><a href=\"#리터럴-방식으로-클래스-만들기\" class=\"headerlink\" title=\"리터럴 방식으로 클래스 만들기\"></a>리터럴 방식으로 클래스 만들기</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">var 인스턴스 = &#123;</div><div class=\"line\">\t프로퍼티: 초기 값 \t\t\t\t// 프로퍼티 정의</div><div class=\"line\">\t...</div><div class=\"line\">\t메서드: function() &#123;\t\t\t// 메서드 정의</div><div class=\"line\">\t\t...</div><div class=\"line\">\t&#125;,</div><div class=\"line\">\t...</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">// 객체 외부에서 접근하기 </div><div class=\"line\">인스턴스.프로퍼티;</div><div class=\"line\">인스턴스.메서드();</div></pre></td></tr></table></figure>\n<p>예 :<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(&quot;p&quot;).css(&quot;color&quot;, &quot;#f00&quot;);</div></pre></td></tr></table></figure></p>\n<p>$인 함수를 매개변수 값 “p”로 호출<br>$()함수에서 jQuery의 인스턴스를 만들어 리턴해주기 때문에 접근연산자 <code>.</code>를 이용해 jQuery가 제공하는 기능 중 css() 를 호출해 글자색을 변경할 수 있습니다. </p>\n<blockquote>\n<p><strong>특징</strong><br>리터럴 방식에서는 <strong>생성자가 존재하지 않습니다</strong>.<br>리터럴 방식은 <strong>클래스를 정의함과 동시에 자동으로 인스턴스가 만들어집니다</strong>.<br>단점 : <strong>인스턴스를 하나만</strong> 만들 수 있습니다.<br>주 용도 : 여러 개의 데이터를 묶어 값을 보관하거나 함수의 매개변수 값으로 전달할 때 주로 사용합니다. </p>\n</blockquote>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">var $ch = $(&quot;#ch&quot;);</div><div class=\"line\">$ch.css(&#123;</div><div class=\"line\">\t&quot;position&quot;: &quot;absolute&quot;,</div><div class=\"line\">\t&quot;top&quot;: 100,</div><div class=\"line\">\t&quot;left&quot;: 100</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h3 id=\"함수-방식으로-클래스-만들기\"><a href=\"#함수-방식으로-클래스-만들기\" class=\"headerlink\" title=\"함수 방식으로 클래스 만들기\"></a>함수 방식으로 클래스 만들기</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">// 일반 함수와 비교하기 위해 클래스이름은 대문자로 시작하도록 한다. (일반적인 규칙)</div><div class=\"line\">function 클래스이름() &#123;</div><div class=\"line\">\tthis.프로퍼티 = 초기 값; \t\t// 프로퍼티 정의 </div><div class=\"line\">\t...</div><div class=\"line\">\tthis.메서드 = function() &#123; \t// 메서드 정의</div><div class=\"line\">\t  ...</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t...</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">// 인스턴스 생성</div><div class=\"line\">var 인스턴스 = new 클래스이름(); </div><div class=\"line\">// 메서드 호출</div><div class=\"line\">인스턴스.메서드();</div></pre></td></tr></table></figure>\n<blockquote>\n<p><strong>특징</strong><br>생성자 : <strong>클래스이름 자체가 생성자</strong>이며 <strong>인스턴스가 생성될 때 자동으로 호출</strong>됩니다.<br>장점 : <strong>코드 재사용</strong> 가능<br>단점 : 인스턴스마다 <strong>메서드가 중복해서 생성</strong>됩니다. -&gt; 치명적인 단점</p>\n</blockquote>\n<h3 id=\"프로토타입-방식으로-클래스-만들기\"><a href=\"#프로토타입-방식으로-클래스-만들기\" class=\"headerlink\" title=\"프로토타입 방식으로 클래스 만들기\"></a>프로토타입 방식으로 클래스 만들기</h3><p>클래스를 만드는 방법 중 가장 강력한 방법<br>jQuery도 프로토타입 방식으로 만들어졌다. </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">function 클래스이름() &#123;</div><div class=\"line\">\tthis.프로퍼티 = 초개 값;</div><div class=\"line\">\t...</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">// 메서드는 prototype이라는 프로퍼티에 정의한다. </div><div class=\"line\">클래스이름.prototype.메서드 = function() &#123; \t</div><div class=\"line\">\t...</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">// 인스턴스 생성</div><div class=\"line\">var 인스턴스 = new 클래스이름();</div><div class=\"line\">// 메서드 호출</div><div class=\"line\">인스턴스.메서드();</div></pre></td></tr></table></figure>\n<blockquote>\n<p><strong>특징</strong><br><strong>코드 재사용</strong><br>모든 인스턴스는 <strong>prototype</strong>에 만들어져 있는 <strong>메서드를 공유해서 사용</strong>합니다.<br>자바스크립트에서는 prototype을 이용해 <strong>상속을 구현</strong>합니다. </p>\n</blockquote>\n<h3 id=\"연관-링크\"><a href=\"#연관-링크\" class=\"headerlink\" title=\"연관 링크\"></a>연관 링크</h3><p><a href=\"https://sharryhong.github.io/2016/11/28/javascript-tabmenu/\">JavaScript 프로토타입 방식으로 클래스 만들기 실습 - 탭 메뉴</a></p>\n"},{"title":"01. SASS Satting","url":"https://sharryhong.github.io/2016/11/25/01-sass-satting/","content":"<img src=\"/2016/11/25/01-sass-satting/thumb.png\" alt=\"[sass]\" title=\"[sass]\">\n<p><a href=\"https://github.com/sharryhong/FDS/tree/master/day22-sass\" target=\"_blank\" rel=\"external\">해당 코드가 있는 Github 바로가기</a></p>\n<p>CSS Preprocessor 인 SASS. 웹 스타일링을 담당하는 CSS를 좀 더 똘똘하게 사용하고 유지보수를 좋게하는 프리프로세서입니다.</p>\n<h2 id=\"설치-및-Sass-to-CSS\"><a href=\"#설치-및-Sass-to-CSS\" class=\"headerlink\" title=\"설치 및 Sass to CSS\"></a>설치 및 Sass to CSS</h2><p>SASS는 Ruby 언어 기반이나 느리기 때문에 node sass로 실행합니다. 추후엔 Gulp같은 자동화툴로 관리하도록 합니다. </p>\n<h3 id=\"다운로드-및-설치\"><a href=\"#다운로드-및-설치\" class=\"headerlink\" title=\"다운로드 및 설치\"></a><a href=\"https://git-scm.com\" target=\"_blank\" rel=\"external\">다운로드 및 설치</a></h3><p>git bash : 터미널 방식으로 명령어를 사용하여서 Git를 컨트롤 하는 시스템<br>설치 후 파일탐색기 &gt; 해당폴더 &gt; 마우스 오른쪽 &gt; git bush here 를 클릭하여 터미널을 실행시킵니다. </p>\n<h5 id=\"node-sass-설치\"><a href=\"#node-sass-설치\" class=\"headerlink\" title=\"node sass 설치\"></a>node sass 설치</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ npm install node-sass --global 혹은 </div><div class=\"line\">$ npm i -g node-sass (install global줄여쓴 것)</div></pre></td></tr></table></figure>\n<h3 id=\"sass-gt-css로\"><a href=\"#sass-gt-css로\" class=\"headerlink\" title=\"sass -&gt; css로\"></a>sass -&gt; css로</h3><ol>\n<li><p>sass or scss파일을 만들고 저장 후 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ node-sass -w sass/ -o css/ --source-map css</div></pre></td></tr></table></figure>\n<p>sass폴더내의 sass or scss 파일을 css폴더내의 css파일로 컴파일한다는 뜻<br>sourcemapping이 있어야 개발자도구에서 style.sass이런식으로 표시가 됩니다.</p>\n</li>\n<li><p>css 폴더내에 xxx.css.map 파일이 생깁니다. 배포시엔 map파일을 제외하고 올립니다. </p>\n</li>\n<li><p>sass파일을 수정 후 저장합니다. </p>\n</li>\n<li><p>자, 이제 sass -&gt; css파일로 컴파일 되었습니다. 이젠 css파일은 건드리지 않고 sass파일로만 작업합니다. </p>\n</li>\n</ol>\n<h3 id=\"파일-쪼개고-병합하기\"><a href=\"#파일-쪼개고-병합하기\" class=\"headerlink\" title=\"파일 쪼개고 병합하기\"></a>파일 쪼개고 병합하기</h3><p>예를들어 <code>_footer.sass</code>와 같이 <code>_</code>가 붙으면 병합될 파일이므로 컴파일되지 않습니다.<br>style.sass 에서 <code>@import /part/page/footer</code> 이런 식으로 @import 하여 병합시킵니다.<br>@import시 파일이름의 <code>_</code>, <code>.sass</code>, <code>.scss</code>는 생략할 수 있습니다. </p>\n<h3 id=\"Sublime-Text에서-sass-scss-파일-인지시키기\"><a href=\"#Sublime-Text에서-sass-scss-파일-인지시키기\" class=\"headerlink\" title=\"Sublime Text에서 sass, scss 파일 인지시키기\"></a>Sublime Text에서 sass, scss 파일 인지시키기</h3><ol>\n<li>Sublime Text의 install package에서 syntax highlighting for sass를 설치합니다. </li>\n<li>서브라임 텍스트의 오른쪽 하단에서 sass를 선택합니다. </li>\n</ol>\n<h5 id=\"참고-사이트\"><a href=\"#참고-사이트\" class=\"headerlink\" title=\"참고 사이트\"></a>참고 사이트</h5><ul>\n<li><a href=\"http://sass-lang.com/\" target=\"_blank\" rel=\"external\">Sass-lang.com</a><br><img src=\"thumb.png\" alt=\"Sass\">  </li>\n</ul>\n"},{"title":"About Me","url":"https://sharryhong.github.io/about/index.html","content":"<h5 id=\"Hong’s-keyword-호기심-탐구-열정-여행\"><a href=\"#Hong’s-keyword-호기심-탐구-열정-여행\" class=\"headerlink\" title=\"+ Hong’s keyword : 호기심, 탐구, 열정, 여행\"></a>+ Hong’s keyword : 호기심, 탐구, 열정, 여행</h5><h5 id=\"HTML-CSS-SASS-Javascript-jQuery-AngularJS-…-WoW\"><a href=\"#HTML-CSS-SASS-Javascript-jQuery-AngularJS-…-WoW\" class=\"headerlink\" title=\"+ HTML, CSS, SASS, Javascript, jQuery, AngularJS … WoW~!\"></a>+ HTML, CSS, SASS, Javascript, jQuery, AngularJS … WoW~!</h5><p><img src=\"sharry.JPG\" alt=\"Hong Hong\"></p>\n<p><br></p>\n"}]